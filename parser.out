Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    BREAK
    CLASS
    COMMENT
    COMMENT_MULTI
    CONTINUE
    DEL
    DIVIDE
    ELIF
    ELLIPSIS
    ELSE
    ENTERE_DIVIDE
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FROM
    GLOBAL
    GREATER_THAN
    HEX_NUMBER
    IF
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LESS_THAN
    LOGICAL_NOT
    MINUS
    MODULE
    NONE
    NONLOCAL
    NOT
    NULL
    OR
    PASS
    PIPE
    PLUS
    RAISE
    RBRACKET
    RETURN
    SCIENTIFIC_NOTATION
    TIMES
    TRUE
    TRY
    WITH
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentencia
Rule 2     program -> sentencia newline program
Rule 3     sentencia -> print
Rule 4     sentencia -> print_withoutvalue
Rule 5     sentencia -> for
Rule 6     sentencia -> def_function
Rule 7     sentencia -> call_function
Rule 8     sentencia -> input
Rule 9     sentencia -> assignment
Rule 10    sentencia -> short_assignment
Rule 11    for -> FOR rule_comparation LKEY program RKEY
Rule 12    print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
Rule 13    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 14    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
Rule 15    print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 16    print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 17    assignment -> VAR IDENTIFIER data_type EQUAL value
Rule 18    assignment -> CONST IDENTIFIER data_type EQUAL value
Rule 19    assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER
Rule 20    assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER
Rule 21    short_assignment -> IDENTIFIER SHORT_VAR_DECL value
Rule 22    short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER
Rule 23    arithmetic_operation -> IDENTIFIER PLUS_EQ value
Rule 24    arithmetic_operation -> IDENTIFIER MINUS_EQ value
Rule 25    arithmetic_operation -> IDENTIFIER TIMES_EQ value
Rule 26    arithmetic_operation -> IDENTIFIER DIVIDE_EQ value
Rule 27    arithmetic_operation -> IDENTIFIER MODULO_EQ value
Rule 28    arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value
Rule 29    arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value
Rule 30    arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value
Rule 31    arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value
Rule 32    arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value
Rule 33    rule_comparation -> IDENTIFIER EQUALEQUAL value
Rule 34    rule_comparation -> IDENTIFIER NOT_EQUAL value
Rule 35    rule_comparation -> IDENTIFIER LESS_EQUAL value
Rule 36    rule_comparation -> IDENTIFIER GREATER_EQUAL value
Rule 37    rule_comparation -> IDENTIFIER LESS value
Rule 38    rule_comparation -> IDENTIFIER GREATER value
Rule 39    rule_comparation -> IDENTIFIER LOGICAL_AND value
Rule 40    rule_comparation -> IDENTIFIER LOGICAL_OR value
Rule 41    comparation_operation -> value EQUALEQUAL value
Rule 42    comparation_operation -> value NOT_EQUAL value
Rule 43    comparation_operation -> value LESS_EQUAL value
Rule 44    comparation_operation -> value GREATER_EQUAL value
Rule 45    comparation_operation -> value LESS value
Rule 46    comparation_operation -> value GREATER value
Rule 47    comparation_operation -> value LOGICAL_AND value
Rule 48    comparation_operation -> value LOGICAL_OR value
Rule 49    identifiers -> IDENTIFIER
Rule 50    identifiers -> identifiers COMMA identifiers
Rule 51    def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
Rule 52    call_function -> IDENTIFIER LPAREN values RPAREN
Rule 53    parameters -> parameter
Rule 54    parameters -> parameters COMMA parameter
Rule 55    parameter -> IDENTIFIER value
Rule 56    values -> value
Rule 57    values -> values COMMA value
Rule 58    value -> STRING
Rule 59    value -> INTEGER
Rule 60    value -> FLOAT32
Rule 61    value -> FLOAT64
Rule 62    value -> BOOLEAN
Rule 63    data_type -> INTEGER_DATA_TYPE
Rule 64    data_type -> FLOAT32_DATA_TYPE
Rule 65    data_type -> FLOAT64_DATA_TYPE
Rule 66    data_type -> BOOLEAN_DATA_TYPE
Rule 67    data_type -> STRING_DATA_TYPE
Rule 68    input -> INPUT LPAREN RPAREN
Rule 69    input -> INPUT LPAREN value RPAREN
Rule 70    input -> INPUT LPAREN identifiers RPAREN
Rule 71    newline -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 28
BITWISE_OR_EQ        : 29
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 30
BOOLEAN              : 62
BOOLEAN_DATA_TYPE    : 66
BREAK                : 
CLASS                : 
COLON                : 51
COMMA                : 13 14 50 54 57
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 18 20
CONTINUE             : 
DEF                  : 51
DEL                  : 
DIVIDE               : 
DIVIDE_EQ            : 26
DOT                  : 12 13 14 15 16
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 
ENTERE_DIVIDE        : 
EQUAL                : 17 18 19 20
EQUALEQUAL           : 33 41
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT32              : 60
FLOAT32_DATA_TYPE    : 64
FLOAT64              : 61
FLOAT64_DATA_TYPE    : 65
FMT_LIBRARY          : 12 13 14 15 16
FOR                  : 11
FROM                 : 
GLOBAL               : 
GREATER              : 38 46
GREATER_EQUAL        : 36 44
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 17 18 19 19 20 20 21 22 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 49 51 52 55
IF                   : 
IMPORT               : 
IN                   : 
INPUT                : 68 69 70
INTEGER              : 59
INTEGER_DATA_TYPE    : 63
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 31
LESS                 : 37 45
LESS_EQUAL           : 35 43
LESS_THAN            : 
LKEY                 : 11
LOGICAL_AND          : 39 47
LOGICAL_NOT          : 
LOGICAL_OR           : 40 48
LPAREN               : 12 13 14 15 16 51 52 68 69 70
MINUS                : 
MINUS_EQ             : 24
MODULE               : 
MODULO_EQ            : 27
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 34 42
NULL                 : 
OR                   : 
PASS                 : 
PIPE                 : 
PLUS                 : 
PLUS_EQ              : 23
PRINTF               : 13 14 16
PRINTLN              : 12 15
RAISE                : 
RBRACKET             : 
RETURN               : 
RIGHT_SHIFT_EQ       : 32
RKEY                 : 11
RPAREN               : 12 13 14 15 16 51 52 68 69 70
SCIENTIFIC_NOTATION  : 
SHORT_VAR_DECL       : 21 22
STRING               : 58
STRING_DATA_TYPE     : 67
TIMES                : 
TIMES_EQ             : 25
TRUE                 : 
TRY                  : 
VAR                  : 17 19
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_operation : 
assignment           : 9
call_function        : 7
comparation_operation : 
data_type            : 17 18 19 20
def_function         : 6
for                  : 5
identifiers          : 14 50 50 70
input                : 8
newline              : 2
parameter            : 53 54
parameters           : 51 54
print                : 3
print_withoutvalue   : 4
program              : 2 11 0
rule_comparation     : 11
sentencia            : 1 2 51
short_assignment     : 10
value                : 12 13 14 17 18 21 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 55 56 57 69
values               : 52 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentencia
    (2) program -> . sentencia newline program
    (3) sentencia -> . print
    (4) sentencia -> . print_withoutvalue
    (5) sentencia -> . for
    (6) sentencia -> . def_function
    (7) sentencia -> . call_function
    (8) sentencia -> . input
    (9) sentencia -> . assignment
    (10) sentencia -> . short_assignment
    (12) print -> . FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
    (13) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (14) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (11) for -> . FOR rule_comparation LKEY program RKEY
    (51) def_function -> . DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
    (52) call_function -> . IDENTIFIER LPAREN values RPAREN
    (68) input -> . INPUT LPAREN RPAREN
    (69) input -> . INPUT LPAREN value RPAREN
    (70) input -> . INPUT LPAREN identifiers RPAREN
    (17) assignment -> . VAR IDENTIFIER data_type EQUAL value
    (18) assignment -> . CONST IDENTIFIER data_type EQUAL value
    (19) assignment -> . VAR IDENTIFIER data_type EQUAL IDENTIFIER
    (20) assignment -> . CONST IDENTIFIER data_type EQUAL IDENTIFIER
    (21) short_assignment -> . IDENTIFIER SHORT_VAR_DECL value
    (22) short_assignment -> . IDENTIFIER SHORT_VAR_DECL IDENTIFIER

    FMT_LIBRARY     shift and go to state 11
    FOR             shift and go to state 12
    DEF             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INPUT           shift and go to state 15
    VAR             shift and go to state 16
    CONST           shift and go to state 17

    program                        shift and go to state 1
    sentencia                      shift and go to state 2
    print                          shift and go to state 3
    print_withoutvalue             shift and go to state 4
    for                            shift and go to state 5
    def_function                   shift and go to state 6
    call_function                  shift and go to state 7
    input                          shift and go to state 8
    assignment                     shift and go to state 9
    short_assignment               shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> sentencia .
    (2) program -> sentencia . newline program
    (71) newline -> .

    $end            reduce using rule 1 (program -> sentencia .)
    RKEY            reduce using rule 1 (program -> sentencia .)
    FMT_LIBRARY     reduce using rule 71 (newline -> .)
    FOR             reduce using rule 71 (newline -> .)
    DEF             reduce using rule 71 (newline -> .)
    IDENTIFIER      reduce using rule 71 (newline -> .)
    INPUT           reduce using rule 71 (newline -> .)
    VAR             reduce using rule 71 (newline -> .)
    CONST           reduce using rule 71 (newline -> .)

    newline                        shift and go to state 18

state 3

    (3) sentencia -> print .

    FMT_LIBRARY     reduce using rule 3 (sentencia -> print .)
    FOR             reduce using rule 3 (sentencia -> print .)
    DEF             reduce using rule 3 (sentencia -> print .)
    IDENTIFIER      reduce using rule 3 (sentencia -> print .)
    INPUT           reduce using rule 3 (sentencia -> print .)
    VAR             reduce using rule 3 (sentencia -> print .)
    CONST           reduce using rule 3 (sentencia -> print .)
    $end            reduce using rule 3 (sentencia -> print .)
    RKEY            reduce using rule 3 (sentencia -> print .)


state 4

    (4) sentencia -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 4 (sentencia -> print_withoutvalue .)
    FOR             reduce using rule 4 (sentencia -> print_withoutvalue .)
    DEF             reduce using rule 4 (sentencia -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 4 (sentencia -> print_withoutvalue .)
    INPUT           reduce using rule 4 (sentencia -> print_withoutvalue .)
    VAR             reduce using rule 4 (sentencia -> print_withoutvalue .)
    CONST           reduce using rule 4 (sentencia -> print_withoutvalue .)
    $end            reduce using rule 4 (sentencia -> print_withoutvalue .)
    RKEY            reduce using rule 4 (sentencia -> print_withoutvalue .)


state 5

    (5) sentencia -> for .

    FMT_LIBRARY     reduce using rule 5 (sentencia -> for .)
    FOR             reduce using rule 5 (sentencia -> for .)
    DEF             reduce using rule 5 (sentencia -> for .)
    IDENTIFIER      reduce using rule 5 (sentencia -> for .)
    INPUT           reduce using rule 5 (sentencia -> for .)
    VAR             reduce using rule 5 (sentencia -> for .)
    CONST           reduce using rule 5 (sentencia -> for .)
    $end            reduce using rule 5 (sentencia -> for .)
    RKEY            reduce using rule 5 (sentencia -> for .)


state 6

    (6) sentencia -> def_function .

    FMT_LIBRARY     reduce using rule 6 (sentencia -> def_function .)
    FOR             reduce using rule 6 (sentencia -> def_function .)
    DEF             reduce using rule 6 (sentencia -> def_function .)
    IDENTIFIER      reduce using rule 6 (sentencia -> def_function .)
    INPUT           reduce using rule 6 (sentencia -> def_function .)
    VAR             reduce using rule 6 (sentencia -> def_function .)
    CONST           reduce using rule 6 (sentencia -> def_function .)
    $end            reduce using rule 6 (sentencia -> def_function .)
    RKEY            reduce using rule 6 (sentencia -> def_function .)


state 7

    (7) sentencia -> call_function .

    FMT_LIBRARY     reduce using rule 7 (sentencia -> call_function .)
    FOR             reduce using rule 7 (sentencia -> call_function .)
    DEF             reduce using rule 7 (sentencia -> call_function .)
    IDENTIFIER      reduce using rule 7 (sentencia -> call_function .)
    INPUT           reduce using rule 7 (sentencia -> call_function .)
    VAR             reduce using rule 7 (sentencia -> call_function .)
    CONST           reduce using rule 7 (sentencia -> call_function .)
    $end            reduce using rule 7 (sentencia -> call_function .)
    RKEY            reduce using rule 7 (sentencia -> call_function .)


state 8

    (8) sentencia -> input .

    FMT_LIBRARY     reduce using rule 8 (sentencia -> input .)
    FOR             reduce using rule 8 (sentencia -> input .)
    DEF             reduce using rule 8 (sentencia -> input .)
    IDENTIFIER      reduce using rule 8 (sentencia -> input .)
    INPUT           reduce using rule 8 (sentencia -> input .)
    VAR             reduce using rule 8 (sentencia -> input .)
    CONST           reduce using rule 8 (sentencia -> input .)
    $end            reduce using rule 8 (sentencia -> input .)
    RKEY            reduce using rule 8 (sentencia -> input .)


state 9

    (9) sentencia -> assignment .

    FMT_LIBRARY     reduce using rule 9 (sentencia -> assignment .)
    FOR             reduce using rule 9 (sentencia -> assignment .)
    DEF             reduce using rule 9 (sentencia -> assignment .)
    IDENTIFIER      reduce using rule 9 (sentencia -> assignment .)
    INPUT           reduce using rule 9 (sentencia -> assignment .)
    VAR             reduce using rule 9 (sentencia -> assignment .)
    CONST           reduce using rule 9 (sentencia -> assignment .)
    $end            reduce using rule 9 (sentencia -> assignment .)
    RKEY            reduce using rule 9 (sentencia -> assignment .)


state 10

    (10) sentencia -> short_assignment .

    FMT_LIBRARY     reduce using rule 10 (sentencia -> short_assignment .)
    FOR             reduce using rule 10 (sentencia -> short_assignment .)
    DEF             reduce using rule 10 (sentencia -> short_assignment .)
    IDENTIFIER      reduce using rule 10 (sentencia -> short_assignment .)
    INPUT           reduce using rule 10 (sentencia -> short_assignment .)
    VAR             reduce using rule 10 (sentencia -> short_assignment .)
    CONST           reduce using rule 10 (sentencia -> short_assignment .)
    $end            reduce using rule 10 (sentencia -> short_assignment .)
    RKEY            reduce using rule 10 (sentencia -> short_assignment .)


state 11

    (12) print -> FMT_LIBRARY . DOT PRINTLN LPAREN value RPAREN
    (13) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA RPAREN
    (14) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> FMT_LIBRARY . DOT PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> FMT_LIBRARY . DOT PRINTF LPAREN RPAREN

    DOT             shift and go to state 19


state 12

    (11) for -> FOR . rule_comparation LKEY program RKEY
    (33) rule_comparation -> . IDENTIFIER EQUALEQUAL value
    (34) rule_comparation -> . IDENTIFIER NOT_EQUAL value
    (35) rule_comparation -> . IDENTIFIER LESS_EQUAL value
    (36) rule_comparation -> . IDENTIFIER GREATER_EQUAL value
    (37) rule_comparation -> . IDENTIFIER LESS value
    (38) rule_comparation -> . IDENTIFIER GREATER value
    (39) rule_comparation -> . IDENTIFIER LOGICAL_AND value
    (40) rule_comparation -> . IDENTIFIER LOGICAL_OR value

    IDENTIFIER      shift and go to state 21

    rule_comparation               shift and go to state 20

state 13

    (51) def_function -> DEF . IDENTIFIER LPAREN parameters RPAREN COLON sentencia

    IDENTIFIER      shift and go to state 22


state 14

    (52) call_function -> IDENTIFIER . LPAREN values RPAREN
    (21) short_assignment -> IDENTIFIER . SHORT_VAR_DECL value
    (22) short_assignment -> IDENTIFIER . SHORT_VAR_DECL IDENTIFIER

    LPAREN          shift and go to state 23
    SHORT_VAR_DECL  shift and go to state 24


state 15

    (68) input -> INPUT . LPAREN RPAREN
    (69) input -> INPUT . LPAREN value RPAREN
    (70) input -> INPUT . LPAREN identifiers RPAREN

    LPAREN          shift and go to state 25


state 16

    (17) assignment -> VAR . IDENTIFIER data_type EQUAL value
    (19) assignment -> VAR . IDENTIFIER data_type EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 26


state 17

    (18) assignment -> CONST . IDENTIFIER data_type EQUAL value
    (20) assignment -> CONST . IDENTIFIER data_type EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 27


state 18

    (2) program -> sentencia newline . program
    (1) program -> . sentencia
    (2) program -> . sentencia newline program
    (3) sentencia -> . print
    (4) sentencia -> . print_withoutvalue
    (5) sentencia -> . for
    (6) sentencia -> . def_function
    (7) sentencia -> . call_function
    (8) sentencia -> . input
    (9) sentencia -> . assignment
    (10) sentencia -> . short_assignment
    (12) print -> . FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
    (13) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (14) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (11) for -> . FOR rule_comparation LKEY program RKEY
    (51) def_function -> . DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
    (52) call_function -> . IDENTIFIER LPAREN values RPAREN
    (68) input -> . INPUT LPAREN RPAREN
    (69) input -> . INPUT LPAREN value RPAREN
    (70) input -> . INPUT LPAREN identifiers RPAREN
    (17) assignment -> . VAR IDENTIFIER data_type EQUAL value
    (18) assignment -> . CONST IDENTIFIER data_type EQUAL value
    (19) assignment -> . VAR IDENTIFIER data_type EQUAL IDENTIFIER
    (20) assignment -> . CONST IDENTIFIER data_type EQUAL IDENTIFIER
    (21) short_assignment -> . IDENTIFIER SHORT_VAR_DECL value
    (22) short_assignment -> . IDENTIFIER SHORT_VAR_DECL IDENTIFIER

    FMT_LIBRARY     shift and go to state 11
    FOR             shift and go to state 12
    DEF             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INPUT           shift and go to state 15
    VAR             shift and go to state 16
    CONST           shift and go to state 17

    sentencia                      shift and go to state 2
    program                        shift and go to state 28
    print                          shift and go to state 3
    print_withoutvalue             shift and go to state 4
    for                            shift and go to state 5
    def_function                   shift and go to state 6
    call_function                  shift and go to state 7
    input                          shift and go to state 8
    assignment                     shift and go to state 9
    short_assignment               shift and go to state 10

state 19

    (12) print -> FMT_LIBRARY DOT . PRINTLN LPAREN value RPAREN
    (13) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA RPAREN
    (14) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> FMT_LIBRARY DOT . PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> FMT_LIBRARY DOT . PRINTF LPAREN RPAREN

    PRINTLN         shift and go to state 29
    PRINTF          shift and go to state 30


state 20

    (11) for -> FOR rule_comparation . LKEY program RKEY

    LKEY            shift and go to state 31


state 21

    (33) rule_comparation -> IDENTIFIER . EQUALEQUAL value
    (34) rule_comparation -> IDENTIFIER . NOT_EQUAL value
    (35) rule_comparation -> IDENTIFIER . LESS_EQUAL value
    (36) rule_comparation -> IDENTIFIER . GREATER_EQUAL value
    (37) rule_comparation -> IDENTIFIER . LESS value
    (38) rule_comparation -> IDENTIFIER . GREATER value
    (39) rule_comparation -> IDENTIFIER . LOGICAL_AND value
    (40) rule_comparation -> IDENTIFIER . LOGICAL_OR value

    EQUALEQUAL      shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    LESS_EQUAL      shift and go to state 34
    GREATER_EQUAL   shift and go to state 35
    LESS            shift and go to state 36
    GREATER         shift and go to state 37
    LOGICAL_AND     shift and go to state 38
    LOGICAL_OR      shift and go to state 39


state 22

    (51) def_function -> DEF IDENTIFIER . LPAREN parameters RPAREN COLON sentencia

    LPAREN          shift and go to state 40


state 23

    (52) call_function -> IDENTIFIER LPAREN . values RPAREN
    (56) values -> . value
    (57) values -> . values COMMA value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    values                         shift and go to state 41
    value                          shift and go to state 42

state 24

    (21) short_assignment -> IDENTIFIER SHORT_VAR_DECL . value
    (22) short_assignment -> IDENTIFIER SHORT_VAR_DECL . IDENTIFIER
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 48
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 49

state 25

    (68) input -> INPUT LPAREN . RPAREN
    (69) input -> INPUT LPAREN . value RPAREN
    (70) input -> INPUT LPAREN . identifiers RPAREN
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN
    (49) identifiers -> . IDENTIFIER
    (50) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 50
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47
    IDENTIFIER      shift and go to state 53

    value                          shift and go to state 51
    identifiers                    shift and go to state 52

state 26

    (17) assignment -> VAR IDENTIFIER . data_type EQUAL value
    (19) assignment -> VAR IDENTIFIER . data_type EQUAL IDENTIFIER
    (63) data_type -> . INTEGER_DATA_TYPE
    (64) data_type -> . FLOAT32_DATA_TYPE
    (65) data_type -> . FLOAT64_DATA_TYPE
    (66) data_type -> . BOOLEAN_DATA_TYPE
    (67) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 55
    FLOAT32_DATA_TYPE shift and go to state 56
    FLOAT64_DATA_TYPE shift and go to state 57
    BOOLEAN_DATA_TYPE shift and go to state 58
    STRING_DATA_TYPE shift and go to state 59

    data_type                      shift and go to state 54

state 27

    (18) assignment -> CONST IDENTIFIER . data_type EQUAL value
    (20) assignment -> CONST IDENTIFIER . data_type EQUAL IDENTIFIER
    (63) data_type -> . INTEGER_DATA_TYPE
    (64) data_type -> . FLOAT32_DATA_TYPE
    (65) data_type -> . FLOAT64_DATA_TYPE
    (66) data_type -> . BOOLEAN_DATA_TYPE
    (67) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 55
    FLOAT32_DATA_TYPE shift and go to state 56
    FLOAT64_DATA_TYPE shift and go to state 57
    BOOLEAN_DATA_TYPE shift and go to state 58
    STRING_DATA_TYPE shift and go to state 59

    data_type                      shift and go to state 60

state 28

    (2) program -> sentencia newline program .

    $end            reduce using rule 2 (program -> sentencia newline program .)
    RKEY            reduce using rule 2 (program -> sentencia newline program .)


state 29

    (12) print -> FMT_LIBRARY DOT PRINTLN . LPAREN value RPAREN
    (15) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 61


state 30

    (13) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA RPAREN
    (14) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA identifiers RPAREN
    (16) print_withoutvalue -> FMT_LIBRARY DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 62


state 31

    (11) for -> FOR rule_comparation LKEY . program RKEY
    (1) program -> . sentencia
    (2) program -> . sentencia newline program
    (3) sentencia -> . print
    (4) sentencia -> . print_withoutvalue
    (5) sentencia -> . for
    (6) sentencia -> . def_function
    (7) sentencia -> . call_function
    (8) sentencia -> . input
    (9) sentencia -> . assignment
    (10) sentencia -> . short_assignment
    (12) print -> . FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
    (13) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (14) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (11) for -> . FOR rule_comparation LKEY program RKEY
    (51) def_function -> . DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
    (52) call_function -> . IDENTIFIER LPAREN values RPAREN
    (68) input -> . INPUT LPAREN RPAREN
    (69) input -> . INPUT LPAREN value RPAREN
    (70) input -> . INPUT LPAREN identifiers RPAREN
    (17) assignment -> . VAR IDENTIFIER data_type EQUAL value
    (18) assignment -> . CONST IDENTIFIER data_type EQUAL value
    (19) assignment -> . VAR IDENTIFIER data_type EQUAL IDENTIFIER
    (20) assignment -> . CONST IDENTIFIER data_type EQUAL IDENTIFIER
    (21) short_assignment -> . IDENTIFIER SHORT_VAR_DECL value
    (22) short_assignment -> . IDENTIFIER SHORT_VAR_DECL IDENTIFIER

    FMT_LIBRARY     shift and go to state 11
    FOR             shift and go to state 12
    DEF             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INPUT           shift and go to state 15
    VAR             shift and go to state 16
    CONST           shift and go to state 17

    program                        shift and go to state 63
    sentencia                      shift and go to state 2
    print                          shift and go to state 3
    print_withoutvalue             shift and go to state 4
    for                            shift and go to state 5
    def_function                   shift and go to state 6
    call_function                  shift and go to state 7
    input                          shift and go to state 8
    assignment                     shift and go to state 9
    short_assignment               shift and go to state 10

state 32

    (33) rule_comparation -> IDENTIFIER EQUALEQUAL . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 64

state 33

    (34) rule_comparation -> IDENTIFIER NOT_EQUAL . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 65

state 34

    (35) rule_comparation -> IDENTIFIER LESS_EQUAL . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 66

state 35

    (36) rule_comparation -> IDENTIFIER GREATER_EQUAL . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 67

state 36

    (37) rule_comparation -> IDENTIFIER LESS . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 68

state 37

    (38) rule_comparation -> IDENTIFIER GREATER . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 69

state 38

    (39) rule_comparation -> IDENTIFIER LOGICAL_AND . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 70

state 39

    (40) rule_comparation -> IDENTIFIER LOGICAL_OR . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 71

state 40

    (51) def_function -> DEF IDENTIFIER LPAREN . parameters RPAREN COLON sentencia
    (53) parameters -> . parameter
    (54) parameters -> . parameters COMMA parameter
    (55) parameter -> . IDENTIFIER value

    IDENTIFIER      shift and go to state 72

    parameters                     shift and go to state 73
    parameter                      shift and go to state 74

state 41

    (52) call_function -> IDENTIFIER LPAREN values . RPAREN
    (57) values -> values . COMMA value

    RPAREN          shift and go to state 75
    COMMA           shift and go to state 76


state 42

    (56) values -> value .

    RPAREN          reduce using rule 56 (values -> value .)
    COMMA           reduce using rule 56 (values -> value .)


state 43

    (58) value -> STRING .

    RPAREN          reduce using rule 58 (value -> STRING .)
    COMMA           reduce using rule 58 (value -> STRING .)
    FMT_LIBRARY     reduce using rule 58 (value -> STRING .)
    FOR             reduce using rule 58 (value -> STRING .)
    DEF             reduce using rule 58 (value -> STRING .)
    IDENTIFIER      reduce using rule 58 (value -> STRING .)
    INPUT           reduce using rule 58 (value -> STRING .)
    VAR             reduce using rule 58 (value -> STRING .)
    CONST           reduce using rule 58 (value -> STRING .)
    $end            reduce using rule 58 (value -> STRING .)
    RKEY            reduce using rule 58 (value -> STRING .)
    LKEY            reduce using rule 58 (value -> STRING .)


state 44

    (59) value -> INTEGER .

    RPAREN          reduce using rule 59 (value -> INTEGER .)
    COMMA           reduce using rule 59 (value -> INTEGER .)
    FMT_LIBRARY     reduce using rule 59 (value -> INTEGER .)
    FOR             reduce using rule 59 (value -> INTEGER .)
    DEF             reduce using rule 59 (value -> INTEGER .)
    IDENTIFIER      reduce using rule 59 (value -> INTEGER .)
    INPUT           reduce using rule 59 (value -> INTEGER .)
    VAR             reduce using rule 59 (value -> INTEGER .)
    CONST           reduce using rule 59 (value -> INTEGER .)
    $end            reduce using rule 59 (value -> INTEGER .)
    RKEY            reduce using rule 59 (value -> INTEGER .)
    LKEY            reduce using rule 59 (value -> INTEGER .)


state 45

    (60) value -> FLOAT32 .

    RPAREN          reduce using rule 60 (value -> FLOAT32 .)
    COMMA           reduce using rule 60 (value -> FLOAT32 .)
    FMT_LIBRARY     reduce using rule 60 (value -> FLOAT32 .)
    FOR             reduce using rule 60 (value -> FLOAT32 .)
    DEF             reduce using rule 60 (value -> FLOAT32 .)
    IDENTIFIER      reduce using rule 60 (value -> FLOAT32 .)
    INPUT           reduce using rule 60 (value -> FLOAT32 .)
    VAR             reduce using rule 60 (value -> FLOAT32 .)
    CONST           reduce using rule 60 (value -> FLOAT32 .)
    $end            reduce using rule 60 (value -> FLOAT32 .)
    RKEY            reduce using rule 60 (value -> FLOAT32 .)
    LKEY            reduce using rule 60 (value -> FLOAT32 .)


state 46

    (61) value -> FLOAT64 .

    RPAREN          reduce using rule 61 (value -> FLOAT64 .)
    COMMA           reduce using rule 61 (value -> FLOAT64 .)
    FMT_LIBRARY     reduce using rule 61 (value -> FLOAT64 .)
    FOR             reduce using rule 61 (value -> FLOAT64 .)
    DEF             reduce using rule 61 (value -> FLOAT64 .)
    IDENTIFIER      reduce using rule 61 (value -> FLOAT64 .)
    INPUT           reduce using rule 61 (value -> FLOAT64 .)
    VAR             reduce using rule 61 (value -> FLOAT64 .)
    CONST           reduce using rule 61 (value -> FLOAT64 .)
    $end            reduce using rule 61 (value -> FLOAT64 .)
    RKEY            reduce using rule 61 (value -> FLOAT64 .)
    LKEY            reduce using rule 61 (value -> FLOAT64 .)


state 47

    (62) value -> BOOLEAN .

    RPAREN          reduce using rule 62 (value -> BOOLEAN .)
    COMMA           reduce using rule 62 (value -> BOOLEAN .)
    FMT_LIBRARY     reduce using rule 62 (value -> BOOLEAN .)
    FOR             reduce using rule 62 (value -> BOOLEAN .)
    DEF             reduce using rule 62 (value -> BOOLEAN .)
    IDENTIFIER      reduce using rule 62 (value -> BOOLEAN .)
    INPUT           reduce using rule 62 (value -> BOOLEAN .)
    VAR             reduce using rule 62 (value -> BOOLEAN .)
    CONST           reduce using rule 62 (value -> BOOLEAN .)
    $end            reduce using rule 62 (value -> BOOLEAN .)
    RKEY            reduce using rule 62 (value -> BOOLEAN .)
    LKEY            reduce using rule 62 (value -> BOOLEAN .)


state 48

    (22) short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .

    FMT_LIBRARY     reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    FOR             reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    DEF             reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    IDENTIFIER      reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    INPUT           reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    VAR             reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    CONST           reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    $end            reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)
    RKEY            reduce using rule 22 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)


state 49

    (21) short_assignment -> IDENTIFIER SHORT_VAR_DECL value .

    FMT_LIBRARY     reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    FOR             reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    DEF             reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    IDENTIFIER      reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    INPUT           reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    VAR             reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    CONST           reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    $end            reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)
    RKEY            reduce using rule 21 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)


state 50

    (68) input -> INPUT LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    DEF             reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    VAR             reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    CONST           reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 68 (input -> INPUT LPAREN RPAREN .)
    RKEY            reduce using rule 68 (input -> INPUT LPAREN RPAREN .)


state 51

    (69) input -> INPUT LPAREN value . RPAREN

    RPAREN          shift and go to state 77


state 52

    (70) input -> INPUT LPAREN identifiers . RPAREN
    (50) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 78
    COMMA           shift and go to state 79


state 53

    (49) identifiers -> IDENTIFIER .

    RPAREN          reduce using rule 49 (identifiers -> IDENTIFIER .)
    COMMA           reduce using rule 49 (identifiers -> IDENTIFIER .)


state 54

    (17) assignment -> VAR IDENTIFIER data_type . EQUAL value
    (19) assignment -> VAR IDENTIFIER data_type . EQUAL IDENTIFIER

    EQUAL           shift and go to state 80


state 55

    (63) data_type -> INTEGER_DATA_TYPE .

    EQUAL           reduce using rule 63 (data_type -> INTEGER_DATA_TYPE .)


state 56

    (64) data_type -> FLOAT32_DATA_TYPE .

    EQUAL           reduce using rule 64 (data_type -> FLOAT32_DATA_TYPE .)


state 57

    (65) data_type -> FLOAT64_DATA_TYPE .

    EQUAL           reduce using rule 65 (data_type -> FLOAT64_DATA_TYPE .)


state 58

    (66) data_type -> BOOLEAN_DATA_TYPE .

    EQUAL           reduce using rule 66 (data_type -> BOOLEAN_DATA_TYPE .)


state 59

    (67) data_type -> STRING_DATA_TYPE .

    EQUAL           reduce using rule 67 (data_type -> STRING_DATA_TYPE .)


state 60

    (18) assignment -> CONST IDENTIFIER data_type . EQUAL value
    (20) assignment -> CONST IDENTIFIER data_type . EQUAL IDENTIFIER

    EQUAL           shift and go to state 81


state 61

    (12) print -> FMT_LIBRARY DOT PRINTLN LPAREN . value RPAREN
    (15) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN . RPAREN
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    RPAREN          shift and go to state 83
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 82

state 62

    (13) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA RPAREN
    (14) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA identifiers RPAREN
    (16) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN . RPAREN
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    RPAREN          shift and go to state 85
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 84

state 63

    (11) for -> FOR rule_comparation LKEY program . RKEY

    RKEY            shift and go to state 86


state 64

    (33) rule_comparation -> IDENTIFIER EQUALEQUAL value .

    LKEY            reduce using rule 33 (rule_comparation -> IDENTIFIER EQUALEQUAL value .)


state 65

    (34) rule_comparation -> IDENTIFIER NOT_EQUAL value .

    LKEY            reduce using rule 34 (rule_comparation -> IDENTIFIER NOT_EQUAL value .)


state 66

    (35) rule_comparation -> IDENTIFIER LESS_EQUAL value .

    LKEY            reduce using rule 35 (rule_comparation -> IDENTIFIER LESS_EQUAL value .)


state 67

    (36) rule_comparation -> IDENTIFIER GREATER_EQUAL value .

    LKEY            reduce using rule 36 (rule_comparation -> IDENTIFIER GREATER_EQUAL value .)


state 68

    (37) rule_comparation -> IDENTIFIER LESS value .

    LKEY            reduce using rule 37 (rule_comparation -> IDENTIFIER LESS value .)


state 69

    (38) rule_comparation -> IDENTIFIER GREATER value .

    LKEY            reduce using rule 38 (rule_comparation -> IDENTIFIER GREATER value .)


state 70

    (39) rule_comparation -> IDENTIFIER LOGICAL_AND value .

    LKEY            reduce using rule 39 (rule_comparation -> IDENTIFIER LOGICAL_AND value .)


state 71

    (40) rule_comparation -> IDENTIFIER LOGICAL_OR value .

    LKEY            reduce using rule 40 (rule_comparation -> IDENTIFIER LOGICAL_OR value .)


state 72

    (55) parameter -> IDENTIFIER . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 87

state 73

    (51) def_function -> DEF IDENTIFIER LPAREN parameters . RPAREN COLON sentencia
    (54) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 88
    COMMA           shift and go to state 89


state 74

    (53) parameters -> parameter .

    RPAREN          reduce using rule 53 (parameters -> parameter .)
    COMMA           reduce using rule 53 (parameters -> parameter .)


state 75

    (52) call_function -> IDENTIFIER LPAREN values RPAREN .

    FMT_LIBRARY     reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DEF             reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 52 (call_function -> IDENTIFIER LPAREN values RPAREN .)


state 76

    (57) values -> values COMMA . value
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 90

state 77

    (69) input -> INPUT LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    FOR             reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    DEF             reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    INPUT           reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    VAR             reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    CONST           reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    $end            reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)
    RKEY            reduce using rule 69 (input -> INPUT LPAREN value RPAREN .)


state 78

    (70) input -> INPUT LPAREN identifiers RPAREN .

    FMT_LIBRARY     reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    FOR             reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    DEF             reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    IDENTIFIER      reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    INPUT           reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    VAR             reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    CONST           reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    $end            reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)
    RKEY            reduce using rule 70 (input -> INPUT LPAREN identifiers RPAREN .)


state 79

    (50) identifiers -> identifiers COMMA . identifiers
    (49) identifiers -> . IDENTIFIER
    (50) identifiers -> . identifiers COMMA identifiers

    IDENTIFIER      shift and go to state 53

    identifiers                    shift and go to state 91

state 80

    (17) assignment -> VAR IDENTIFIER data_type EQUAL . value
    (19) assignment -> VAR IDENTIFIER data_type EQUAL . IDENTIFIER
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 92
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 93

state 81

    (18) assignment -> CONST IDENTIFIER data_type EQUAL . value
    (20) assignment -> CONST IDENTIFIER data_type EQUAL . IDENTIFIER
    (58) value -> . STRING
    (59) value -> . INTEGER
    (60) value -> . FLOAT32
    (61) value -> . FLOAT64
    (62) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 94
    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    FLOAT32         shift and go to state 45
    FLOAT64         shift and go to state 46
    BOOLEAN         shift and go to state 47

    value                          shift and go to state 95

state 82

    (12) print -> FMT_LIBRARY DOT PRINTLN LPAREN value . RPAREN

    RPAREN          shift and go to state 96


state 83

    (15) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    DEF             reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INPUT           reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONST           reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    $end            reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RKEY            reduce using rule 15 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)


state 84

    (13) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA RPAREN
    (14) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA identifiers RPAREN

    COMMA           shift and go to state 97


state 85

    (16) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    DEF             reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INPUT           reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONST           reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    $end            reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RKEY            reduce using rule 16 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)


state 86

    (11) for -> FOR rule_comparation LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    FOR             reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    DEF             reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    IDENTIFIER      reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    INPUT           reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    VAR             reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    CONST           reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    $end            reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)
    RKEY            reduce using rule 11 (for -> FOR rule_comparation LKEY program RKEY .)


state 87

    (55) parameter -> IDENTIFIER value .

    RPAREN          reduce using rule 55 (parameter -> IDENTIFIER value .)
    COMMA           reduce using rule 55 (parameter -> IDENTIFIER value .)


state 88

    (51) def_function -> DEF IDENTIFIER LPAREN parameters RPAREN . COLON sentencia

    COLON           shift and go to state 98


state 89

    (54) parameters -> parameters COMMA . parameter
    (55) parameter -> . IDENTIFIER value

    IDENTIFIER      shift and go to state 72

    parameter                      shift and go to state 99

state 90

    (57) values -> values COMMA value .

    RPAREN          reduce using rule 57 (values -> values COMMA value .)
    COMMA           reduce using rule 57 (values -> values COMMA value .)


state 91

    (50) identifiers -> identifiers COMMA identifiers .
    (50) identifiers -> identifiers . COMMA identifiers

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 50 (identifiers -> identifiers COMMA identifiers .)
    COMMA           shift and go to state 79

  ! COMMA           [ reduce using rule 50 (identifiers -> identifiers COMMA identifiers .) ]


state 92

    (19) assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .

    FMT_LIBRARY     reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    FOR             reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    DEF             reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    INPUT           reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    VAR             reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    CONST           reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    $end            reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)
    RKEY            reduce using rule 19 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)


state 93

    (17) assignment -> VAR IDENTIFIER data_type EQUAL value .

    FMT_LIBRARY     reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    FOR             reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    DEF             reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    IDENTIFIER      reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    INPUT           reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    VAR             reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    CONST           reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    $end            reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)
    RKEY            reduce using rule 17 (assignment -> VAR IDENTIFIER data_type EQUAL value .)


state 94

    (20) assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .

    FMT_LIBRARY     reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    FOR             reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    DEF             reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    IDENTIFIER      reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    INPUT           reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    VAR             reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    CONST           reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    $end            reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)
    RKEY            reduce using rule 20 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)


state 95

    (18) assignment -> CONST IDENTIFIER data_type EQUAL value .

    FMT_LIBRARY     reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    FOR             reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    DEF             reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    IDENTIFIER      reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    INPUT           reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    VAR             reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    CONST           reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    $end            reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)
    RKEY            reduce using rule 18 (assignment -> CONST IDENTIFIER data_type EQUAL value .)


state 96

    (12) print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    FOR             reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    DEF             reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    INPUT           reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    VAR             reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    CONST           reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    $end            reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)
    RKEY            reduce using rule 12 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)


state 97

    (13) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . RPAREN
    (14) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . identifiers RPAREN
    (49) identifiers -> . IDENTIFIER
    (50) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 100
    IDENTIFIER      shift and go to state 53

    identifiers                    shift and go to state 101

state 98

    (51) def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON . sentencia
    (3) sentencia -> . print
    (4) sentencia -> . print_withoutvalue
    (5) sentencia -> . for
    (6) sentencia -> . def_function
    (7) sentencia -> . call_function
    (8) sentencia -> . input
    (9) sentencia -> . assignment
    (10) sentencia -> . short_assignment
    (12) print -> . FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
    (13) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (14) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (15) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (16) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (11) for -> . FOR rule_comparation LKEY program RKEY
    (51) def_function -> . DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
    (52) call_function -> . IDENTIFIER LPAREN values RPAREN
    (68) input -> . INPUT LPAREN RPAREN
    (69) input -> . INPUT LPAREN value RPAREN
    (70) input -> . INPUT LPAREN identifiers RPAREN
    (17) assignment -> . VAR IDENTIFIER data_type EQUAL value
    (18) assignment -> . CONST IDENTIFIER data_type EQUAL value
    (19) assignment -> . VAR IDENTIFIER data_type EQUAL IDENTIFIER
    (20) assignment -> . CONST IDENTIFIER data_type EQUAL IDENTIFIER
    (21) short_assignment -> . IDENTIFIER SHORT_VAR_DECL value
    (22) short_assignment -> . IDENTIFIER SHORT_VAR_DECL IDENTIFIER

    FMT_LIBRARY     shift and go to state 11
    FOR             shift and go to state 12
    DEF             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INPUT           shift and go to state 15
    VAR             shift and go to state 16
    CONST           shift and go to state 17

    sentencia                      shift and go to state 102
    print                          shift and go to state 3
    print_withoutvalue             shift and go to state 4
    for                            shift and go to state 5
    def_function                   shift and go to state 6
    call_function                  shift and go to state 7
    input                          shift and go to state 8
    assignment                     shift and go to state 9
    short_assignment               shift and go to state 10

state 99

    (54) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 54 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 54 (parameters -> parameters COMMA parameter .)


state 100

    (13) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .

    FMT_LIBRARY     reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FOR             reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    DEF             reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IDENTIFIER      reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INPUT           reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    VAR             reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONST           reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    $end            reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RKEY            reduce using rule 13 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)


state 101

    (14) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers . RPAREN
    (50) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 79


state 102

    (51) def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .

    FMT_LIBRARY     reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    FOR             reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    DEF             reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    IDENTIFIER      reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    INPUT           reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    VAR             reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    CONST           reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    $end            reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)
    RKEY            reduce using rule 51 (def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia .)


state 103

    (14) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .

    FMT_LIBRARY     reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    FOR             reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    DEF             reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    IDENTIFIER      reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    INPUT           reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    VAR             reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    CONST           reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    $end            reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)
    RKEY            reduce using rule 14 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 91 resolved as shift
