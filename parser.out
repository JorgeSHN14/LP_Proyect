Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    BREAK
    CLASS
    COMMENT
    COMMENT_MULTI
    CONTINUE
    DEL
    DIVIDE
    ELIF
    ELLIPSIS
    ELSE
    ENTERE_DIVIDE
    EQUALEQUAL
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FOR
    FROM
    GLOBAL
    GREATER
    GREATER_EQUAL
    GREATER_THAN
    HEX_NUMBER
    IF
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LESS
    LESS_EQUAL
    LESS_THAN
    LKEY
    LOGICAL_AND
    LOGICAL_NOT
    LOGICAL_OR
    MINUS
    MODULE
    NONE
    NONLOCAL
    NOT
    NOT_EQUAL
    NULL
    OR
    PASS
    PIPE
    PLUS
    RAISE
    RBRACKET
    RETURN
    RKEY
    SCIENTIFIC_NOTATION
    TIMES
    TRY
    WITH
    YIELD

Grammar

Rule 0     S' -> sentencia
Rule 1     sentencia -> print
Rule 2     sentencia -> print_withoutvalue
Rule 3     sentencia -> assignment
Rule 4     sentencia -> short_assignment
Rule 5     sentencia -> arithmetic_operation
Rule 6     sentencia -> while
Rule 7     sentencia -> def_function
Rule 8     sentencia -> call_function
Rule 9     print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 10    print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 11    print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
Rule 12    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 13    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
Rule 14    identifiers -> IDENTIFIER
Rule 15    identifiers -> identifiers COMMA identifiers
Rule 16    assignment -> VAR IDENTIFIER data_type EQUAL value
Rule 17    assignment -> CONST IDENTIFIER data_type EQUAL value
Rule 18    assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER
Rule 19    assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER
Rule 20    short_assignment -> IDENTIFIER SHORT_VAR_DECL value
Rule 21    short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER
Rule 22    while -> WHILE un valor singular TRUE P_DER COLON sentence
Rule 23    def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia
Rule 24    call_function -> IDENTIFIER LPAREN values RPAREN
Rule 25    parameters -> parameter
Rule 26    parameters -> parameters COMMA parameter
Rule 27    parameter -> IDENTIFIER value
Rule 28    values -> value
Rule 29    values -> values COMMA value
Rule 30    value -> STRING
Rule 31    value -> INTEGER
Rule 32    value -> FLOAT32
Rule 33    value -> FLOAT64
Rule 34    value -> BOOLEAN
Rule 35    arithmetic_operation -> IDENTIFIER PLUS_EQ value
Rule 36    arithmetic_operation -> IDENTIFIER MINUS_EQ value
Rule 37    arithmetic_operation -> IDENTIFIER TIMES_EQ value
Rule 38    arithmetic_operation -> IDENTIFIER DIVIDE_EQ value
Rule 39    arithmetic_operation -> IDENTIFIER MODULO_EQ value
Rule 40    arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value
Rule 41    arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value
Rule 42    arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value
Rule 43    arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value
Rule 44    arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value
Rule 45    data_type -> INTEGER_DATA_TYPE
Rule 46    data_type -> FLOAT32_DATA_TYPE
Rule 47    data_type -> FLOAT64_DATA_TYPE
Rule 48    data_type -> BOOLEAN_DATA_TYPE
Rule 49    data_type -> STRING_DATA_TYPE
Rule 50    input -> INPUT LPAREN RPAREN
Rule 51    input -> INPUT LPAREN value RPAREN
Rule 52    input -> INPUT LPAREN identifiers RPAREN

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 40
BITWISE_OR_EQ        : 41
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 42
BOOLEAN              : 34
BOOLEAN_DATA_TYPE    : 48
BREAK                : 
CLASS                : 
COLON                : 22 23
COMMA                : 12 13 15 26 29
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 17 19
CONTINUE             : 
DEF                  : 23
DEL                  : 
DIVIDE               : 
DIVIDE_EQ            : 38
DOT                  : 9 10 11 12 13
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 
ENTERE_DIVIDE        : 
EQUAL                : 16 17 18 19
EQUALEQUAL           : 
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT32              : 32
FLOAT32_DATA_TYPE    : 46
FLOAT64              : 33
FLOAT64_DATA_TYPE    : 47
FMT_LIBRARY          : 9 10 11 12 13
FOR                  : 
FROM                 : 
GLOBAL               : 
GREATER              : 
GREATER_EQUAL        : 
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 14 16 17 18 18 19 19 20 21 21 23 24 27 35 36 37 38 39 40 41 42 43 44
IF                   : 
IMPORT               : 
IN                   : 
INPUT                : 50 51 52
INTEGER              : 31
INTEGER_DATA_TYPE    : 45
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 43
LESS                 : 
LESS_EQUAL           : 
LESS_THAN            : 
LKEY                 : 
LOGICAL_AND          : 
LOGICAL_NOT          : 
LOGICAL_OR           : 
LPAREN               : 9 10 11 12 13 23 24 50 51 52
MINUS                : 
MINUS_EQ             : 36
MODULE               : 
MODULO_EQ            : 39
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
PASS                 : 
PIPE                 : 
PLUS                 : 
PLUS_EQ              : 35
PRINTF               : 10 12 13
PRINTLN              : 9 11
RAISE                : 
RBRACKET             : 
RETURN               : 
RIGHT_SHIFT_EQ       : 44
RKEY                 : 
RPAREN               : 9 10 11 12 13 23 24 50 51 52
SCIENTIFIC_NOTATION  : 
SHORT_VAR_DECL       : 20 21
STRING               : 30
STRING_DATA_TYPE     : 49
TIMES                : 
TIMES_EQ             : 37
TRUE                 : 22
TRY                  : 
VAR                  : 16 18
WHILE                : 22
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

P_DER                : 22
arithmetic_operation : 5
assignment           : 3
call_function        : 8
data_type            : 16 17 18 19
def_function         : 7
identifiers          : 13 15 15 52
input                : 
parameter            : 25 26
parameters           : 23 26
print                : 1
print_withoutvalue   : 2
sentence             : 22
sentencia            : 23 0
short_assignment     : 4
singular             : 22
un                   : 22
valor                : 22
value                : 11 12 13 16 17 20 27 28 29 35 36 37 38 39 40 41 42 43 44 51
values               : 24 29
while                : 6

