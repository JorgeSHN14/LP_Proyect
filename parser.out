Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    CLASS
    COLON
    COMMENT
    COMMENT_MULTI
    CONTINUE
    DEL
    ELIF
    ELLIPSIS
    ELSE
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FROM
    GLOBAL
    GREATER_THAN
    HEX_NUMBER
    IF
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LESS_THAN
    LOGICAL_NOT
    NONE
    NONLOCAL
    NOT
    NULL
    OR
    PASS
    PIPE
    RAISE
    RBRACKET
    RETURN
    SCIENTIFIC_NOTATION
    TRUE
    TRY
    WITH
    YIELD

Grammar

Rule 0     S' -> loop_program
Rule 1     loop_program -> program
Rule 2     loop_program -> BREAK
Rule 3     loop_program -> loop_program program
Rule 4     loop_program -> loop_program BREAK
Rule 5     program -> sentencia
Rule 6     program -> loop
Rule 7     program -> program sentencia
Rule 8     program -> program loop
Rule 9     loop -> for
Rule 10    sentencia -> print
Rule 11    sentencia -> print_withoutvalue
Rule 12    sentencia -> def_function
Rule 13    sentencia -> call_function
Rule 14    sentencia -> input
Rule 15    sentencia -> assignment
Rule 16    sentencia -> short_assignment
Rule 17    sentencia -> arithmetic_operation
Rule 18    sentencia -> direct_arithmetic_operation
Rule 19    for -> FOR LKEY loop_program RKEY
Rule 20    for -> FOR comparation_operation LKEY loop_program RKEY
Rule 21    print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
Rule 22    print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
Rule 23    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 24    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
Rule 25    data -> value
Rule 26    data -> IDENTIFIER
Rule 27    data -> data COMMA value
Rule 28    data -> data COMMA IDENTIFIER
Rule 29    print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 30    print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 31    assignment -> VAR IDENTIFIER data_type EQUAL usable_value
Rule 32    assignment -> CONST IDENTIFIER data_type EQUAL usable_value
Rule 33    short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value
Rule 34    usable_value -> value
Rule 35    usable_value -> call_function
Rule 36    usable_value -> IDENTIFIER
Rule 37    usable_value -> arithmetic_operation
Rule 38    usable_value -> comparation_operation
Rule 39    direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value
Rule 40    direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value
Rule 41    direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value
Rule 42    direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value
Rule 43    direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value
Rule 44    direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value
Rule 45    direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value
Rule 46    direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value
Rule 47    direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value
Rule 48    direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value
Rule 49    arithmetic_operation -> usable_value PLUS usable_value
Rule 50    arithmetic_operation -> usable_value MINUS usable_value
Rule 51    arithmetic_operation -> usable_value DIVIDE usable_value
Rule 52    arithmetic_operation -> usable_value TIMES usable_value
Rule 53    arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value
Rule 54    arithmetic_operation -> usable_value MODULE usable_value
Rule 55    comparation_operation -> usable_value EQUALEQUAL usable_value
Rule 56    comparation_operation -> usable_value NOT_EQUAL usable_value
Rule 57    comparation_operation -> usable_value LESS_EQUAL usable_value
Rule 58    comparation_operation -> usable_value GREATER_EQUAL usable_value
Rule 59    comparation_operation -> usable_value LESS usable_value
Rule 60    comparation_operation -> usable_value GREATER usable_value
Rule 61    comparation_operation -> usable_value LOGICAL_AND usable_value
Rule 62    comparation_operation -> usable_value LOGICAL_OR usable_value
Rule 63    identifiers -> IDENTIFIER
Rule 64    identifiers -> identifiers COMMA identifiers
Rule 65    def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
Rule 66    call_function -> IDENTIFIER LPAREN values RPAREN
Rule 67    parameters -> parameter
Rule 68    parameters -> parameters COMMA parameter
Rule 69    parameter -> IDENTIFIER data_type
Rule 70    values -> value
Rule 71    values -> values COMMA value
Rule 72    value -> STRING
Rule 73    value -> INTEGER
Rule 74    value -> FLOAT32
Rule 75    value -> FLOAT64
Rule 76    value -> BOOLEAN
Rule 77    data_type -> INTEGER_DATA_TYPE
Rule 78    data_type -> FLOAT32_DATA_TYPE
Rule 79    data_type -> FLOAT64_DATA_TYPE
Rule 80    data_type -> BOOLEAN_DATA_TYPE
Rule 81    data_type -> STRING_DATA_TYPE
Rule 82    input -> INPUT LPAREN RPAREN
Rule 83    input -> INPUT LPAREN value RPAREN
Rule 84    input -> INPUT LPAREN identifiers RPAREN

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 44
BITWISE_OR_EQ        : 45
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 46
BOOLEAN              : 76
BOOLEAN_DATA_TYPE    : 80
BREAK                : 2 4
CLASS                : 
COLON                : 
COMMA                : 23 24 27 28 64 68 71
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 32
CONTINUE             : 
DEL                  : 
DIVIDE               : 51
DIVIDE_EQ            : 42
DOT                  : 21 22 23 24 29 30
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 
ENTERE_DIVIDE        : 53
EQUAL                : 31 32
EQUALEQUAL           : 55
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT32              : 74
FLOAT32_DATA_TYPE    : 78
FLOAT64              : 75
FLOAT64_DATA_TYPE    : 79
FMT_LIBRARY          : 21 22 23 24 29 30
FOR                  : 19 20
FROM                 : 
FUNC                 : 65
GLOBAL               : 
GREATER              : 60
GREATER_EQUAL        : 58
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 26 28 31 32 33 36 39 40 41 42 43 44 45 46 47 48 63 65 66 69
IF                   : 
IMPORT               : 
IN                   : 
INPUT                : 82 83 84
INTEGER              : 73
INTEGER_DATA_TYPE    : 77
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 47
LESS                 : 59
LESS_EQUAL           : 57
LESS_THAN            : 
LKEY                 : 19 20 65
LOGICAL_AND          : 61
LOGICAL_NOT          : 
LOGICAL_OR           : 62
LPAREN               : 21 22 23 24 29 30 65 66 82 83 84
MINUS                : 50
MINUS_EQ             : 40
MODULE               : 54
MODULO_EQ            : 43
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 56
NULL                 : 
OR                   : 
PASS                 : 
PIPE                 : 
PLUS                 : 49
PLUS_EQ              : 39
PRINTF               : 22 23 24 30
PRINTLN              : 21 29
RAISE                : 
RBRACKET             : 
RETURN               : 
RIGHT_SHIFT_EQ       : 48
RKEY                 : 19 20 65
RPAREN               : 21 22 23 24 29 30 65 66 82 83 84
SCIENTIFIC_NOTATION  : 
SHORT_VAR_DECL       : 33
STRING               : 72
STRING_DATA_TYPE     : 81
TIMES                : 52
TIMES_EQ             : 41
TRUE                 : 
TRY                  : 
VAR                  : 31
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_operation : 17 37
assignment           : 15
call_function        : 13 35
comparation_operation : 20 38
data                 : 21 24 27 28
data_type            : 31 32 69
def_function         : 12
direct_arithmetic_operation : 18
for                  : 9
identifiers          : 64 64 84
input                : 14
loop                 : 6 8
loop_program         : 3 4 19 20 0
parameter            : 67 68
parameters           : 65 68
print                : 10
print_withoutvalue   : 11
program              : 1 3 7 8 65
sentencia            : 5 7
short_assignment     : 16
usable_value         : 31 32 33 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62
value                : 22 23 24 25 27 34 39 40 41 42 43 44 45 46 47 48 70 71 83
values               : 66 71

Parsing method: LALR

state 0

    (0) S' -> . loop_program
    (1) loop_program -> . program
    (2) loop_program -> . BREAK
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 3
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    loop_program                   shift and go to state 1
    program                        shift and go to state 2
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 1

    (0) S' -> loop_program .
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 32
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    program                        shift and go to state 31
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 2

    (1) loop_program -> program .
    (7) program -> program . sentencia
    (8) program -> program . loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT32 resolved as shift
  ! shift/reduce conflict for FLOAT64 resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 1 (loop_program -> program .)
    $end            reduce using rule 1 (loop_program -> program .)
    RKEY            reduce using rule 1 (loop_program -> program .)
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

  ! FMT_LIBRARY     [ reduce using rule 1 (loop_program -> program .) ]
  ! FUNC            [ reduce using rule 1 (loop_program -> program .) ]
  ! IDENTIFIER      [ reduce using rule 1 (loop_program -> program .) ]
  ! INPUT           [ reduce using rule 1 (loop_program -> program .) ]
  ! VAR             [ reduce using rule 1 (loop_program -> program .) ]
  ! CONST           [ reduce using rule 1 (loop_program -> program .) ]
  ! FOR             [ reduce using rule 1 (loop_program -> program .) ]
  ! STRING          [ reduce using rule 1 (loop_program -> program .) ]
  ! INTEGER         [ reduce using rule 1 (loop_program -> program .) ]
  ! FLOAT32         [ reduce using rule 1 (loop_program -> program .) ]
  ! FLOAT64         [ reduce using rule 1 (loop_program -> program .) ]
  ! BOOLEAN         [ reduce using rule 1 (loop_program -> program .) ]

    sentencia                      shift and go to state 33
    loop                           shift and go to state 34
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 3

    (2) loop_program -> BREAK .

    BREAK           reduce using rule 2 (loop_program -> BREAK .)
    FMT_LIBRARY     reduce using rule 2 (loop_program -> BREAK .)
    FUNC            reduce using rule 2 (loop_program -> BREAK .)
    IDENTIFIER      reduce using rule 2 (loop_program -> BREAK .)
    INPUT           reduce using rule 2 (loop_program -> BREAK .)
    VAR             reduce using rule 2 (loop_program -> BREAK .)
    CONST           reduce using rule 2 (loop_program -> BREAK .)
    FOR             reduce using rule 2 (loop_program -> BREAK .)
    STRING          reduce using rule 2 (loop_program -> BREAK .)
    INTEGER         reduce using rule 2 (loop_program -> BREAK .)
    FLOAT32         reduce using rule 2 (loop_program -> BREAK .)
    FLOAT64         reduce using rule 2 (loop_program -> BREAK .)
    BOOLEAN         reduce using rule 2 (loop_program -> BREAK .)
    $end            reduce using rule 2 (loop_program -> BREAK .)
    RKEY            reduce using rule 2 (loop_program -> BREAK .)


state 4

    (5) program -> sentencia .

    FMT_LIBRARY     reduce using rule 5 (program -> sentencia .)
    FUNC            reduce using rule 5 (program -> sentencia .)
    IDENTIFIER      reduce using rule 5 (program -> sentencia .)
    INPUT           reduce using rule 5 (program -> sentencia .)
    VAR             reduce using rule 5 (program -> sentencia .)
    CONST           reduce using rule 5 (program -> sentencia .)
    FOR             reduce using rule 5 (program -> sentencia .)
    STRING          reduce using rule 5 (program -> sentencia .)
    INTEGER         reduce using rule 5 (program -> sentencia .)
    FLOAT32         reduce using rule 5 (program -> sentencia .)
    FLOAT64         reduce using rule 5 (program -> sentencia .)
    BOOLEAN         reduce using rule 5 (program -> sentencia .)
    BREAK           reduce using rule 5 (program -> sentencia .)
    $end            reduce using rule 5 (program -> sentencia .)
    RKEY            reduce using rule 5 (program -> sentencia .)


state 5

    (6) program -> loop .

    FMT_LIBRARY     reduce using rule 6 (program -> loop .)
    FUNC            reduce using rule 6 (program -> loop .)
    IDENTIFIER      reduce using rule 6 (program -> loop .)
    INPUT           reduce using rule 6 (program -> loop .)
    VAR             reduce using rule 6 (program -> loop .)
    CONST           reduce using rule 6 (program -> loop .)
    FOR             reduce using rule 6 (program -> loop .)
    STRING          reduce using rule 6 (program -> loop .)
    INTEGER         reduce using rule 6 (program -> loop .)
    FLOAT32         reduce using rule 6 (program -> loop .)
    FLOAT64         reduce using rule 6 (program -> loop .)
    BOOLEAN         reduce using rule 6 (program -> loop .)
    BREAK           reduce using rule 6 (program -> loop .)
    $end            reduce using rule 6 (program -> loop .)
    RKEY            reduce using rule 6 (program -> loop .)


state 6

    (10) sentencia -> print .

    FMT_LIBRARY     reduce using rule 10 (sentencia -> print .)
    FUNC            reduce using rule 10 (sentencia -> print .)
    IDENTIFIER      reduce using rule 10 (sentencia -> print .)
    INPUT           reduce using rule 10 (sentencia -> print .)
    VAR             reduce using rule 10 (sentencia -> print .)
    CONST           reduce using rule 10 (sentencia -> print .)
    FOR             reduce using rule 10 (sentencia -> print .)
    STRING          reduce using rule 10 (sentencia -> print .)
    INTEGER         reduce using rule 10 (sentencia -> print .)
    FLOAT32         reduce using rule 10 (sentencia -> print .)
    FLOAT64         reduce using rule 10 (sentencia -> print .)
    BOOLEAN         reduce using rule 10 (sentencia -> print .)
    BREAK           reduce using rule 10 (sentencia -> print .)
    $end            reduce using rule 10 (sentencia -> print .)
    RKEY            reduce using rule 10 (sentencia -> print .)


state 7

    (11) sentencia -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 11 (sentencia -> print_withoutvalue .)
    FUNC            reduce using rule 11 (sentencia -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 11 (sentencia -> print_withoutvalue .)
    INPUT           reduce using rule 11 (sentencia -> print_withoutvalue .)
    VAR             reduce using rule 11 (sentencia -> print_withoutvalue .)
    CONST           reduce using rule 11 (sentencia -> print_withoutvalue .)
    FOR             reduce using rule 11 (sentencia -> print_withoutvalue .)
    STRING          reduce using rule 11 (sentencia -> print_withoutvalue .)
    INTEGER         reduce using rule 11 (sentencia -> print_withoutvalue .)
    FLOAT32         reduce using rule 11 (sentencia -> print_withoutvalue .)
    FLOAT64         reduce using rule 11 (sentencia -> print_withoutvalue .)
    BOOLEAN         reduce using rule 11 (sentencia -> print_withoutvalue .)
    BREAK           reduce using rule 11 (sentencia -> print_withoutvalue .)
    $end            reduce using rule 11 (sentencia -> print_withoutvalue .)
    RKEY            reduce using rule 11 (sentencia -> print_withoutvalue .)


state 8

    (12) sentencia -> def_function .

    FMT_LIBRARY     reduce using rule 12 (sentencia -> def_function .)
    FUNC            reduce using rule 12 (sentencia -> def_function .)
    IDENTIFIER      reduce using rule 12 (sentencia -> def_function .)
    INPUT           reduce using rule 12 (sentencia -> def_function .)
    VAR             reduce using rule 12 (sentencia -> def_function .)
    CONST           reduce using rule 12 (sentencia -> def_function .)
    FOR             reduce using rule 12 (sentencia -> def_function .)
    STRING          reduce using rule 12 (sentencia -> def_function .)
    INTEGER         reduce using rule 12 (sentencia -> def_function .)
    FLOAT32         reduce using rule 12 (sentencia -> def_function .)
    FLOAT64         reduce using rule 12 (sentencia -> def_function .)
    BOOLEAN         reduce using rule 12 (sentencia -> def_function .)
    BREAK           reduce using rule 12 (sentencia -> def_function .)
    $end            reduce using rule 12 (sentencia -> def_function .)
    RKEY            reduce using rule 12 (sentencia -> def_function .)


state 9

    (13) sentencia -> call_function .
    (35) usable_value -> call_function .

    FMT_LIBRARY     reduce using rule 13 (sentencia -> call_function .)
    FUNC            reduce using rule 13 (sentencia -> call_function .)
    IDENTIFIER      reduce using rule 13 (sentencia -> call_function .)
    INPUT           reduce using rule 13 (sentencia -> call_function .)
    VAR             reduce using rule 13 (sentencia -> call_function .)
    CONST           reduce using rule 13 (sentencia -> call_function .)
    FOR             reduce using rule 13 (sentencia -> call_function .)
    STRING          reduce using rule 13 (sentencia -> call_function .)
    INTEGER         reduce using rule 13 (sentencia -> call_function .)
    FLOAT32         reduce using rule 13 (sentencia -> call_function .)
    FLOAT64         reduce using rule 13 (sentencia -> call_function .)
    BOOLEAN         reduce using rule 13 (sentencia -> call_function .)
    BREAK           reduce using rule 13 (sentencia -> call_function .)
    $end            reduce using rule 13 (sentencia -> call_function .)
    RKEY            reduce using rule 13 (sentencia -> call_function .)
    PLUS            reduce using rule 35 (usable_value -> call_function .)
    MINUS           reduce using rule 35 (usable_value -> call_function .)
    DIVIDE          reduce using rule 35 (usable_value -> call_function .)
    TIMES           reduce using rule 35 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 35 (usable_value -> call_function .)
    MODULE          reduce using rule 35 (usable_value -> call_function .)
    EQUALEQUAL      reduce using rule 35 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 35 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 35 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 35 (usable_value -> call_function .)
    LESS            reduce using rule 35 (usable_value -> call_function .)
    GREATER         reduce using rule 35 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 35 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 35 (usable_value -> call_function .)


state 10

    (14) sentencia -> input .

    FMT_LIBRARY     reduce using rule 14 (sentencia -> input .)
    FUNC            reduce using rule 14 (sentencia -> input .)
    IDENTIFIER      reduce using rule 14 (sentencia -> input .)
    INPUT           reduce using rule 14 (sentencia -> input .)
    VAR             reduce using rule 14 (sentencia -> input .)
    CONST           reduce using rule 14 (sentencia -> input .)
    FOR             reduce using rule 14 (sentencia -> input .)
    STRING          reduce using rule 14 (sentencia -> input .)
    INTEGER         reduce using rule 14 (sentencia -> input .)
    FLOAT32         reduce using rule 14 (sentencia -> input .)
    FLOAT64         reduce using rule 14 (sentencia -> input .)
    BOOLEAN         reduce using rule 14 (sentencia -> input .)
    BREAK           reduce using rule 14 (sentencia -> input .)
    $end            reduce using rule 14 (sentencia -> input .)
    RKEY            reduce using rule 14 (sentencia -> input .)


state 11

    (15) sentencia -> assignment .

    FMT_LIBRARY     reduce using rule 15 (sentencia -> assignment .)
    FUNC            reduce using rule 15 (sentencia -> assignment .)
    IDENTIFIER      reduce using rule 15 (sentencia -> assignment .)
    INPUT           reduce using rule 15 (sentencia -> assignment .)
    VAR             reduce using rule 15 (sentencia -> assignment .)
    CONST           reduce using rule 15 (sentencia -> assignment .)
    FOR             reduce using rule 15 (sentencia -> assignment .)
    STRING          reduce using rule 15 (sentencia -> assignment .)
    INTEGER         reduce using rule 15 (sentencia -> assignment .)
    FLOAT32         reduce using rule 15 (sentencia -> assignment .)
    FLOAT64         reduce using rule 15 (sentencia -> assignment .)
    BOOLEAN         reduce using rule 15 (sentencia -> assignment .)
    BREAK           reduce using rule 15 (sentencia -> assignment .)
    $end            reduce using rule 15 (sentencia -> assignment .)
    RKEY            reduce using rule 15 (sentencia -> assignment .)


state 12

    (16) sentencia -> short_assignment .

    FMT_LIBRARY     reduce using rule 16 (sentencia -> short_assignment .)
    FUNC            reduce using rule 16 (sentencia -> short_assignment .)
    IDENTIFIER      reduce using rule 16 (sentencia -> short_assignment .)
    INPUT           reduce using rule 16 (sentencia -> short_assignment .)
    VAR             reduce using rule 16 (sentencia -> short_assignment .)
    CONST           reduce using rule 16 (sentencia -> short_assignment .)
    FOR             reduce using rule 16 (sentencia -> short_assignment .)
    STRING          reduce using rule 16 (sentencia -> short_assignment .)
    INTEGER         reduce using rule 16 (sentencia -> short_assignment .)
    FLOAT32         reduce using rule 16 (sentencia -> short_assignment .)
    FLOAT64         reduce using rule 16 (sentencia -> short_assignment .)
    BOOLEAN         reduce using rule 16 (sentencia -> short_assignment .)
    BREAK           reduce using rule 16 (sentencia -> short_assignment .)
    $end            reduce using rule 16 (sentencia -> short_assignment .)
    RKEY            reduce using rule 16 (sentencia -> short_assignment .)


state 13

    (17) sentencia -> arithmetic_operation .
    (37) usable_value -> arithmetic_operation .

    FMT_LIBRARY     reduce using rule 17 (sentencia -> arithmetic_operation .)
    FUNC            reduce using rule 17 (sentencia -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 17 (sentencia -> arithmetic_operation .)
    INPUT           reduce using rule 17 (sentencia -> arithmetic_operation .)
    VAR             reduce using rule 17 (sentencia -> arithmetic_operation .)
    CONST           reduce using rule 17 (sentencia -> arithmetic_operation .)
    FOR             reduce using rule 17 (sentencia -> arithmetic_operation .)
    STRING          reduce using rule 17 (sentencia -> arithmetic_operation .)
    INTEGER         reduce using rule 17 (sentencia -> arithmetic_operation .)
    FLOAT32         reduce using rule 17 (sentencia -> arithmetic_operation .)
    FLOAT64         reduce using rule 17 (sentencia -> arithmetic_operation .)
    BOOLEAN         reduce using rule 17 (sentencia -> arithmetic_operation .)
    BREAK           reduce using rule 17 (sentencia -> arithmetic_operation .)
    $end            reduce using rule 17 (sentencia -> arithmetic_operation .)
    RKEY            reduce using rule 17 (sentencia -> arithmetic_operation .)
    PLUS            reduce using rule 37 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 37 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 37 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 37 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 37 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 37 (usable_value -> arithmetic_operation .)
    EQUALEQUAL      reduce using rule 37 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 37 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 37 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 37 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 37 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 37 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 37 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 37 (usable_value -> arithmetic_operation .)


state 14

    (18) sentencia -> direct_arithmetic_operation .

    FMT_LIBRARY     reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    FUNC            reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    IDENTIFIER      reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    INPUT           reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    VAR             reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    CONST           reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    FOR             reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    STRING          reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    INTEGER         reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    FLOAT32         reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    FLOAT64         reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    BOOLEAN         reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    BREAK           reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    $end            reduce using rule 18 (sentencia -> direct_arithmetic_operation .)
    RKEY            reduce using rule 18 (sentencia -> direct_arithmetic_operation .)


state 15

    (9) loop -> for .

    FMT_LIBRARY     reduce using rule 9 (loop -> for .)
    FUNC            reduce using rule 9 (loop -> for .)
    IDENTIFIER      reduce using rule 9 (loop -> for .)
    INPUT           reduce using rule 9 (loop -> for .)
    VAR             reduce using rule 9 (loop -> for .)
    CONST           reduce using rule 9 (loop -> for .)
    FOR             reduce using rule 9 (loop -> for .)
    STRING          reduce using rule 9 (loop -> for .)
    INTEGER         reduce using rule 9 (loop -> for .)
    FLOAT32         reduce using rule 9 (loop -> for .)
    FLOAT64         reduce using rule 9 (loop -> for .)
    BOOLEAN         reduce using rule 9 (loop -> for .)
    BREAK           reduce using rule 9 (loop -> for .)
    $end            reduce using rule 9 (loop -> for .)
    RKEY            reduce using rule 9 (loop -> for .)


state 16

    (21) print -> FMT_LIBRARY . DOT PRINTLN LPAREN data RPAREN
    (22) print -> FMT_LIBRARY . DOT PRINTF LPAREN value RPAREN
    (23) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> FMT_LIBRARY . DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> FMT_LIBRARY . DOT PRINTF LPAREN RPAREN

    DOT             shift and go to state 35


state 17

    (34) usable_value -> value .

    PLUS            reduce using rule 34 (usable_value -> value .)
    MINUS           reduce using rule 34 (usable_value -> value .)
    DIVIDE          reduce using rule 34 (usable_value -> value .)
    TIMES           reduce using rule 34 (usable_value -> value .)
    ENTERE_DIVIDE   reduce using rule 34 (usable_value -> value .)
    MODULE          reduce using rule 34 (usable_value -> value .)
    EQUALEQUAL      reduce using rule 34 (usable_value -> value .)
    NOT_EQUAL       reduce using rule 34 (usable_value -> value .)
    LESS_EQUAL      reduce using rule 34 (usable_value -> value .)
    GREATER_EQUAL   reduce using rule 34 (usable_value -> value .)
    LESS            reduce using rule 34 (usable_value -> value .)
    GREATER         reduce using rule 34 (usable_value -> value .)
    LOGICAL_AND     reduce using rule 34 (usable_value -> value .)
    LOGICAL_OR      reduce using rule 34 (usable_value -> value .)
    FMT_LIBRARY     reduce using rule 34 (usable_value -> value .)
    FUNC            reduce using rule 34 (usable_value -> value .)
    IDENTIFIER      reduce using rule 34 (usable_value -> value .)
    INPUT           reduce using rule 34 (usable_value -> value .)
    VAR             reduce using rule 34 (usable_value -> value .)
    CONST           reduce using rule 34 (usable_value -> value .)
    FOR             reduce using rule 34 (usable_value -> value .)
    STRING          reduce using rule 34 (usable_value -> value .)
    INTEGER         reduce using rule 34 (usable_value -> value .)
    FLOAT32         reduce using rule 34 (usable_value -> value .)
    FLOAT64         reduce using rule 34 (usable_value -> value .)
    BOOLEAN         reduce using rule 34 (usable_value -> value .)
    BREAK           reduce using rule 34 (usable_value -> value .)
    $end            reduce using rule 34 (usable_value -> value .)
    RKEY            reduce using rule 34 (usable_value -> value .)
    LKEY            reduce using rule 34 (usable_value -> value .)


state 18

    (65) def_function -> FUNC . IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY

    IDENTIFIER      shift and go to state 36


state 19

    (66) call_function -> IDENTIFIER . LPAREN values RPAREN
    (33) short_assignment -> IDENTIFIER . SHORT_VAR_DECL usable_value
    (39) direct_arithmetic_operation -> IDENTIFIER . PLUS_EQ value
    (40) direct_arithmetic_operation -> IDENTIFIER . MINUS_EQ value
    (41) direct_arithmetic_operation -> IDENTIFIER . TIMES_EQ value
    (42) direct_arithmetic_operation -> IDENTIFIER . DIVIDE_EQ value
    (43) direct_arithmetic_operation -> IDENTIFIER . MODULO_EQ value
    (44) direct_arithmetic_operation -> IDENTIFIER . BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> IDENTIFIER . BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> IDENTIFIER . BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> IDENTIFIER . LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> IDENTIFIER . RIGHT_SHIFT_EQ value
    (36) usable_value -> IDENTIFIER .

    LPAREN          shift and go to state 37
    SHORT_VAR_DECL  shift and go to state 38
    PLUS_EQ         shift and go to state 39
    MINUS_EQ        shift and go to state 40
    TIMES_EQ        shift and go to state 41
    DIVIDE_EQ       shift and go to state 42
    MODULO_EQ       shift and go to state 43
    BITWISE_AND_EQ  shift and go to state 44
    BITWISE_OR_EQ   shift and go to state 45
    BITWISE_XOR_EQ  shift and go to state 46
    LEFT_SHIFT_EQ   shift and go to state 47
    RIGHT_SHIFT_EQ  shift and go to state 48
    PLUS            reduce using rule 36 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 36 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 36 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 36 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 36 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 36 (usable_value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 36 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 36 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 36 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 36 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 36 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 36 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 36 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 36 (usable_value -> IDENTIFIER .)


state 20

    (82) input -> INPUT . LPAREN RPAREN
    (83) input -> INPUT . LPAREN value RPAREN
    (84) input -> INPUT . LPAREN identifiers RPAREN

    LPAREN          shift and go to state 49


state 21

    (31) assignment -> VAR . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 50


state 22

    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64


state 23

    (32) assignment -> CONST . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 65


state 24

    (19) for -> FOR . LKEY loop_program RKEY
    (20) for -> FOR . comparation_operation LKEY loop_program RKEY
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value

    LKEY            shift and go to state 66
    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    comparation_operation          shift and go to state 67
    usable_value                   shift and go to state 68
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71

state 25

    (38) usable_value -> comparation_operation .

    PLUS            reduce using rule 38 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 38 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 38 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 38 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 38 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 38 (usable_value -> comparation_operation .)
    EQUALEQUAL      reduce using rule 38 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 38 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 38 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 38 (usable_value -> comparation_operation .)
    LESS            reduce using rule 38 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 38 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 38 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 38 (usable_value -> comparation_operation .)
    FMT_LIBRARY     reduce using rule 38 (usable_value -> comparation_operation .)
    FUNC            reduce using rule 38 (usable_value -> comparation_operation .)
    IDENTIFIER      reduce using rule 38 (usable_value -> comparation_operation .)
    INPUT           reduce using rule 38 (usable_value -> comparation_operation .)
    VAR             reduce using rule 38 (usable_value -> comparation_operation .)
    CONST           reduce using rule 38 (usable_value -> comparation_operation .)
    FOR             reduce using rule 38 (usable_value -> comparation_operation .)
    STRING          reduce using rule 38 (usable_value -> comparation_operation .)
    INTEGER         reduce using rule 38 (usable_value -> comparation_operation .)
    FLOAT32         reduce using rule 38 (usable_value -> comparation_operation .)
    FLOAT64         reduce using rule 38 (usable_value -> comparation_operation .)
    BOOLEAN         reduce using rule 38 (usable_value -> comparation_operation .)
    BREAK           reduce using rule 38 (usable_value -> comparation_operation .)
    $end            reduce using rule 38 (usable_value -> comparation_operation .)
    RKEY            reduce using rule 38 (usable_value -> comparation_operation .)
    LKEY            reduce using rule 38 (usable_value -> comparation_operation .)


state 26

    (72) value -> STRING .

    PLUS            reduce using rule 72 (value -> STRING .)
    MINUS           reduce using rule 72 (value -> STRING .)
    DIVIDE          reduce using rule 72 (value -> STRING .)
    TIMES           reduce using rule 72 (value -> STRING .)
    ENTERE_DIVIDE   reduce using rule 72 (value -> STRING .)
    MODULE          reduce using rule 72 (value -> STRING .)
    EQUALEQUAL      reduce using rule 72 (value -> STRING .)
    NOT_EQUAL       reduce using rule 72 (value -> STRING .)
    LESS_EQUAL      reduce using rule 72 (value -> STRING .)
    GREATER_EQUAL   reduce using rule 72 (value -> STRING .)
    LESS            reduce using rule 72 (value -> STRING .)
    GREATER         reduce using rule 72 (value -> STRING .)
    LOGICAL_AND     reduce using rule 72 (value -> STRING .)
    LOGICAL_OR      reduce using rule 72 (value -> STRING .)
    RPAREN          reduce using rule 72 (value -> STRING .)
    COMMA           reduce using rule 72 (value -> STRING .)
    FMT_LIBRARY     reduce using rule 72 (value -> STRING .)
    FUNC            reduce using rule 72 (value -> STRING .)
    IDENTIFIER      reduce using rule 72 (value -> STRING .)
    INPUT           reduce using rule 72 (value -> STRING .)
    VAR             reduce using rule 72 (value -> STRING .)
    CONST           reduce using rule 72 (value -> STRING .)
    FOR             reduce using rule 72 (value -> STRING .)
    STRING          reduce using rule 72 (value -> STRING .)
    INTEGER         reduce using rule 72 (value -> STRING .)
    FLOAT32         reduce using rule 72 (value -> STRING .)
    FLOAT64         reduce using rule 72 (value -> STRING .)
    BOOLEAN         reduce using rule 72 (value -> STRING .)
    BREAK           reduce using rule 72 (value -> STRING .)
    $end            reduce using rule 72 (value -> STRING .)
    RKEY            reduce using rule 72 (value -> STRING .)
    LKEY            reduce using rule 72 (value -> STRING .)


state 27

    (73) value -> INTEGER .

    PLUS            reduce using rule 73 (value -> INTEGER .)
    MINUS           reduce using rule 73 (value -> INTEGER .)
    DIVIDE          reduce using rule 73 (value -> INTEGER .)
    TIMES           reduce using rule 73 (value -> INTEGER .)
    ENTERE_DIVIDE   reduce using rule 73 (value -> INTEGER .)
    MODULE          reduce using rule 73 (value -> INTEGER .)
    EQUALEQUAL      reduce using rule 73 (value -> INTEGER .)
    NOT_EQUAL       reduce using rule 73 (value -> INTEGER .)
    LESS_EQUAL      reduce using rule 73 (value -> INTEGER .)
    GREATER_EQUAL   reduce using rule 73 (value -> INTEGER .)
    LESS            reduce using rule 73 (value -> INTEGER .)
    GREATER         reduce using rule 73 (value -> INTEGER .)
    LOGICAL_AND     reduce using rule 73 (value -> INTEGER .)
    LOGICAL_OR      reduce using rule 73 (value -> INTEGER .)
    RPAREN          reduce using rule 73 (value -> INTEGER .)
    COMMA           reduce using rule 73 (value -> INTEGER .)
    FMT_LIBRARY     reduce using rule 73 (value -> INTEGER .)
    FUNC            reduce using rule 73 (value -> INTEGER .)
    IDENTIFIER      reduce using rule 73 (value -> INTEGER .)
    INPUT           reduce using rule 73 (value -> INTEGER .)
    VAR             reduce using rule 73 (value -> INTEGER .)
    CONST           reduce using rule 73 (value -> INTEGER .)
    FOR             reduce using rule 73 (value -> INTEGER .)
    STRING          reduce using rule 73 (value -> INTEGER .)
    INTEGER         reduce using rule 73 (value -> INTEGER .)
    FLOAT32         reduce using rule 73 (value -> INTEGER .)
    FLOAT64         reduce using rule 73 (value -> INTEGER .)
    BOOLEAN         reduce using rule 73 (value -> INTEGER .)
    BREAK           reduce using rule 73 (value -> INTEGER .)
    $end            reduce using rule 73 (value -> INTEGER .)
    RKEY            reduce using rule 73 (value -> INTEGER .)
    LKEY            reduce using rule 73 (value -> INTEGER .)


state 28

    (74) value -> FLOAT32 .

    PLUS            reduce using rule 74 (value -> FLOAT32 .)
    MINUS           reduce using rule 74 (value -> FLOAT32 .)
    DIVIDE          reduce using rule 74 (value -> FLOAT32 .)
    TIMES           reduce using rule 74 (value -> FLOAT32 .)
    ENTERE_DIVIDE   reduce using rule 74 (value -> FLOAT32 .)
    MODULE          reduce using rule 74 (value -> FLOAT32 .)
    EQUALEQUAL      reduce using rule 74 (value -> FLOAT32 .)
    NOT_EQUAL       reduce using rule 74 (value -> FLOAT32 .)
    LESS_EQUAL      reduce using rule 74 (value -> FLOAT32 .)
    GREATER_EQUAL   reduce using rule 74 (value -> FLOAT32 .)
    LESS            reduce using rule 74 (value -> FLOAT32 .)
    GREATER         reduce using rule 74 (value -> FLOAT32 .)
    LOGICAL_AND     reduce using rule 74 (value -> FLOAT32 .)
    LOGICAL_OR      reduce using rule 74 (value -> FLOAT32 .)
    RPAREN          reduce using rule 74 (value -> FLOAT32 .)
    COMMA           reduce using rule 74 (value -> FLOAT32 .)
    FMT_LIBRARY     reduce using rule 74 (value -> FLOAT32 .)
    FUNC            reduce using rule 74 (value -> FLOAT32 .)
    IDENTIFIER      reduce using rule 74 (value -> FLOAT32 .)
    INPUT           reduce using rule 74 (value -> FLOAT32 .)
    VAR             reduce using rule 74 (value -> FLOAT32 .)
    CONST           reduce using rule 74 (value -> FLOAT32 .)
    FOR             reduce using rule 74 (value -> FLOAT32 .)
    STRING          reduce using rule 74 (value -> FLOAT32 .)
    INTEGER         reduce using rule 74 (value -> FLOAT32 .)
    FLOAT32         reduce using rule 74 (value -> FLOAT32 .)
    FLOAT64         reduce using rule 74 (value -> FLOAT32 .)
    BOOLEAN         reduce using rule 74 (value -> FLOAT32 .)
    BREAK           reduce using rule 74 (value -> FLOAT32 .)
    $end            reduce using rule 74 (value -> FLOAT32 .)
    RKEY            reduce using rule 74 (value -> FLOAT32 .)
    LKEY            reduce using rule 74 (value -> FLOAT32 .)


state 29

    (75) value -> FLOAT64 .

    PLUS            reduce using rule 75 (value -> FLOAT64 .)
    MINUS           reduce using rule 75 (value -> FLOAT64 .)
    DIVIDE          reduce using rule 75 (value -> FLOAT64 .)
    TIMES           reduce using rule 75 (value -> FLOAT64 .)
    ENTERE_DIVIDE   reduce using rule 75 (value -> FLOAT64 .)
    MODULE          reduce using rule 75 (value -> FLOAT64 .)
    EQUALEQUAL      reduce using rule 75 (value -> FLOAT64 .)
    NOT_EQUAL       reduce using rule 75 (value -> FLOAT64 .)
    LESS_EQUAL      reduce using rule 75 (value -> FLOAT64 .)
    GREATER_EQUAL   reduce using rule 75 (value -> FLOAT64 .)
    LESS            reduce using rule 75 (value -> FLOAT64 .)
    GREATER         reduce using rule 75 (value -> FLOAT64 .)
    LOGICAL_AND     reduce using rule 75 (value -> FLOAT64 .)
    LOGICAL_OR      reduce using rule 75 (value -> FLOAT64 .)
    RPAREN          reduce using rule 75 (value -> FLOAT64 .)
    COMMA           reduce using rule 75 (value -> FLOAT64 .)
    FMT_LIBRARY     reduce using rule 75 (value -> FLOAT64 .)
    FUNC            reduce using rule 75 (value -> FLOAT64 .)
    IDENTIFIER      reduce using rule 75 (value -> FLOAT64 .)
    INPUT           reduce using rule 75 (value -> FLOAT64 .)
    VAR             reduce using rule 75 (value -> FLOAT64 .)
    CONST           reduce using rule 75 (value -> FLOAT64 .)
    FOR             reduce using rule 75 (value -> FLOAT64 .)
    STRING          reduce using rule 75 (value -> FLOAT64 .)
    INTEGER         reduce using rule 75 (value -> FLOAT64 .)
    FLOAT32         reduce using rule 75 (value -> FLOAT64 .)
    FLOAT64         reduce using rule 75 (value -> FLOAT64 .)
    BOOLEAN         reduce using rule 75 (value -> FLOAT64 .)
    BREAK           reduce using rule 75 (value -> FLOAT64 .)
    $end            reduce using rule 75 (value -> FLOAT64 .)
    RKEY            reduce using rule 75 (value -> FLOAT64 .)
    LKEY            reduce using rule 75 (value -> FLOAT64 .)


state 30

    (76) value -> BOOLEAN .

    PLUS            reduce using rule 76 (value -> BOOLEAN .)
    MINUS           reduce using rule 76 (value -> BOOLEAN .)
    DIVIDE          reduce using rule 76 (value -> BOOLEAN .)
    TIMES           reduce using rule 76 (value -> BOOLEAN .)
    ENTERE_DIVIDE   reduce using rule 76 (value -> BOOLEAN .)
    MODULE          reduce using rule 76 (value -> BOOLEAN .)
    EQUALEQUAL      reduce using rule 76 (value -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 76 (value -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 76 (value -> BOOLEAN .)
    GREATER_EQUAL   reduce using rule 76 (value -> BOOLEAN .)
    LESS            reduce using rule 76 (value -> BOOLEAN .)
    GREATER         reduce using rule 76 (value -> BOOLEAN .)
    LOGICAL_AND     reduce using rule 76 (value -> BOOLEAN .)
    LOGICAL_OR      reduce using rule 76 (value -> BOOLEAN .)
    RPAREN          reduce using rule 76 (value -> BOOLEAN .)
    COMMA           reduce using rule 76 (value -> BOOLEAN .)
    FMT_LIBRARY     reduce using rule 76 (value -> BOOLEAN .)
    FUNC            reduce using rule 76 (value -> BOOLEAN .)
    IDENTIFIER      reduce using rule 76 (value -> BOOLEAN .)
    INPUT           reduce using rule 76 (value -> BOOLEAN .)
    VAR             reduce using rule 76 (value -> BOOLEAN .)
    CONST           reduce using rule 76 (value -> BOOLEAN .)
    FOR             reduce using rule 76 (value -> BOOLEAN .)
    STRING          reduce using rule 76 (value -> BOOLEAN .)
    INTEGER         reduce using rule 76 (value -> BOOLEAN .)
    FLOAT32         reduce using rule 76 (value -> BOOLEAN .)
    FLOAT64         reduce using rule 76 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 76 (value -> BOOLEAN .)
    BREAK           reduce using rule 76 (value -> BOOLEAN .)
    $end            reduce using rule 76 (value -> BOOLEAN .)
    RKEY            reduce using rule 76 (value -> BOOLEAN .)
    LKEY            reduce using rule 76 (value -> BOOLEAN .)


state 31

    (3) loop_program -> loop_program program .
    (7) program -> program . sentencia
    (8) program -> program . loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT32 resolved as shift
  ! shift/reduce conflict for FLOAT64 resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 3 (loop_program -> loop_program program .)
    $end            reduce using rule 3 (loop_program -> loop_program program .)
    RKEY            reduce using rule 3 (loop_program -> loop_program program .)
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

  ! FMT_LIBRARY     [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FUNC            [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! IDENTIFIER      [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INPUT           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! VAR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! CONST           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FOR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! STRING          [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INTEGER         [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FLOAT32         [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FLOAT64         [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! BOOLEAN         [ reduce using rule 3 (loop_program -> loop_program program .) ]

    sentencia                      shift and go to state 33
    loop                           shift and go to state 34
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 32

    (4) loop_program -> loop_program BREAK .

    BREAK           reduce using rule 4 (loop_program -> loop_program BREAK .)
    FMT_LIBRARY     reduce using rule 4 (loop_program -> loop_program BREAK .)
    FUNC            reduce using rule 4 (loop_program -> loop_program BREAK .)
    IDENTIFIER      reduce using rule 4 (loop_program -> loop_program BREAK .)
    INPUT           reduce using rule 4 (loop_program -> loop_program BREAK .)
    VAR             reduce using rule 4 (loop_program -> loop_program BREAK .)
    CONST           reduce using rule 4 (loop_program -> loop_program BREAK .)
    FOR             reduce using rule 4 (loop_program -> loop_program BREAK .)
    STRING          reduce using rule 4 (loop_program -> loop_program BREAK .)
    INTEGER         reduce using rule 4 (loop_program -> loop_program BREAK .)
    FLOAT32         reduce using rule 4 (loop_program -> loop_program BREAK .)
    FLOAT64         reduce using rule 4 (loop_program -> loop_program BREAK .)
    BOOLEAN         reduce using rule 4 (loop_program -> loop_program BREAK .)
    $end            reduce using rule 4 (loop_program -> loop_program BREAK .)
    RKEY            reduce using rule 4 (loop_program -> loop_program BREAK .)


state 33

    (7) program -> program sentencia .

    FMT_LIBRARY     reduce using rule 7 (program -> program sentencia .)
    FUNC            reduce using rule 7 (program -> program sentencia .)
    IDENTIFIER      reduce using rule 7 (program -> program sentencia .)
    INPUT           reduce using rule 7 (program -> program sentencia .)
    VAR             reduce using rule 7 (program -> program sentencia .)
    CONST           reduce using rule 7 (program -> program sentencia .)
    FOR             reduce using rule 7 (program -> program sentencia .)
    STRING          reduce using rule 7 (program -> program sentencia .)
    INTEGER         reduce using rule 7 (program -> program sentencia .)
    FLOAT32         reduce using rule 7 (program -> program sentencia .)
    FLOAT64         reduce using rule 7 (program -> program sentencia .)
    BOOLEAN         reduce using rule 7 (program -> program sentencia .)
    BREAK           reduce using rule 7 (program -> program sentencia .)
    $end            reduce using rule 7 (program -> program sentencia .)
    RKEY            reduce using rule 7 (program -> program sentencia .)


state 34

    (8) program -> program loop .

    FMT_LIBRARY     reduce using rule 8 (program -> program loop .)
    FUNC            reduce using rule 8 (program -> program loop .)
    IDENTIFIER      reduce using rule 8 (program -> program loop .)
    INPUT           reduce using rule 8 (program -> program loop .)
    VAR             reduce using rule 8 (program -> program loop .)
    CONST           reduce using rule 8 (program -> program loop .)
    FOR             reduce using rule 8 (program -> program loop .)
    STRING          reduce using rule 8 (program -> program loop .)
    INTEGER         reduce using rule 8 (program -> program loop .)
    FLOAT32         reduce using rule 8 (program -> program loop .)
    FLOAT64         reduce using rule 8 (program -> program loop .)
    BOOLEAN         reduce using rule 8 (program -> program loop .)
    BREAK           reduce using rule 8 (program -> program loop .)
    $end            reduce using rule 8 (program -> program loop .)
    RKEY            reduce using rule 8 (program -> program loop .)


state 35

    (21) print -> FMT_LIBRARY DOT . PRINTLN LPAREN data RPAREN
    (22) print -> FMT_LIBRARY DOT . PRINTF LPAREN value RPAREN
    (23) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA RPAREN
    (24) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> FMT_LIBRARY DOT . PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> FMT_LIBRARY DOT . PRINTF LPAREN RPAREN

    PRINTLN         shift and go to state 72
    PRINTF          shift and go to state 73


state 36

    (65) def_function -> FUNC IDENTIFIER . LPAREN parameters RPAREN LKEY program RKEY

    LPAREN          shift and go to state 74


state 37

    (66) call_function -> IDENTIFIER LPAREN . values RPAREN
    (70) values -> . value
    (71) values -> . values COMMA value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    values                         shift and go to state 75
    value                          shift and go to state 76

state 38

    (33) short_assignment -> IDENTIFIER SHORT_VAR_DECL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 77
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 39

    (39) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 78

state 40

    (40) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 79

state 41

    (41) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 80

state 42

    (42) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 81

state 43

    (43) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 82

state 44

    (44) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 83

state 45

    (45) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 84

state 46

    (46) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 85

state 47

    (47) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 86

state 48

    (48) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 87

state 49

    (82) input -> INPUT LPAREN . RPAREN
    (83) input -> INPUT LPAREN . value RPAREN
    (84) input -> INPUT LPAREN . identifiers RPAREN
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (63) identifiers -> . IDENTIFIER
    (64) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 88
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30
    IDENTIFIER      shift and go to state 91

    value                          shift and go to state 89
    identifiers                    shift and go to state 90

state 50

    (31) assignment -> VAR IDENTIFIER . data_type EQUAL usable_value
    (77) data_type -> . INTEGER_DATA_TYPE
    (78) data_type -> . FLOAT32_DATA_TYPE
    (79) data_type -> . FLOAT64_DATA_TYPE
    (80) data_type -> . BOOLEAN_DATA_TYPE
    (81) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 93
    FLOAT32_DATA_TYPE shift and go to state 94
    FLOAT64_DATA_TYPE shift and go to state 95
    BOOLEAN_DATA_TYPE shift and go to state 96
    STRING_DATA_TYPE shift and go to state 97

    data_type                      shift and go to state 92

state 51

    (49) arithmetic_operation -> usable_value PLUS . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 98
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 52

    (50) arithmetic_operation -> usable_value MINUS . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 99
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 53

    (51) arithmetic_operation -> usable_value DIVIDE . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 100
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 54

    (52) arithmetic_operation -> usable_value TIMES . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 101
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 55

    (53) arithmetic_operation -> usable_value ENTERE_DIVIDE . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 102
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 56

    (54) arithmetic_operation -> usable_value MODULE . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 103
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 57

    (55) comparation_operation -> usable_value EQUALEQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 104
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 58

    (56) comparation_operation -> usable_value NOT_EQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 105
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 59

    (57) comparation_operation -> usable_value LESS_EQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 106
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 60

    (58) comparation_operation -> usable_value GREATER_EQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 107
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 61

    (59) comparation_operation -> usable_value LESS . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 108
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 62

    (60) comparation_operation -> usable_value GREATER . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 109
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 63

    (61) comparation_operation -> usable_value LOGICAL_AND . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 110
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 64

    (62) comparation_operation -> usable_value LOGICAL_OR . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 111
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 65

    (32) assignment -> CONST IDENTIFIER . data_type EQUAL usable_value
    (77) data_type -> . INTEGER_DATA_TYPE
    (78) data_type -> . FLOAT32_DATA_TYPE
    (79) data_type -> . FLOAT64_DATA_TYPE
    (80) data_type -> . BOOLEAN_DATA_TYPE
    (81) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 93
    FLOAT32_DATA_TYPE shift and go to state 94
    FLOAT64_DATA_TYPE shift and go to state 95
    BOOLEAN_DATA_TYPE shift and go to state 96
    STRING_DATA_TYPE shift and go to state 97

    data_type                      shift and go to state 112

state 66

    (19) for -> FOR LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . BREAK
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 3
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    loop_program                   shift and go to state 113
    program                        shift and go to state 2
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 67

    (20) for -> FOR comparation_operation . LKEY loop_program RKEY
    (38) usable_value -> comparation_operation .

    LKEY            shift and go to state 114
    EQUALEQUAL      reduce using rule 38 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 38 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 38 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 38 (usable_value -> comparation_operation .)
    LESS            reduce using rule 38 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 38 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 38 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 38 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 38 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 38 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 38 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 38 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 38 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 38 (usable_value -> comparation_operation .)


state 68

    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value

    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56


state 69

    (35) usable_value -> call_function .

    EQUALEQUAL      reduce using rule 35 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 35 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 35 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 35 (usable_value -> call_function .)
    LESS            reduce using rule 35 (usable_value -> call_function .)
    GREATER         reduce using rule 35 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 35 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 35 (usable_value -> call_function .)
    PLUS            reduce using rule 35 (usable_value -> call_function .)
    MINUS           reduce using rule 35 (usable_value -> call_function .)
    DIVIDE          reduce using rule 35 (usable_value -> call_function .)
    TIMES           reduce using rule 35 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 35 (usable_value -> call_function .)
    MODULE          reduce using rule 35 (usable_value -> call_function .)
    FMT_LIBRARY     reduce using rule 35 (usable_value -> call_function .)
    FUNC            reduce using rule 35 (usable_value -> call_function .)
    IDENTIFIER      reduce using rule 35 (usable_value -> call_function .)
    INPUT           reduce using rule 35 (usable_value -> call_function .)
    VAR             reduce using rule 35 (usable_value -> call_function .)
    CONST           reduce using rule 35 (usable_value -> call_function .)
    FOR             reduce using rule 35 (usable_value -> call_function .)
    STRING          reduce using rule 35 (usable_value -> call_function .)
    INTEGER         reduce using rule 35 (usable_value -> call_function .)
    FLOAT32         reduce using rule 35 (usable_value -> call_function .)
    FLOAT64         reduce using rule 35 (usable_value -> call_function .)
    BOOLEAN         reduce using rule 35 (usable_value -> call_function .)
    BREAK           reduce using rule 35 (usable_value -> call_function .)
    $end            reduce using rule 35 (usable_value -> call_function .)
    RKEY            reduce using rule 35 (usable_value -> call_function .)
    LKEY            reduce using rule 35 (usable_value -> call_function .)


state 70

    (36) usable_value -> IDENTIFIER .
    (66) call_function -> IDENTIFIER . LPAREN values RPAREN

    EQUALEQUAL      reduce using rule 36 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 36 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 36 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 36 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 36 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 36 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 36 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 36 (usable_value -> IDENTIFIER .)
    PLUS            reduce using rule 36 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 36 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 36 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 36 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 36 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 36 (usable_value -> IDENTIFIER .)
    FMT_LIBRARY     reduce using rule 36 (usable_value -> IDENTIFIER .)
    FUNC            reduce using rule 36 (usable_value -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (usable_value -> IDENTIFIER .)
    INPUT           reduce using rule 36 (usable_value -> IDENTIFIER .)
    VAR             reduce using rule 36 (usable_value -> IDENTIFIER .)
    CONST           reduce using rule 36 (usable_value -> IDENTIFIER .)
    FOR             reduce using rule 36 (usable_value -> IDENTIFIER .)
    STRING          reduce using rule 36 (usable_value -> IDENTIFIER .)
    INTEGER         reduce using rule 36 (usable_value -> IDENTIFIER .)
    FLOAT32         reduce using rule 36 (usable_value -> IDENTIFIER .)
    FLOAT64         reduce using rule 36 (usable_value -> IDENTIFIER .)
    BOOLEAN         reduce using rule 36 (usable_value -> IDENTIFIER .)
    BREAK           reduce using rule 36 (usable_value -> IDENTIFIER .)
    $end            reduce using rule 36 (usable_value -> IDENTIFIER .)
    RKEY            reduce using rule 36 (usable_value -> IDENTIFIER .)
    LKEY            reduce using rule 36 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 37


state 71

    (37) usable_value -> arithmetic_operation .

    EQUALEQUAL      reduce using rule 37 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 37 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 37 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 37 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 37 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 37 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 37 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 37 (usable_value -> arithmetic_operation .)
    PLUS            reduce using rule 37 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 37 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 37 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 37 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 37 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 37 (usable_value -> arithmetic_operation .)
    FMT_LIBRARY     reduce using rule 37 (usable_value -> arithmetic_operation .)
    FUNC            reduce using rule 37 (usable_value -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 37 (usable_value -> arithmetic_operation .)
    INPUT           reduce using rule 37 (usable_value -> arithmetic_operation .)
    VAR             reduce using rule 37 (usable_value -> arithmetic_operation .)
    CONST           reduce using rule 37 (usable_value -> arithmetic_operation .)
    FOR             reduce using rule 37 (usable_value -> arithmetic_operation .)
    STRING          reduce using rule 37 (usable_value -> arithmetic_operation .)
    INTEGER         reduce using rule 37 (usable_value -> arithmetic_operation .)
    FLOAT32         reduce using rule 37 (usable_value -> arithmetic_operation .)
    FLOAT64         reduce using rule 37 (usable_value -> arithmetic_operation .)
    BOOLEAN         reduce using rule 37 (usable_value -> arithmetic_operation .)
    BREAK           reduce using rule 37 (usable_value -> arithmetic_operation .)
    $end            reduce using rule 37 (usable_value -> arithmetic_operation .)
    RKEY            reduce using rule 37 (usable_value -> arithmetic_operation .)
    LKEY            reduce using rule 37 (usable_value -> arithmetic_operation .)


state 72

    (21) print -> FMT_LIBRARY DOT PRINTLN . LPAREN data RPAREN
    (29) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 115


state 73

    (22) print -> FMT_LIBRARY DOT PRINTF . LPAREN value RPAREN
    (23) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA RPAREN
    (24) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA data RPAREN
    (30) print_withoutvalue -> FMT_LIBRARY DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 116


state 74

    (65) def_function -> FUNC IDENTIFIER LPAREN . parameters RPAREN LKEY program RKEY
    (67) parameters -> . parameter
    (68) parameters -> . parameters COMMA parameter
    (69) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 117

    parameters                     shift and go to state 118
    parameter                      shift and go to state 119

state 75

    (66) call_function -> IDENTIFIER LPAREN values . RPAREN
    (71) values -> values . COMMA value

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 121


state 76

    (70) values -> value .

    RPAREN          reduce using rule 70 (values -> value .)
    COMMA           reduce using rule 70 (values -> value .)


state 77

    (33) short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FUNC            reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    IDENTIFIER      reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INPUT           reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    VAR             reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CONST           reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FOR             reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    STRING          reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INTEGER         reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FLOAT32         reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FLOAT64         reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BOOLEAN         reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BREAK           reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    $end            reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    RKEY            reduce using rule 33 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64


state 78

    (39) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .

    FMT_LIBRARY     reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FUNC            reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    IDENTIFIER      reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INPUT           reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    VAR             reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CONST           reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FOR             reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    STRING          reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INTEGER         reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FLOAT32         reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FLOAT64         reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BOOLEAN         reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BREAK           reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    $end            reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    RKEY            reduce using rule 39 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)


state 79

    (40) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .

    FMT_LIBRARY     reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FUNC            reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    IDENTIFIER      reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INPUT           reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    VAR             reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CONST           reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FOR             reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    STRING          reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INTEGER         reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FLOAT32         reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FLOAT64         reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BOOLEAN         reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BREAK           reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    $end            reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    RKEY            reduce using rule 40 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)


state 80

    (41) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .

    FMT_LIBRARY     reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FUNC            reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    IDENTIFIER      reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INPUT           reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    VAR             reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CONST           reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FOR             reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    STRING          reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INTEGER         reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FLOAT32         reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FLOAT64         reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BOOLEAN         reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BREAK           reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    $end            reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    RKEY            reduce using rule 41 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)


state 81

    (42) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .

    FMT_LIBRARY     reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FUNC            reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    IDENTIFIER      reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INPUT           reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    VAR             reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CONST           reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FOR             reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    STRING          reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INTEGER         reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FLOAT32         reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FLOAT64         reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BOOLEAN         reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BREAK           reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    $end            reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    RKEY            reduce using rule 42 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)


state 82

    (43) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .

    FMT_LIBRARY     reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FUNC            reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    IDENTIFIER      reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INPUT           reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    VAR             reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CONST           reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FOR             reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    STRING          reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INTEGER         reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FLOAT32         reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FLOAT64         reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BOOLEAN         reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BREAK           reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    $end            reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    RKEY            reduce using rule 43 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)


state 83

    (44) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .

    FMT_LIBRARY     reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FUNC            reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    IDENTIFIER      reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INPUT           reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    VAR             reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CONST           reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FOR             reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    STRING          reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INTEGER         reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FLOAT32         reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FLOAT64         reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BOOLEAN         reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BREAK           reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    $end            reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    RKEY            reduce using rule 44 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)


state 84

    (45) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .

    FMT_LIBRARY     reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FUNC            reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    IDENTIFIER      reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INPUT           reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    VAR             reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CONST           reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FOR             reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    STRING          reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INTEGER         reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FLOAT32         reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FLOAT64         reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BOOLEAN         reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BREAK           reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    $end            reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    RKEY            reduce using rule 45 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)


state 85

    (46) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .

    FMT_LIBRARY     reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FUNC            reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    IDENTIFIER      reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INPUT           reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    VAR             reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CONST           reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FOR             reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    STRING          reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INTEGER         reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FLOAT32         reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FLOAT64         reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BOOLEAN         reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BREAK           reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    $end            reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    RKEY            reduce using rule 46 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)


state 86

    (47) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FUNC            reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INPUT           reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    VAR             reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CONST           reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FOR             reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    STRING          reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INTEGER         reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FLOAT32         reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FLOAT64         reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BREAK           reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    $end            reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    RKEY            reduce using rule 47 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)


state 87

    (48) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FUNC            reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INPUT           reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    VAR             reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CONST           reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FOR             reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    STRING          reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INTEGER         reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FLOAT32         reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FLOAT64         reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BREAK           reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    $end            reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    RKEY            reduce using rule 48 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)


state 88

    (82) input -> INPUT LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    FUNC            reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    VAR             reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    CONST           reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    STRING          reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    INTEGER         reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    FLOAT32         reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    FLOAT64         reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    BOOLEAN         reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    BREAK           reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 82 (input -> INPUT LPAREN RPAREN .)
    RKEY            reduce using rule 82 (input -> INPUT LPAREN RPAREN .)


state 89

    (83) input -> INPUT LPAREN value . RPAREN

    RPAREN          shift and go to state 122


state 90

    (84) input -> INPUT LPAREN identifiers . RPAREN
    (64) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 91

    (63) identifiers -> IDENTIFIER .

    RPAREN          reduce using rule 63 (identifiers -> IDENTIFIER .)
    COMMA           reduce using rule 63 (identifiers -> IDENTIFIER .)


state 92

    (31) assignment -> VAR IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 125


state 93

    (77) data_type -> INTEGER_DATA_TYPE .

    EQUAL           reduce using rule 77 (data_type -> INTEGER_DATA_TYPE .)
    RPAREN          reduce using rule 77 (data_type -> INTEGER_DATA_TYPE .)
    COMMA           reduce using rule 77 (data_type -> INTEGER_DATA_TYPE .)


state 94

    (78) data_type -> FLOAT32_DATA_TYPE .

    EQUAL           reduce using rule 78 (data_type -> FLOAT32_DATA_TYPE .)
    RPAREN          reduce using rule 78 (data_type -> FLOAT32_DATA_TYPE .)
    COMMA           reduce using rule 78 (data_type -> FLOAT32_DATA_TYPE .)


state 95

    (79) data_type -> FLOAT64_DATA_TYPE .

    EQUAL           reduce using rule 79 (data_type -> FLOAT64_DATA_TYPE .)
    RPAREN          reduce using rule 79 (data_type -> FLOAT64_DATA_TYPE .)
    COMMA           reduce using rule 79 (data_type -> FLOAT64_DATA_TYPE .)


state 96

    (80) data_type -> BOOLEAN_DATA_TYPE .

    EQUAL           reduce using rule 80 (data_type -> BOOLEAN_DATA_TYPE .)
    RPAREN          reduce using rule 80 (data_type -> BOOLEAN_DATA_TYPE .)
    COMMA           reduce using rule 80 (data_type -> BOOLEAN_DATA_TYPE .)


state 97

    (81) data_type -> STRING_DATA_TYPE .

    EQUAL           reduce using rule 81 (data_type -> STRING_DATA_TYPE .)
    RPAREN          reduce using rule 81 (data_type -> STRING_DATA_TYPE .)
    COMMA           reduce using rule 81 (data_type -> STRING_DATA_TYPE .)


state 98

    (49) arithmetic_operation -> usable_value PLUS usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    FUNC            reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    IDENTIFIER      reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    INPUT           reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    VAR             reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    CONST           reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    FOR             reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    STRING          reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    INTEGER         reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    FLOAT32         reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    FLOAT64         reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    BOOLEAN         reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    BREAK           reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    $end            reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    RKEY            reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    LKEY            reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MINUS           [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! TIMES           [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MODULE          [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS            [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER         [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 49 (arithmetic_operation -> usable_value PLUS usable_value .) ]


state 99

    (50) arithmetic_operation -> usable_value MINUS usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    FUNC            reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    IDENTIFIER      reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    INPUT           reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    VAR             reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    CONST           reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    FOR             reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    STRING          reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    INTEGER         reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    FLOAT32         reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    FLOAT64         reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    BOOLEAN         reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    BREAK           reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    $end            reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    RKEY            reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    LKEY            reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MINUS           [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! TIMES           [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MODULE          [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS            [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER         [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 50 (arithmetic_operation -> usable_value MINUS usable_value .) ]


state 100

    (51) arithmetic_operation -> usable_value DIVIDE usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FUNC            reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INPUT           reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    VAR             reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CONST           reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FOR             reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    STRING          reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INTEGER         reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FLOAT32         reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FLOAT64         reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BOOLEAN         reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BREAK           reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    $end            reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    RKEY            reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    LKEY            reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 51 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]


state 101

    (52) arithmetic_operation -> usable_value TIMES usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    FUNC            reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    IDENTIFIER      reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    INPUT           reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    VAR             reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    CONST           reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    FOR             reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    STRING          reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    INTEGER         reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    FLOAT32         reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    FLOAT64         reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    BOOLEAN         reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    BREAK           reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    $end            reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    RKEY            reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    LKEY            reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MINUS           [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! DIVIDE          [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! TIMES           [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MODULE          [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS            [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER         [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 52 (arithmetic_operation -> usable_value TIMES usable_value .) ]


state 102

    (53) arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FUNC            reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INPUT           reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    VAR             reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CONST           reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FOR             reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    STRING          reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INTEGER         reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FLOAT32         reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FLOAT64         reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BOOLEAN         reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BREAK           reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    $end            reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    RKEY            reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    LKEY            reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 53 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]


state 103

    (54) arithmetic_operation -> usable_value MODULE usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    FUNC            reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    IDENTIFIER      reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    INPUT           reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    VAR             reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    CONST           reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    FOR             reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    STRING          reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    INTEGER         reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    FLOAT32         reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    FLOAT64         reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    BOOLEAN         reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    BREAK           reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    $end            reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    RKEY            reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    LKEY            reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MINUS           [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! DIVIDE          [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! TIMES           [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MODULE          [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS            [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER         [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 54 (arithmetic_operation -> usable_value MODULE usable_value .) ]


state 104

    (55) comparation_operation -> usable_value EQUALEQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FUNC            reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    IDENTIFIER      reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INPUT           reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    VAR             reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CONST           reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FOR             reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    STRING          reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INTEGER         reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FLOAT32         reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FLOAT64         reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BOOLEAN         reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BREAK           reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    $end            reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    RKEY            reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS            [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 55 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]


state 105

    (56) comparation_operation -> usable_value NOT_EQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FUNC            reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INPUT           reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    VAR             reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CONST           reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FOR             reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    STRING          reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INTEGER         reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FLOAT32         reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FLOAT64         reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BOOLEAN         reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BREAK           reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    $end            reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    RKEY            reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 56 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]


state 106

    (57) comparation_operation -> usable_value LESS_EQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FUNC            reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INPUT           reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    VAR             reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CONST           reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FOR             reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    STRING          reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INTEGER         reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FLOAT32         reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FLOAT64         reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BOOLEAN         reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BREAK           reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    $end            reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    RKEY            reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 57 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]


state 107

    (58) comparation_operation -> usable_value GREATER_EQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FUNC            reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INPUT           reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    VAR             reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CONST           reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FOR             reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    STRING          reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INTEGER         reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FLOAT32         reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FLOAT64         reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BOOLEAN         reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BREAK           reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    $end            reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    RKEY            reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 58 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]


state 108

    (59) comparation_operation -> usable_value LESS usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    FMT_LIBRARY     reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    FUNC            reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    IDENTIFIER      reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    INPUT           reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    VAR             reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    CONST           reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    FOR             reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    STRING          reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    INTEGER         reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    FLOAT32         reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    FLOAT64         reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    BOOLEAN         reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    BREAK           reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    $end            reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    RKEY            reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MINUS           [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! DIVIDE          [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! TIMES           [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MODULE          [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS            [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER         [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 59 (comparation_operation -> usable_value LESS usable_value .) ]


state 109

    (60) comparation_operation -> usable_value GREATER usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    FMT_LIBRARY     reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    FUNC            reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    IDENTIFIER      reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    INPUT           reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    VAR             reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    CONST           reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    FOR             reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    STRING          reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    INTEGER         reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    FLOAT32         reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    FLOAT64         reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    BOOLEAN         reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    BREAK           reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    $end            reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    RKEY            reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MINUS           [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! DIVIDE          [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! TIMES           [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MODULE          [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS            [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER         [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 60 (comparation_operation -> usable_value GREATER usable_value .) ]


state 110

    (61) comparation_operation -> usable_value LOGICAL_AND usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FMT_LIBRARY     reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FUNC            reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    IDENTIFIER      reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INPUT           reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    VAR             reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CONST           reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FOR             reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    STRING          reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INTEGER         reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FLOAT32         reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FLOAT64         reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BOOLEAN         reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BREAK           reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    $end            reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    RKEY            reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MINUS           [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! DIVIDE          [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! TIMES           [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MODULE          [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS            [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER         [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 61 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]


state 111

    (62) comparation_operation -> usable_value LOGICAL_OR usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FMT_LIBRARY     reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FUNC            reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    IDENTIFIER      reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INPUT           reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    VAR             reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CONST           reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FOR             reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    STRING          reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INTEGER         reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FLOAT32         reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FLOAT64         reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BOOLEAN         reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BREAK           reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    $end            reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    RKEY            reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64

  ! PLUS            [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MINUS           [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! DIVIDE          [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! TIMES           [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MODULE          [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS            [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER         [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 62 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]


state 112

    (32) assignment -> CONST IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 126


state 113

    (19) for -> FOR LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 127
    BREAK           shift and go to state 32
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    program                        shift and go to state 31
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 114

    (20) for -> FOR comparation_operation LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . BREAK
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 3
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    comparation_operation          shift and go to state 25
    loop_program                   shift and go to state 128
    program                        shift and go to state 2
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22

state 115

    (21) print -> FMT_LIBRARY DOT PRINTLN LPAREN . data RPAREN
    (29) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN . RPAREN
    (25) data -> . value
    (26) data -> . IDENTIFIER
    (27) data -> . data COMMA value
    (28) data -> . data COMMA IDENTIFIER
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    RPAREN          shift and go to state 130
    IDENTIFIER      shift and go to state 132
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    data                           shift and go to state 129
    value                          shift and go to state 131

state 116

    (22) print -> FMT_LIBRARY DOT PRINTF LPAREN . value RPAREN
    (23) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA RPAREN
    (24) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA data RPAREN
    (30) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN . RPAREN
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    RPAREN          shift and go to state 134
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 133

state 117

    (69) parameter -> IDENTIFIER . data_type
    (77) data_type -> . INTEGER_DATA_TYPE
    (78) data_type -> . FLOAT32_DATA_TYPE
    (79) data_type -> . FLOAT64_DATA_TYPE
    (80) data_type -> . BOOLEAN_DATA_TYPE
    (81) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 93
    FLOAT32_DATA_TYPE shift and go to state 94
    FLOAT64_DATA_TYPE shift and go to state 95
    BOOLEAN_DATA_TYPE shift and go to state 96
    STRING_DATA_TYPE shift and go to state 97

    data_type                      shift and go to state 135

state 118

    (65) def_function -> FUNC IDENTIFIER LPAREN parameters . RPAREN LKEY program RKEY
    (68) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 137


state 119

    (67) parameters -> parameter .

    RPAREN          reduce using rule 67 (parameters -> parameter .)
    COMMA           reduce using rule 67 (parameters -> parameter .)


state 120

    (66) call_function -> IDENTIFIER LPAREN values RPAREN .

    FMT_LIBRARY     reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FUNC            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    STRING          reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INTEGER         reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT32         reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT64         reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BREAK           reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    PLUS            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MINUS           reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DIVIDE          reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    TIMES           reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    ENTERE_DIVIDE   reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MODULE          reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    EQUALEQUAL      reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    NOT_EQUAL       reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS_EQUAL      reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER_EQUAL   reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER         reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_AND     reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_OR      reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LKEY            reduce using rule 66 (call_function -> IDENTIFIER LPAREN values RPAREN .)


state 121

    (71) values -> values COMMA . value
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 138

state 122

    (83) input -> INPUT LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    FUNC            reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    INPUT           reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    VAR             reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    CONST           reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    FOR             reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    STRING          reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    INTEGER         reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    FLOAT32         reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    FLOAT64         reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    BREAK           reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    $end            reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)
    RKEY            reduce using rule 83 (input -> INPUT LPAREN value RPAREN .)


state 123

    (84) input -> INPUT LPAREN identifiers RPAREN .

    FMT_LIBRARY     reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    FUNC            reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    IDENTIFIER      reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    INPUT           reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    VAR             reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    CONST           reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    FOR             reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    STRING          reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    INTEGER         reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    FLOAT32         reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    FLOAT64         reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    BOOLEAN         reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    BREAK           reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    $end            reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)
    RKEY            reduce using rule 84 (input -> INPUT LPAREN identifiers RPAREN .)


state 124

    (64) identifiers -> identifiers COMMA . identifiers
    (63) identifiers -> . IDENTIFIER
    (64) identifiers -> . identifiers COMMA identifiers

    IDENTIFIER      shift and go to state 91

    identifiers                    shift and go to state 139

state 125

    (31) assignment -> VAR IDENTIFIER data_type EQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 140
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 126

    (32) assignment -> CONST IDENTIFIER data_type EQUAL . usable_value
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    usable_value                   shift and go to state 141
    value                          shift and go to state 17
    call_function                  shift and go to state 69
    arithmetic_operation           shift and go to state 71
    comparation_operation          shift and go to state 25

state 127

    (19) for -> FOR LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    FUNC            reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    INPUT           reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    VAR             reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    CONST           reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    FOR             reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    STRING          reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    INTEGER         reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    FLOAT32         reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    FLOAT64         reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    BREAK           reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    $end            reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)
    RKEY            reduce using rule 19 (for -> FOR LKEY loop_program RKEY .)


state 128

    (20) for -> FOR comparation_operation LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . BREAK
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 142
    BREAK           shift and go to state 32
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    comparation_operation          shift and go to state 25
    program                        shift and go to state 31
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22

state 129

    (21) print -> FMT_LIBRARY DOT PRINTLN LPAREN data . RPAREN
    (27) data -> data . COMMA value
    (28) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 144


state 130

    (29) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FUNC            reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INPUT           reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONST           reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    STRING          reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INTEGER         reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FLOAT32         reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FLOAT64         reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BOOLEAN         reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BREAK           reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    $end            reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RKEY            reduce using rule 29 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)


state 131

    (25) data -> value .

    RPAREN          reduce using rule 25 (data -> value .)
    COMMA           reduce using rule 25 (data -> value .)


state 132

    (26) data -> IDENTIFIER .

    RPAREN          reduce using rule 26 (data -> IDENTIFIER .)
    COMMA           reduce using rule 26 (data -> IDENTIFIER .)


state 133

    (22) print -> FMT_LIBRARY DOT PRINTF LPAREN value . RPAREN
    (23) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA RPAREN
    (24) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA data RPAREN

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 146


state 134

    (30) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FUNC            reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INPUT           reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONST           reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    STRING          reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INTEGER         reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FLOAT32         reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FLOAT64         reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BOOLEAN         reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BREAK           reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    $end            reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RKEY            reduce using rule 30 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)


state 135

    (69) parameter -> IDENTIFIER data_type .

    RPAREN          reduce using rule 69 (parameter -> IDENTIFIER data_type .)
    COMMA           reduce using rule 69 (parameter -> IDENTIFIER data_type .)


state 136

    (65) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN . LKEY program RKEY

    LKEY            shift and go to state 147


state 137

    (68) parameters -> parameters COMMA . parameter
    (69) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 117

    parameter                      shift and go to state 148

state 138

    (71) values -> values COMMA value .

    RPAREN          reduce using rule 71 (values -> values COMMA value .)
    COMMA           reduce using rule 71 (values -> values COMMA value .)


state 139

    (64) identifiers -> identifiers COMMA identifiers .
    (64) identifiers -> identifiers . COMMA identifiers

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 64 (identifiers -> identifiers COMMA identifiers .)
    COMMA           shift and go to state 124

  ! COMMA           [ reduce using rule 64 (identifiers -> identifiers COMMA identifiers .) ]


state 140

    (31) assignment -> VAR IDENTIFIER data_type EQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FLOAT32         reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FLOAT64         reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 31 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64


state 141

    (32) assignment -> CONST IDENTIFIER data_type EQUAL usable_value .
    (49) arithmetic_operation -> usable_value . PLUS usable_value
    (50) arithmetic_operation -> usable_value . MINUS usable_value
    (51) arithmetic_operation -> usable_value . DIVIDE usable_value
    (52) arithmetic_operation -> usable_value . TIMES usable_value
    (53) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> usable_value . MODULE usable_value
    (55) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (56) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (57) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (58) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (59) comparation_operation -> usable_value . LESS usable_value
    (60) comparation_operation -> usable_value . GREATER usable_value
    (61) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (62) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FLOAT32         reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FLOAT64         reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 32 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    DIVIDE          shift and go to state 53
    TIMES           shift and go to state 54
    ENTERE_DIVIDE   shift and go to state 55
    MODULE          shift and go to state 56
    EQUALEQUAL      shift and go to state 57
    NOT_EQUAL       shift and go to state 58
    LESS_EQUAL      shift and go to state 59
    GREATER_EQUAL   shift and go to state 60
    LESS            shift and go to state 61
    GREATER         shift and go to state 62
    LOGICAL_AND     shift and go to state 63
    LOGICAL_OR      shift and go to state 64


state 142

    (20) for -> FOR comparation_operation LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FUNC            reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INPUT           reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    VAR             reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    CONST           reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FOR             reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    STRING          reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INTEGER         reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FLOAT32         reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FLOAT64         reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BREAK           reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    $end            reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    RKEY            reduce using rule 20 (for -> FOR comparation_operation LKEY loop_program RKEY .)


state 143

    (21) print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .

    FMT_LIBRARY     reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FUNC            reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    IDENTIFIER      reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INPUT           reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    VAR             reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CONST           reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FOR             reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    STRING          reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INTEGER         reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FLOAT32         reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FLOAT64         reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BOOLEAN         reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BREAK           reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    $end            reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    RKEY            reduce using rule 21 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)


state 144

    (27) data -> data COMMA . value
    (28) data -> data COMMA . IDENTIFIER
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 150
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 149

state 145

    (22) print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FUNC            reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INPUT           reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    VAR             reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CONST           reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FOR             reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    STRING          reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INTEGER         reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FLOAT32         reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FLOAT64         reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BREAK           reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    $end            reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    RKEY            reduce using rule 22 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)


state 146

    (23) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . RPAREN
    (24) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . data RPAREN
    (25) data -> . value
    (26) data -> . IDENTIFIER
    (27) data -> . data COMMA value
    (28) data -> . data COMMA IDENTIFIER
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN

    RPAREN          shift and go to state 151
    IDENTIFIER      shift and go to state 132
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    value                          shift and go to state 131
    data                           shift and go to state 152

state 147

    (65) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY . program RKEY
    (5) program -> . sentencia
    (6) program -> . loop
    (7) program -> . program sentencia
    (8) program -> . program loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    program                        shift and go to state 153
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 148

    (68) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 68 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 68 (parameters -> parameters COMMA parameter .)


state 149

    (27) data -> data COMMA value .

    RPAREN          reduce using rule 27 (data -> data COMMA value .)
    COMMA           reduce using rule 27 (data -> data COMMA value .)


state 150

    (28) data -> data COMMA IDENTIFIER .

    RPAREN          reduce using rule 28 (data -> data COMMA IDENTIFIER .)
    COMMA           reduce using rule 28 (data -> data COMMA IDENTIFIER .)


state 151

    (23) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .

    FMT_LIBRARY     reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FUNC            reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IDENTIFIER      reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INPUT           reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    VAR             reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONST           reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FOR             reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    STRING          reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INTEGER         reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FLOAT32         reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FLOAT64         reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BOOLEAN         reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BREAK           reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    $end            reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RKEY            reduce using rule 23 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)


state 152

    (24) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data . RPAREN
    (27) data -> data . COMMA value
    (28) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 154
    COMMA           shift and go to state 144


state 153

    (65) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program . RKEY
    (7) program -> program . sentencia
    (8) program -> program . loop
    (10) sentencia -> . print
    (11) sentencia -> . print_withoutvalue
    (12) sentencia -> . def_function
    (13) sentencia -> . call_function
    (14) sentencia -> . input
    (15) sentencia -> . assignment
    (16) sentencia -> . short_assignment
    (17) sentencia -> . arithmetic_operation
    (18) sentencia -> . direct_arithmetic_operation
    (9) loop -> . for
    (21) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (22) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (23) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (24) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (29) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (30) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (65) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY
    (66) call_function -> . IDENTIFIER LPAREN values RPAREN
    (82) input -> . INPUT LPAREN RPAREN
    (83) input -> . INPUT LPAREN value RPAREN
    (84) input -> . INPUT LPAREN identifiers RPAREN
    (31) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (32) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (33) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (49) arithmetic_operation -> . usable_value PLUS usable_value
    (50) arithmetic_operation -> . usable_value MINUS usable_value
    (51) arithmetic_operation -> . usable_value DIVIDE usable_value
    (52) arithmetic_operation -> . usable_value TIMES usable_value
    (53) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (54) arithmetic_operation -> . usable_value MODULE usable_value
    (39) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (40) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (41) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (42) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (43) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (44) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (45) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (46) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (47) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (48) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (19) for -> . FOR LKEY loop_program RKEY
    (20) for -> . FOR comparation_operation LKEY loop_program RKEY
    (34) usable_value -> . value
    (35) usable_value -> . call_function
    (36) usable_value -> . IDENTIFIER
    (37) usable_value -> . arithmetic_operation
    (38) usable_value -> . comparation_operation
    (72) value -> . STRING
    (73) value -> . INTEGER
    (74) value -> . FLOAT32
    (75) value -> . FLOAT64
    (76) value -> . BOOLEAN
    (55) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (56) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (57) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (58) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (59) comparation_operation -> . usable_value LESS usable_value
    (60) comparation_operation -> . usable_value GREATER usable_value
    (61) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (62) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 155
    FMT_LIBRARY     shift and go to state 16
    FUNC            shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INPUT           shift and go to state 20
    VAR             shift and go to state 21
    CONST           shift and go to state 23
    FOR             shift and go to state 24
    STRING          shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT32         shift and go to state 28
    FLOAT64         shift and go to state 29
    BOOLEAN         shift and go to state 30

    sentencia                      shift and go to state 33
    loop                           shift and go to state 34
    print                          shift and go to state 6
    print_withoutvalue             shift and go to state 7
    def_function                   shift and go to state 8
    call_function                  shift and go to state 9
    input                          shift and go to state 10
    assignment                     shift and go to state 11
    short_assignment               shift and go to state 12
    arithmetic_operation           shift and go to state 13
    direct_arithmetic_operation    shift and go to state 14
    for                            shift and go to state 15
    value                          shift and go to state 17
    usable_value                   shift and go to state 22
    comparation_operation          shift and go to state 25

state 154

    (24) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .

    FMT_LIBRARY     reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FUNC            reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    IDENTIFIER      reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INPUT           reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    VAR             reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CONST           reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FOR             reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    STRING          reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INTEGER         reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FLOAT32         reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FLOAT64         reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BOOLEAN         reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BREAK           reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    $end            reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    RKEY            reduce using rule 24 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)


state 155

    (65) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    FUNC            reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    IDENTIFIER      reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    INPUT           reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    VAR             reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    CONST           reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    FOR             reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    STRING          reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    INTEGER         reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    FLOAT32         reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    FLOAT64         reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    BOOLEAN         reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    BREAK           reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    $end            reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)
    RKEY            reduce using rule 65 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY program RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FMT_LIBRARY in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT32 in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT64 in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 2 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 31 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 31 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR in state 31 resolved as shift
WARNING: shift/reduce conflict for CONST in state 31 resolved as shift
WARNING: shift/reduce conflict for FOR in state 31 resolved as shift
WARNING: shift/reduce conflict for STRING in state 31 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 31 resolved as shift
WARNING: shift/reduce conflict for FLOAT32 in state 31 resolved as shift
WARNING: shift/reduce conflict for FLOAT64 in state 31 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 98 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 99 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 99 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 100 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 101 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 102 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 103 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 104 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 106 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 139 resolved as shift
