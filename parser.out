Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    CLASS
    COMMENT
    COMMENT_MULTI
    DEL
    DOUBLE_QUOTE
    ELIF
    ELLIPSIS
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FMT_FORMAT_STRING
    FROM
    GLOBAL
    GREATER_THAN
    HEX_NUMBER
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LESS_THAN
    NONE
    NONLOCAL
    NOT
    NULL
    OR
    PERCENT_D
    PIPE
    RAISE
    RBRACKET
    SCIENTIFIC_NOTATION
    TRUE
    TRY
    WITH
    YIELD

Grammar

Rule 0     S' -> loop_program
Rule 1     loop_program -> program
Rule 2     loop_program -> loop_reserved
Rule 3     loop_program -> loop_program program
Rule 4     loop_program -> loop_program loop_reserved
Rule 5     func_program -> program
Rule 6     func_program -> RETURN
Rule 7     func_program -> RETURN usable_value
Rule 8     func_program -> func_program program
Rule 9     func_program -> func_program RETURN
Rule 10    func_program -> func_program RETURN usable_value
Rule 11    program -> sentencia
Rule 12    program -> loop
Rule 13    program -> program sentencia
Rule 14    program -> program loop
Rule 15    loop_reserved -> BREAK
Rule 16    loop_reserved -> CONTINUE
Rule 17    loop_reserved -> PASS
Rule 18    loop -> for
Rule 19    sentencia -> print
Rule 20    sentencia -> print_withoutvalue
Rule 21    sentencia -> def_function
Rule 22    sentencia -> call_function
Rule 23    sentencia -> input
Rule 24    sentencia -> assignment
Rule 25    sentencia -> short_assignment
Rule 26    sentencia -> arithmetic_operation
Rule 27    sentencia -> direct_arithmetic_operation
Rule 28    sentencia -> if_statement
Rule 29    sentencia -> function_call
Rule 30    sentencia -> switch_statement
Rule 31    for -> FOR LKEY loop_program RKEY
Rule 32    for -> FOR comparation_operation LKEY loop_program RKEY
Rule 33    for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
Rule 34    operator_for -> INCREASE
Rule 35    operator_for -> DECREASE
Rule 36    function_call -> IDENTIFIER LPAREN values RPAREN
Rule 37    if_statement -> IF comparation_operation LKEY program RKEY
Rule 38    if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif
Rule 39    if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
Rule 40    if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
Rule 41    conditions_elseif -> else_if
Rule 42    conditions_elseif -> conditions_elseif else_if
Rule 43    else_if -> ELSE IF comparation_operation LKEY program RKEY
Rule 44    switch_statement -> SWITCH expression LKEY case_clauses RKEY
Rule 45    switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
Rule 46    case_clauses -> case_clause case_clauses
Rule 47    case_clauses -> <empty>
Rule 48    case_clause -> CASE value COLON statements
Rule 49    statements -> statement statements
Rule 50    statements -> <empty>
Rule 51    statement -> print
Rule 52    statement -> print_withoutvalue
Rule 53    statement -> def_function
Rule 54    statement -> call_function
Rule 55    statement -> input
Rule 56    statement -> assignment
Rule 57    statement -> short_assignment
Rule 58    statement -> arithmetic_operation
Rule 59    statement -> direct_arithmetic_operation
Rule 60    statement -> if_statement
Rule 61    statement -> function_call
Rule 62    statement -> switch_statement
Rule 63    statement -> statement
Rule 64    expression -> value
Rule 65    expression -> expression PLUS expression
Rule 66    expression -> expression MINUS expression
Rule 67    expression -> expression TIMES expression
Rule 68    expression -> expression DIVIDE expression
Rule 69    expression -> expression ENTERE_DIVIDE expression
Rule 70    expression -> expression MODULE expression
Rule 71    expression -> expression EQUALEQUAL expression
Rule 72    expression -> expression NOT_EQUAL expression
Rule 73    expression -> expression LESS_EQUAL expression
Rule 74    expression -> expression GREATER_EQUAL expression
Rule 75    expression -> expression LESS expression
Rule 76    expression -> expression GREATER expression
Rule 77    expression -> expression LOGICAL_AND expression
Rule 78    expression -> expression LOGICAL_OR expression
Rule 79    print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
Rule 80    print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
Rule 81    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 82    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
Rule 83    data -> value
Rule 84    data -> IDENTIFIER
Rule 85    data -> data COMMA value
Rule 86    data -> data COMMA IDENTIFIER
Rule 87    print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 88    print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 89    assignment -> VAR IDENTIFIER data_type EQUAL usable_value
Rule 90    assignment -> CONST IDENTIFIER data_type EQUAL usable_value
Rule 91    short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value
Rule 92    usable_value -> value
Rule 93    usable_value -> call_function
Rule 94    usable_value -> IDENTIFIER
Rule 95    usable_value -> arithmetic_operation
Rule 96    usable_value -> comparation_operation
Rule 97    direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value
Rule 98    direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value
Rule 99    direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value
Rule 100   direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value
Rule 101   direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value
Rule 102   direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value
Rule 103   direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value
Rule 104   direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value
Rule 105   direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value
Rule 106   direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value
Rule 107   arithmetic_operation -> usable_value PLUS usable_value
Rule 108   arithmetic_operation -> usable_value MINUS usable_value
Rule 109   arithmetic_operation -> usable_value DIVIDE usable_value
Rule 110   arithmetic_operation -> usable_value TIMES usable_value
Rule 111   arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value
Rule 112   arithmetic_operation -> usable_value MODULE usable_value
Rule 113   comparation_operation -> usable_value EQUALEQUAL usable_value
Rule 114   comparation_operation -> usable_value NOT_EQUAL usable_value
Rule 115   comparation_operation -> usable_value LESS_EQUAL usable_value
Rule 116   comparation_operation -> usable_value GREATER_EQUAL usable_value
Rule 117   comparation_operation -> usable_value LESS usable_value
Rule 118   comparation_operation -> usable_value GREATER usable_value
Rule 119   comparation_operation -> usable_value LOGICAL_AND usable_value
Rule 120   comparation_operation -> usable_value LOGICAL_OR usable_value
Rule 121   identifiers -> IDENTIFIER
Rule 122   identifiers -> identifiers COMMA identifiers
Rule 123   rule_comparation -> IDENTIFIER EQUALEQUAL value
Rule 124   rule_comparation -> IDENTIFIER NOT_EQUAL value
Rule 125   rule_comparation -> IDENTIFIER LESS_EQUAL value
Rule 126   rule_comparation -> IDENTIFIER GREATER_EQUAL value
Rule 127   rule_comparation -> IDENTIFIER LESS value
Rule 128   rule_comparation -> IDENTIFIER GREATER value
Rule 129   rule_comparation -> IDENTIFIER LOGICAL_AND value
Rule 130   rule_comparation -> IDENTIFIER LOGICAL_OR value
Rule 131   condition -> value comparation_operation value
Rule 132   condition -> condition LOGICAL_AND condition
Rule 133   condition -> condition LOGICAL_OR condition
Rule 134   condition -> LOGICAL_NOT condition
Rule 135   def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
Rule 136   def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
Rule 137   call_function -> IDENTIFIER LPAREN values RPAREN
Rule 138   parameters -> parameter
Rule 139   parameters -> parameters COMMA parameter
Rule 140   parameter -> IDENTIFIER data_type
Rule 141   values -> value
Rule 142   values -> values COMMA value
Rule 143   value -> STRING
Rule 144   value -> INTEGER
Rule 145   value -> FLOAT
Rule 146   value -> BOOLEAN
Rule 147   value -> IDENTIFIER
Rule 148   data_type -> INTEGER_DATA_TYPE
Rule 149   data_type -> FLOAT_DATA_TYPE
Rule 150   data_type -> BOOLEAN_DATA_TYPE
Rule 151   data_type -> STRING_DATA_TYPE
Rule 152   input -> INPUT LPAREN RPAREN
Rule 153   input -> INPUT LPAREN value RPAREN
Rule 154   input -> INPUT LPAREN identifiers RPAREN

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 102
BITWISE_OR_EQ        : 103
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 104
BOOLEAN              : 146
BOOLEAN_DATA_TYPE    : 150
BREAK                : 15
CASE                 : 48
CLASS                : 
COLON                : 45 48
COMMA                : 81 82 85 86 122 139 142
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 90
CONTINUE             : 16
DECREASE             : 35
DEFAULT              : 45
DEL                  : 
DIVIDE               : 68 109
DIVIDE_EQ            : 100
DOT                  : 79 80 81 82 87 88
DOUBLE_QUOTE         : 
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 39 40 43
ENTERE_DIVIDE        : 69 111
EQUAL                : 89 90
EQUALEQUAL           : 71 113 123
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT                : 145
FLOAT_DATA_TYPE      : 149
FMT_FORMAT_STRING    : 
FMT_LIBRARY          : 79 80 81 82 87 88
FOR                  : 31 32 33
FROM                 : 
FUNC                 : 135 136
GLOBAL               : 
GREATER              : 76 118 128
GREATER_EQUAL        : 74 116 126
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 33 36 84 86 89 90 91 94 97 98 99 100 101 102 103 104 105 106 121 123 124 125 126 127 128 129 130 135 136 137 140 147
IF                   : 37 38 39 40 43
IMPORT               : 
IN                   : 
INCREASE             : 34
INPUT                : 152 153 154
INTEGER              : 144
INTEGER_DATA_TYPE    : 148
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 105
LESS                 : 75 117 127
LESS_EQUAL           : 73 115 125
LESS_THAN            : 
LKEY                 : 31 32 33 37 38 39 39 40 40 43 44 45 135 136
LOGICAL_AND          : 77 119 129 132
LOGICAL_NOT          : 134
LOGICAL_OR           : 78 120 130 133
LPAREN               : 36 79 80 81 82 87 88 135 136 137 152 153 154
MINUS                : 66 108
MINUS_EQ             : 98
MODULE               : 70 112
MODULO_EQ            : 101
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 72 114 124
NULL                 : 
OR                   : 
PASS                 : 17
PERCENT_D            : 
PIPE                 : 
PLUS                 : 65 107
PLUS_EQ              : 97
PRINTF               : 80 81 82 88
PRINTLN              : 79 87
RAISE                : 
RBRACKET             : 
RETURN               : 6 7 9 10
RIGHT_SHIFT_EQ       : 106
RKEY                 : 31 32 33 37 38 39 39 40 40 43 44 45 135 136
RPAREN               : 36 79 80 81 82 87 88 135 136 137 152 153 154
SCIENTIFIC_NOTATION  : 
SEMICOLON            : 33 33
SHORT_VAR_DECL       : 91
STRING               : 143
STRING_DATA_TYPE     : 151
SWITCH               : 44 45
TIMES                : 67 110
TIMES_EQ             : 99
TRUE                 : 
TRY                  : 
VAR                  : 89
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_operation : 26 58 95
assignment           : 24 56
call_function        : 22 54 93
case_clause          : 46
case_clauses         : 44 45 46
comparation_operation : 32 33 37 38 39 40 43 96 131
condition            : 132 132 133 133 134
conditions_elseif    : 38 40 42
data                 : 79 82 85 86
data_type            : 89 90 136 140
def_function         : 21 53
direct_arithmetic_operation : 27 59
else_if              : 41 42
expression           : 44 45 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78
for                  : 18
func_program         : 8 9 10 135 136
function_call        : 29 61
identifiers          : 122 122 154
if_statement         : 28 60
input                : 23 55
loop                 : 12 14
loop_program         : 3 4 31 32 33 0
loop_reserved        : 2 4
operator_for         : 33
parameter            : 138 139
parameters           : 135 136 139
print                : 19 51
print_withoutvalue   : 20 52
program              : 1 3 5 8 13 14 37 38 39 39 40 40 43
rule_comparation     : 
sentencia            : 11 13
short_assignment     : 25 33 57
statement            : 49 63
statements           : 45 48 49
switch_statement     : 30 62
usable_value         : 7 10 89 90 91 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120
value                : 48 64 80 81 82 83 85 92 97 98 99 100 101 102 103 104 105 106 123 124 125 126 127 128 129 130 131 131 141 142 153
values               : 36 137 142

Parsing method: LALR

state 0

    (0) S' -> . loop_program
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    loop_program                   shift and go to state 1
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 1

    (0) S' -> loop_program .
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 2

    (1) loop_program -> program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 1 (loop_program -> program .)
    CONTINUE        reduce using rule 1 (loop_program -> program .)
    PASS            reduce using rule 1 (loop_program -> program .)
    $end            reduce using rule 1 (loop_program -> program .)
    RKEY            reduce using rule 1 (loop_program -> program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! FMT_LIBRARY     [ reduce using rule 1 (loop_program -> program .) ]
  ! FUNC            [ reduce using rule 1 (loop_program -> program .) ]
  ! IDENTIFIER      [ reduce using rule 1 (loop_program -> program .) ]
  ! INPUT           [ reduce using rule 1 (loop_program -> program .) ]
  ! VAR             [ reduce using rule 1 (loop_program -> program .) ]
  ! CONST           [ reduce using rule 1 (loop_program -> program .) ]
  ! IF              [ reduce using rule 1 (loop_program -> program .) ]
  ! SWITCH          [ reduce using rule 1 (loop_program -> program .) ]
  ! FOR             [ reduce using rule 1 (loop_program -> program .) ]
  ! STRING          [ reduce using rule 1 (loop_program -> program .) ]
  ! INTEGER         [ reduce using rule 1 (loop_program -> program .) ]
  ! FLOAT           [ reduce using rule 1 (loop_program -> program .) ]
  ! BOOLEAN         [ reduce using rule 1 (loop_program -> program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 3

    (2) loop_program -> loop_reserved .

    BREAK           reduce using rule 2 (loop_program -> loop_reserved .)
    CONTINUE        reduce using rule 2 (loop_program -> loop_reserved .)
    PASS            reduce using rule 2 (loop_program -> loop_reserved .)
    FMT_LIBRARY     reduce using rule 2 (loop_program -> loop_reserved .)
    FUNC            reduce using rule 2 (loop_program -> loop_reserved .)
    IDENTIFIER      reduce using rule 2 (loop_program -> loop_reserved .)
    INPUT           reduce using rule 2 (loop_program -> loop_reserved .)
    VAR             reduce using rule 2 (loop_program -> loop_reserved .)
    CONST           reduce using rule 2 (loop_program -> loop_reserved .)
    IF              reduce using rule 2 (loop_program -> loop_reserved .)
    SWITCH          reduce using rule 2 (loop_program -> loop_reserved .)
    FOR             reduce using rule 2 (loop_program -> loop_reserved .)
    STRING          reduce using rule 2 (loop_program -> loop_reserved .)
    INTEGER         reduce using rule 2 (loop_program -> loop_reserved .)
    FLOAT           reduce using rule 2 (loop_program -> loop_reserved .)
    BOOLEAN         reduce using rule 2 (loop_program -> loop_reserved .)
    $end            reduce using rule 2 (loop_program -> loop_reserved .)
    RKEY            reduce using rule 2 (loop_program -> loop_reserved .)


state 4

    (11) program -> sentencia .

    FMT_LIBRARY     reduce using rule 11 (program -> sentencia .)
    FUNC            reduce using rule 11 (program -> sentencia .)
    IDENTIFIER      reduce using rule 11 (program -> sentencia .)
    INPUT           reduce using rule 11 (program -> sentencia .)
    VAR             reduce using rule 11 (program -> sentencia .)
    CONST           reduce using rule 11 (program -> sentencia .)
    IF              reduce using rule 11 (program -> sentencia .)
    SWITCH          reduce using rule 11 (program -> sentencia .)
    FOR             reduce using rule 11 (program -> sentencia .)
    STRING          reduce using rule 11 (program -> sentencia .)
    INTEGER         reduce using rule 11 (program -> sentencia .)
    FLOAT           reduce using rule 11 (program -> sentencia .)
    BOOLEAN         reduce using rule 11 (program -> sentencia .)
    BREAK           reduce using rule 11 (program -> sentencia .)
    CONTINUE        reduce using rule 11 (program -> sentencia .)
    PASS            reduce using rule 11 (program -> sentencia .)
    $end            reduce using rule 11 (program -> sentencia .)
    RKEY            reduce using rule 11 (program -> sentencia .)
    RETURN          reduce using rule 11 (program -> sentencia .)


state 5

    (12) program -> loop .

    FMT_LIBRARY     reduce using rule 12 (program -> loop .)
    FUNC            reduce using rule 12 (program -> loop .)
    IDENTIFIER      reduce using rule 12 (program -> loop .)
    INPUT           reduce using rule 12 (program -> loop .)
    VAR             reduce using rule 12 (program -> loop .)
    CONST           reduce using rule 12 (program -> loop .)
    IF              reduce using rule 12 (program -> loop .)
    SWITCH          reduce using rule 12 (program -> loop .)
    FOR             reduce using rule 12 (program -> loop .)
    STRING          reduce using rule 12 (program -> loop .)
    INTEGER         reduce using rule 12 (program -> loop .)
    FLOAT           reduce using rule 12 (program -> loop .)
    BOOLEAN         reduce using rule 12 (program -> loop .)
    BREAK           reduce using rule 12 (program -> loop .)
    CONTINUE        reduce using rule 12 (program -> loop .)
    PASS            reduce using rule 12 (program -> loop .)
    $end            reduce using rule 12 (program -> loop .)
    RKEY            reduce using rule 12 (program -> loop .)
    RETURN          reduce using rule 12 (program -> loop .)


state 6

    (15) loop_reserved -> BREAK .

    BREAK           reduce using rule 15 (loop_reserved -> BREAK .)
    CONTINUE        reduce using rule 15 (loop_reserved -> BREAK .)
    PASS            reduce using rule 15 (loop_reserved -> BREAK .)
    FMT_LIBRARY     reduce using rule 15 (loop_reserved -> BREAK .)
    FUNC            reduce using rule 15 (loop_reserved -> BREAK .)
    IDENTIFIER      reduce using rule 15 (loop_reserved -> BREAK .)
    INPUT           reduce using rule 15 (loop_reserved -> BREAK .)
    VAR             reduce using rule 15 (loop_reserved -> BREAK .)
    CONST           reduce using rule 15 (loop_reserved -> BREAK .)
    IF              reduce using rule 15 (loop_reserved -> BREAK .)
    SWITCH          reduce using rule 15 (loop_reserved -> BREAK .)
    FOR             reduce using rule 15 (loop_reserved -> BREAK .)
    STRING          reduce using rule 15 (loop_reserved -> BREAK .)
    INTEGER         reduce using rule 15 (loop_reserved -> BREAK .)
    FLOAT           reduce using rule 15 (loop_reserved -> BREAK .)
    BOOLEAN         reduce using rule 15 (loop_reserved -> BREAK .)
    $end            reduce using rule 15 (loop_reserved -> BREAK .)
    RKEY            reduce using rule 15 (loop_reserved -> BREAK .)


state 7

    (16) loop_reserved -> CONTINUE .

    BREAK           reduce using rule 16 (loop_reserved -> CONTINUE .)
    CONTINUE        reduce using rule 16 (loop_reserved -> CONTINUE .)
    PASS            reduce using rule 16 (loop_reserved -> CONTINUE .)
    FMT_LIBRARY     reduce using rule 16 (loop_reserved -> CONTINUE .)
    FUNC            reduce using rule 16 (loop_reserved -> CONTINUE .)
    IDENTIFIER      reduce using rule 16 (loop_reserved -> CONTINUE .)
    INPUT           reduce using rule 16 (loop_reserved -> CONTINUE .)
    VAR             reduce using rule 16 (loop_reserved -> CONTINUE .)
    CONST           reduce using rule 16 (loop_reserved -> CONTINUE .)
    IF              reduce using rule 16 (loop_reserved -> CONTINUE .)
    SWITCH          reduce using rule 16 (loop_reserved -> CONTINUE .)
    FOR             reduce using rule 16 (loop_reserved -> CONTINUE .)
    STRING          reduce using rule 16 (loop_reserved -> CONTINUE .)
    INTEGER         reduce using rule 16 (loop_reserved -> CONTINUE .)
    FLOAT           reduce using rule 16 (loop_reserved -> CONTINUE .)
    BOOLEAN         reduce using rule 16 (loop_reserved -> CONTINUE .)
    $end            reduce using rule 16 (loop_reserved -> CONTINUE .)
    RKEY            reduce using rule 16 (loop_reserved -> CONTINUE .)


state 8

    (17) loop_reserved -> PASS .

    BREAK           reduce using rule 17 (loop_reserved -> PASS .)
    CONTINUE        reduce using rule 17 (loop_reserved -> PASS .)
    PASS            reduce using rule 17 (loop_reserved -> PASS .)
    FMT_LIBRARY     reduce using rule 17 (loop_reserved -> PASS .)
    FUNC            reduce using rule 17 (loop_reserved -> PASS .)
    IDENTIFIER      reduce using rule 17 (loop_reserved -> PASS .)
    INPUT           reduce using rule 17 (loop_reserved -> PASS .)
    VAR             reduce using rule 17 (loop_reserved -> PASS .)
    CONST           reduce using rule 17 (loop_reserved -> PASS .)
    IF              reduce using rule 17 (loop_reserved -> PASS .)
    SWITCH          reduce using rule 17 (loop_reserved -> PASS .)
    FOR             reduce using rule 17 (loop_reserved -> PASS .)
    STRING          reduce using rule 17 (loop_reserved -> PASS .)
    INTEGER         reduce using rule 17 (loop_reserved -> PASS .)
    FLOAT           reduce using rule 17 (loop_reserved -> PASS .)
    BOOLEAN         reduce using rule 17 (loop_reserved -> PASS .)
    $end            reduce using rule 17 (loop_reserved -> PASS .)
    RKEY            reduce using rule 17 (loop_reserved -> PASS .)


state 9

    (19) sentencia -> print .

    FMT_LIBRARY     reduce using rule 19 (sentencia -> print .)
    FUNC            reduce using rule 19 (sentencia -> print .)
    IDENTIFIER      reduce using rule 19 (sentencia -> print .)
    INPUT           reduce using rule 19 (sentencia -> print .)
    VAR             reduce using rule 19 (sentencia -> print .)
    CONST           reduce using rule 19 (sentencia -> print .)
    IF              reduce using rule 19 (sentencia -> print .)
    SWITCH          reduce using rule 19 (sentencia -> print .)
    FOR             reduce using rule 19 (sentencia -> print .)
    STRING          reduce using rule 19 (sentencia -> print .)
    INTEGER         reduce using rule 19 (sentencia -> print .)
    FLOAT           reduce using rule 19 (sentencia -> print .)
    BOOLEAN         reduce using rule 19 (sentencia -> print .)
    BREAK           reduce using rule 19 (sentencia -> print .)
    CONTINUE        reduce using rule 19 (sentencia -> print .)
    PASS            reduce using rule 19 (sentencia -> print .)
    $end            reduce using rule 19 (sentencia -> print .)
    RKEY            reduce using rule 19 (sentencia -> print .)
    RETURN          reduce using rule 19 (sentencia -> print .)


state 10

    (20) sentencia -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 20 (sentencia -> print_withoutvalue .)
    FUNC            reduce using rule 20 (sentencia -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 20 (sentencia -> print_withoutvalue .)
    INPUT           reduce using rule 20 (sentencia -> print_withoutvalue .)
    VAR             reduce using rule 20 (sentencia -> print_withoutvalue .)
    CONST           reduce using rule 20 (sentencia -> print_withoutvalue .)
    IF              reduce using rule 20 (sentencia -> print_withoutvalue .)
    SWITCH          reduce using rule 20 (sentencia -> print_withoutvalue .)
    FOR             reduce using rule 20 (sentencia -> print_withoutvalue .)
    STRING          reduce using rule 20 (sentencia -> print_withoutvalue .)
    INTEGER         reduce using rule 20 (sentencia -> print_withoutvalue .)
    FLOAT           reduce using rule 20 (sentencia -> print_withoutvalue .)
    BOOLEAN         reduce using rule 20 (sentencia -> print_withoutvalue .)
    BREAK           reduce using rule 20 (sentencia -> print_withoutvalue .)
    CONTINUE        reduce using rule 20 (sentencia -> print_withoutvalue .)
    PASS            reduce using rule 20 (sentencia -> print_withoutvalue .)
    $end            reduce using rule 20 (sentencia -> print_withoutvalue .)
    RKEY            reduce using rule 20 (sentencia -> print_withoutvalue .)
    RETURN          reduce using rule 20 (sentencia -> print_withoutvalue .)


state 11

    (21) sentencia -> def_function .

    FMT_LIBRARY     reduce using rule 21 (sentencia -> def_function .)
    FUNC            reduce using rule 21 (sentencia -> def_function .)
    IDENTIFIER      reduce using rule 21 (sentencia -> def_function .)
    INPUT           reduce using rule 21 (sentencia -> def_function .)
    VAR             reduce using rule 21 (sentencia -> def_function .)
    CONST           reduce using rule 21 (sentencia -> def_function .)
    IF              reduce using rule 21 (sentencia -> def_function .)
    SWITCH          reduce using rule 21 (sentencia -> def_function .)
    FOR             reduce using rule 21 (sentencia -> def_function .)
    STRING          reduce using rule 21 (sentencia -> def_function .)
    INTEGER         reduce using rule 21 (sentencia -> def_function .)
    FLOAT           reduce using rule 21 (sentencia -> def_function .)
    BOOLEAN         reduce using rule 21 (sentencia -> def_function .)
    BREAK           reduce using rule 21 (sentencia -> def_function .)
    CONTINUE        reduce using rule 21 (sentencia -> def_function .)
    PASS            reduce using rule 21 (sentencia -> def_function .)
    $end            reduce using rule 21 (sentencia -> def_function .)
    RKEY            reduce using rule 21 (sentencia -> def_function .)
    RETURN          reduce using rule 21 (sentencia -> def_function .)


state 12

    (22) sentencia -> call_function .
    (93) usable_value -> call_function .

    FMT_LIBRARY     reduce using rule 22 (sentencia -> call_function .)
    FUNC            reduce using rule 22 (sentencia -> call_function .)
    IDENTIFIER      reduce using rule 22 (sentencia -> call_function .)
    INPUT           reduce using rule 22 (sentencia -> call_function .)
    VAR             reduce using rule 22 (sentencia -> call_function .)
    CONST           reduce using rule 22 (sentencia -> call_function .)
    IF              reduce using rule 22 (sentencia -> call_function .)
    SWITCH          reduce using rule 22 (sentencia -> call_function .)
    FOR             reduce using rule 22 (sentencia -> call_function .)
    STRING          reduce using rule 22 (sentencia -> call_function .)
    INTEGER         reduce using rule 22 (sentencia -> call_function .)
    FLOAT           reduce using rule 22 (sentencia -> call_function .)
    BOOLEAN         reduce using rule 22 (sentencia -> call_function .)
    BREAK           reduce using rule 22 (sentencia -> call_function .)
    CONTINUE        reduce using rule 22 (sentencia -> call_function .)
    PASS            reduce using rule 22 (sentencia -> call_function .)
    $end            reduce using rule 22 (sentencia -> call_function .)
    RKEY            reduce using rule 22 (sentencia -> call_function .)
    RETURN          reduce using rule 22 (sentencia -> call_function .)
    PLUS            reduce using rule 93 (usable_value -> call_function .)
    MINUS           reduce using rule 93 (usable_value -> call_function .)
    DIVIDE          reduce using rule 93 (usable_value -> call_function .)
    TIMES           reduce using rule 93 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 93 (usable_value -> call_function .)
    MODULE          reduce using rule 93 (usable_value -> call_function .)
    EQUALEQUAL      reduce using rule 93 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 93 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 93 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 93 (usable_value -> call_function .)
    LESS            reduce using rule 93 (usable_value -> call_function .)
    GREATER         reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 93 (usable_value -> call_function .)


state 13

    (23) sentencia -> input .

    FMT_LIBRARY     reduce using rule 23 (sentencia -> input .)
    FUNC            reduce using rule 23 (sentencia -> input .)
    IDENTIFIER      reduce using rule 23 (sentencia -> input .)
    INPUT           reduce using rule 23 (sentencia -> input .)
    VAR             reduce using rule 23 (sentencia -> input .)
    CONST           reduce using rule 23 (sentencia -> input .)
    IF              reduce using rule 23 (sentencia -> input .)
    SWITCH          reduce using rule 23 (sentencia -> input .)
    FOR             reduce using rule 23 (sentencia -> input .)
    STRING          reduce using rule 23 (sentencia -> input .)
    INTEGER         reduce using rule 23 (sentencia -> input .)
    FLOAT           reduce using rule 23 (sentencia -> input .)
    BOOLEAN         reduce using rule 23 (sentencia -> input .)
    BREAK           reduce using rule 23 (sentencia -> input .)
    CONTINUE        reduce using rule 23 (sentencia -> input .)
    PASS            reduce using rule 23 (sentencia -> input .)
    $end            reduce using rule 23 (sentencia -> input .)
    RKEY            reduce using rule 23 (sentencia -> input .)
    RETURN          reduce using rule 23 (sentencia -> input .)


state 14

    (24) sentencia -> assignment .

    FMT_LIBRARY     reduce using rule 24 (sentencia -> assignment .)
    FUNC            reduce using rule 24 (sentencia -> assignment .)
    IDENTIFIER      reduce using rule 24 (sentencia -> assignment .)
    INPUT           reduce using rule 24 (sentencia -> assignment .)
    VAR             reduce using rule 24 (sentencia -> assignment .)
    CONST           reduce using rule 24 (sentencia -> assignment .)
    IF              reduce using rule 24 (sentencia -> assignment .)
    SWITCH          reduce using rule 24 (sentencia -> assignment .)
    FOR             reduce using rule 24 (sentencia -> assignment .)
    STRING          reduce using rule 24 (sentencia -> assignment .)
    INTEGER         reduce using rule 24 (sentencia -> assignment .)
    FLOAT           reduce using rule 24 (sentencia -> assignment .)
    BOOLEAN         reduce using rule 24 (sentencia -> assignment .)
    BREAK           reduce using rule 24 (sentencia -> assignment .)
    CONTINUE        reduce using rule 24 (sentencia -> assignment .)
    PASS            reduce using rule 24 (sentencia -> assignment .)
    $end            reduce using rule 24 (sentencia -> assignment .)
    RKEY            reduce using rule 24 (sentencia -> assignment .)
    RETURN          reduce using rule 24 (sentencia -> assignment .)


state 15

    (25) sentencia -> short_assignment .

    FMT_LIBRARY     reduce using rule 25 (sentencia -> short_assignment .)
    FUNC            reduce using rule 25 (sentencia -> short_assignment .)
    IDENTIFIER      reduce using rule 25 (sentencia -> short_assignment .)
    INPUT           reduce using rule 25 (sentencia -> short_assignment .)
    VAR             reduce using rule 25 (sentencia -> short_assignment .)
    CONST           reduce using rule 25 (sentencia -> short_assignment .)
    IF              reduce using rule 25 (sentencia -> short_assignment .)
    SWITCH          reduce using rule 25 (sentencia -> short_assignment .)
    FOR             reduce using rule 25 (sentencia -> short_assignment .)
    STRING          reduce using rule 25 (sentencia -> short_assignment .)
    INTEGER         reduce using rule 25 (sentencia -> short_assignment .)
    FLOAT           reduce using rule 25 (sentencia -> short_assignment .)
    BOOLEAN         reduce using rule 25 (sentencia -> short_assignment .)
    BREAK           reduce using rule 25 (sentencia -> short_assignment .)
    CONTINUE        reduce using rule 25 (sentencia -> short_assignment .)
    PASS            reduce using rule 25 (sentencia -> short_assignment .)
    $end            reduce using rule 25 (sentencia -> short_assignment .)
    RKEY            reduce using rule 25 (sentencia -> short_assignment .)
    RETURN          reduce using rule 25 (sentencia -> short_assignment .)


state 16

    (26) sentencia -> arithmetic_operation .
    (95) usable_value -> arithmetic_operation .

    FMT_LIBRARY     reduce using rule 26 (sentencia -> arithmetic_operation .)
    FUNC            reduce using rule 26 (sentencia -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 26 (sentencia -> arithmetic_operation .)
    INPUT           reduce using rule 26 (sentencia -> arithmetic_operation .)
    VAR             reduce using rule 26 (sentencia -> arithmetic_operation .)
    CONST           reduce using rule 26 (sentencia -> arithmetic_operation .)
    IF              reduce using rule 26 (sentencia -> arithmetic_operation .)
    SWITCH          reduce using rule 26 (sentencia -> arithmetic_operation .)
    FOR             reduce using rule 26 (sentencia -> arithmetic_operation .)
    STRING          reduce using rule 26 (sentencia -> arithmetic_operation .)
    INTEGER         reduce using rule 26 (sentencia -> arithmetic_operation .)
    FLOAT           reduce using rule 26 (sentencia -> arithmetic_operation .)
    BOOLEAN         reduce using rule 26 (sentencia -> arithmetic_operation .)
    BREAK           reduce using rule 26 (sentencia -> arithmetic_operation .)
    CONTINUE        reduce using rule 26 (sentencia -> arithmetic_operation .)
    PASS            reduce using rule 26 (sentencia -> arithmetic_operation .)
    $end            reduce using rule 26 (sentencia -> arithmetic_operation .)
    RKEY            reduce using rule 26 (sentencia -> arithmetic_operation .)
    RETURN          reduce using rule 26 (sentencia -> arithmetic_operation .)
    PLUS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 95 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 95 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 95 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    EQUALEQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 95 (usable_value -> arithmetic_operation .)


state 17

    (27) sentencia -> direct_arithmetic_operation .

    FMT_LIBRARY     reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FUNC            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    IDENTIFIER      reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    INPUT           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    VAR             reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    CONST           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    IF              reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    SWITCH          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FOR             reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    STRING          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    INTEGER         reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FLOAT           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    BOOLEAN         reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    BREAK           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    CONTINUE        reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    PASS            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    $end            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    RKEY            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    RETURN          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)


state 18

    (28) sentencia -> if_statement .

    FMT_LIBRARY     reduce using rule 28 (sentencia -> if_statement .)
    FUNC            reduce using rule 28 (sentencia -> if_statement .)
    IDENTIFIER      reduce using rule 28 (sentencia -> if_statement .)
    INPUT           reduce using rule 28 (sentencia -> if_statement .)
    VAR             reduce using rule 28 (sentencia -> if_statement .)
    CONST           reduce using rule 28 (sentencia -> if_statement .)
    IF              reduce using rule 28 (sentencia -> if_statement .)
    SWITCH          reduce using rule 28 (sentencia -> if_statement .)
    FOR             reduce using rule 28 (sentencia -> if_statement .)
    STRING          reduce using rule 28 (sentencia -> if_statement .)
    INTEGER         reduce using rule 28 (sentencia -> if_statement .)
    FLOAT           reduce using rule 28 (sentencia -> if_statement .)
    BOOLEAN         reduce using rule 28 (sentencia -> if_statement .)
    BREAK           reduce using rule 28 (sentencia -> if_statement .)
    CONTINUE        reduce using rule 28 (sentencia -> if_statement .)
    PASS            reduce using rule 28 (sentencia -> if_statement .)
    $end            reduce using rule 28 (sentencia -> if_statement .)
    RKEY            reduce using rule 28 (sentencia -> if_statement .)
    RETURN          reduce using rule 28 (sentencia -> if_statement .)


state 19

    (29) sentencia -> function_call .

    FMT_LIBRARY     reduce using rule 29 (sentencia -> function_call .)
    FUNC            reduce using rule 29 (sentencia -> function_call .)
    IDENTIFIER      reduce using rule 29 (sentencia -> function_call .)
    INPUT           reduce using rule 29 (sentencia -> function_call .)
    VAR             reduce using rule 29 (sentencia -> function_call .)
    CONST           reduce using rule 29 (sentencia -> function_call .)
    IF              reduce using rule 29 (sentencia -> function_call .)
    SWITCH          reduce using rule 29 (sentencia -> function_call .)
    FOR             reduce using rule 29 (sentencia -> function_call .)
    STRING          reduce using rule 29 (sentencia -> function_call .)
    INTEGER         reduce using rule 29 (sentencia -> function_call .)
    FLOAT           reduce using rule 29 (sentencia -> function_call .)
    BOOLEAN         reduce using rule 29 (sentencia -> function_call .)
    BREAK           reduce using rule 29 (sentencia -> function_call .)
    CONTINUE        reduce using rule 29 (sentencia -> function_call .)
    PASS            reduce using rule 29 (sentencia -> function_call .)
    $end            reduce using rule 29 (sentencia -> function_call .)
    RKEY            reduce using rule 29 (sentencia -> function_call .)
    RETURN          reduce using rule 29 (sentencia -> function_call .)


state 20

    (30) sentencia -> switch_statement .

    FMT_LIBRARY     reduce using rule 30 (sentencia -> switch_statement .)
    FUNC            reduce using rule 30 (sentencia -> switch_statement .)
    IDENTIFIER      reduce using rule 30 (sentencia -> switch_statement .)
    INPUT           reduce using rule 30 (sentencia -> switch_statement .)
    VAR             reduce using rule 30 (sentencia -> switch_statement .)
    CONST           reduce using rule 30 (sentencia -> switch_statement .)
    IF              reduce using rule 30 (sentencia -> switch_statement .)
    SWITCH          reduce using rule 30 (sentencia -> switch_statement .)
    FOR             reduce using rule 30 (sentencia -> switch_statement .)
    STRING          reduce using rule 30 (sentencia -> switch_statement .)
    INTEGER         reduce using rule 30 (sentencia -> switch_statement .)
    FLOAT           reduce using rule 30 (sentencia -> switch_statement .)
    BOOLEAN         reduce using rule 30 (sentencia -> switch_statement .)
    BREAK           reduce using rule 30 (sentencia -> switch_statement .)
    CONTINUE        reduce using rule 30 (sentencia -> switch_statement .)
    PASS            reduce using rule 30 (sentencia -> switch_statement .)
    $end            reduce using rule 30 (sentencia -> switch_statement .)
    RKEY            reduce using rule 30 (sentencia -> switch_statement .)
    RETURN          reduce using rule 30 (sentencia -> switch_statement .)


state 21

    (18) loop -> for .

    FMT_LIBRARY     reduce using rule 18 (loop -> for .)
    FUNC            reduce using rule 18 (loop -> for .)
    IDENTIFIER      reduce using rule 18 (loop -> for .)
    INPUT           reduce using rule 18 (loop -> for .)
    VAR             reduce using rule 18 (loop -> for .)
    CONST           reduce using rule 18 (loop -> for .)
    IF              reduce using rule 18 (loop -> for .)
    SWITCH          reduce using rule 18 (loop -> for .)
    FOR             reduce using rule 18 (loop -> for .)
    STRING          reduce using rule 18 (loop -> for .)
    INTEGER         reduce using rule 18 (loop -> for .)
    FLOAT           reduce using rule 18 (loop -> for .)
    BOOLEAN         reduce using rule 18 (loop -> for .)
    BREAK           reduce using rule 18 (loop -> for .)
    CONTINUE        reduce using rule 18 (loop -> for .)
    PASS            reduce using rule 18 (loop -> for .)
    $end            reduce using rule 18 (loop -> for .)
    RKEY            reduce using rule 18 (loop -> for .)
    RETURN          reduce using rule 18 (loop -> for .)


state 22

    (79) print -> FMT_LIBRARY . DOT PRINTLN LPAREN data RPAREN
    (80) print -> FMT_LIBRARY . DOT PRINTF LPAREN value RPAREN
    (81) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> FMT_LIBRARY . DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> FMT_LIBRARY . DOT PRINTF LPAREN RPAREN

    DOT             shift and go to state 42


state 23

    (92) usable_value -> value .

    PLUS            reduce using rule 92 (usable_value -> value .)
    MINUS           reduce using rule 92 (usable_value -> value .)
    DIVIDE          reduce using rule 92 (usable_value -> value .)
    TIMES           reduce using rule 92 (usable_value -> value .)
    ENTERE_DIVIDE   reduce using rule 92 (usable_value -> value .)
    MODULE          reduce using rule 92 (usable_value -> value .)
    EQUALEQUAL      reduce using rule 92 (usable_value -> value .)
    NOT_EQUAL       reduce using rule 92 (usable_value -> value .)
    LESS_EQUAL      reduce using rule 92 (usable_value -> value .)
    GREATER_EQUAL   reduce using rule 92 (usable_value -> value .)
    LESS            reduce using rule 92 (usable_value -> value .)
    GREATER         reduce using rule 92 (usable_value -> value .)
    LOGICAL_AND     reduce using rule 92 (usable_value -> value .)
    LOGICAL_OR      reduce using rule 92 (usable_value -> value .)
    FMT_LIBRARY     reduce using rule 92 (usable_value -> value .)
    FUNC            reduce using rule 92 (usable_value -> value .)
    IDENTIFIER      reduce using rule 92 (usable_value -> value .)
    INPUT           reduce using rule 92 (usable_value -> value .)
    VAR             reduce using rule 92 (usable_value -> value .)
    CONST           reduce using rule 92 (usable_value -> value .)
    IF              reduce using rule 92 (usable_value -> value .)
    SWITCH          reduce using rule 92 (usable_value -> value .)
    FOR             reduce using rule 92 (usable_value -> value .)
    STRING          reduce using rule 92 (usable_value -> value .)
    INTEGER         reduce using rule 92 (usable_value -> value .)
    FLOAT           reduce using rule 92 (usable_value -> value .)
    BOOLEAN         reduce using rule 92 (usable_value -> value .)
    BREAK           reduce using rule 92 (usable_value -> value .)
    CONTINUE        reduce using rule 92 (usable_value -> value .)
    PASS            reduce using rule 92 (usable_value -> value .)
    $end            reduce using rule 92 (usable_value -> value .)
    RKEY            reduce using rule 92 (usable_value -> value .)
    SEMICOLON       reduce using rule 92 (usable_value -> value .)
    RETURN          reduce using rule 92 (usable_value -> value .)
    CASE            reduce using rule 92 (usable_value -> value .)
    DEFAULT         reduce using rule 92 (usable_value -> value .)
    LKEY            reduce using rule 92 (usable_value -> value .)


state 24

    (135) def_function -> FUNC . IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC . IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY

    IDENTIFIER      shift and go to state 43


state 25

    (137) call_function -> IDENTIFIER . LPAREN values RPAREN
    (91) short_assignment -> IDENTIFIER . SHORT_VAR_DECL usable_value
    (97) direct_arithmetic_operation -> IDENTIFIER . PLUS_EQ value
    (98) direct_arithmetic_operation -> IDENTIFIER . MINUS_EQ value
    (99) direct_arithmetic_operation -> IDENTIFIER . TIMES_EQ value
    (100) direct_arithmetic_operation -> IDENTIFIER . DIVIDE_EQ value
    (101) direct_arithmetic_operation -> IDENTIFIER . MODULO_EQ value
    (102) direct_arithmetic_operation -> IDENTIFIER . BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> IDENTIFIER . BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> IDENTIFIER . BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> IDENTIFIER . LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> IDENTIFIER . RIGHT_SHIFT_EQ value
    (36) function_call -> IDENTIFIER . LPAREN values RPAREN
    (94) usable_value -> IDENTIFIER .
    (147) value -> IDENTIFIER .

  ! reduce/reduce conflict for PLUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 94 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 44
    SHORT_VAR_DECL  shift and go to state 45
    PLUS_EQ         shift and go to state 46
    MINUS_EQ        shift and go to state 47
    TIMES_EQ        shift and go to state 48
    DIVIDE_EQ       shift and go to state 49
    MODULO_EQ       shift and go to state 50
    BITWISE_AND_EQ  shift and go to state 51
    BITWISE_OR_EQ   shift and go to state 52
    BITWISE_XOR_EQ  shift and go to state 53
    LEFT_SHIFT_EQ   shift and go to state 54
    RIGHT_SHIFT_EQ  shift and go to state 55
    PLUS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 94 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 94 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 94 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 94 (usable_value -> IDENTIFIER .)

  ! PLUS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! EQUALEQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 26

    (152) input -> INPUT . LPAREN RPAREN
    (153) input -> INPUT . LPAREN value RPAREN
    (154) input -> INPUT . LPAREN identifiers RPAREN

    LPAREN          shift and go to state 56


state 27

    (89) assignment -> VAR . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 57


state 28

    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 29

    (90) assignment -> CONST . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 72


state 30

    (37) if_statement -> IF . comparation_operation LKEY program RKEY
    (38) if_statement -> IF . comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> IF . comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF . comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 73
    usable_value                   shift and go to state 74
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77

state 31

    (96) usable_value -> comparation_operation .

    PLUS            reduce using rule 96 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 96 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 96 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 96 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 96 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 96 (usable_value -> comparation_operation .)
    EQUALEQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 96 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 96 (usable_value -> comparation_operation .)
    LESS            reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 96 (usable_value -> comparation_operation .)
    FMT_LIBRARY     reduce using rule 96 (usable_value -> comparation_operation .)
    FUNC            reduce using rule 96 (usable_value -> comparation_operation .)
    IDENTIFIER      reduce using rule 96 (usable_value -> comparation_operation .)
    INPUT           reduce using rule 96 (usable_value -> comparation_operation .)
    VAR             reduce using rule 96 (usable_value -> comparation_operation .)
    CONST           reduce using rule 96 (usable_value -> comparation_operation .)
    IF              reduce using rule 96 (usable_value -> comparation_operation .)
    SWITCH          reduce using rule 96 (usable_value -> comparation_operation .)
    FOR             reduce using rule 96 (usable_value -> comparation_operation .)
    STRING          reduce using rule 96 (usable_value -> comparation_operation .)
    INTEGER         reduce using rule 96 (usable_value -> comparation_operation .)
    FLOAT           reduce using rule 96 (usable_value -> comparation_operation .)
    BOOLEAN         reduce using rule 96 (usable_value -> comparation_operation .)
    BREAK           reduce using rule 96 (usable_value -> comparation_operation .)
    CONTINUE        reduce using rule 96 (usable_value -> comparation_operation .)
    PASS            reduce using rule 96 (usable_value -> comparation_operation .)
    $end            reduce using rule 96 (usable_value -> comparation_operation .)
    RKEY            reduce using rule 96 (usable_value -> comparation_operation .)
    SEMICOLON       reduce using rule 96 (usable_value -> comparation_operation .)
    RETURN          reduce using rule 96 (usable_value -> comparation_operation .)
    CASE            reduce using rule 96 (usable_value -> comparation_operation .)
    DEFAULT         reduce using rule 96 (usable_value -> comparation_operation .)
    LKEY            reduce using rule 96 (usable_value -> comparation_operation .)


state 32

    (44) switch_statement -> SWITCH . expression LKEY case_clauses RKEY
    (45) switch_statement -> SWITCH . expression LKEY case_clauses DEFAULT COLON statements RKEY
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 78
    value                          shift and go to state 79

state 33

    (31) for -> FOR . LKEY loop_program RKEY
    (32) for -> FOR . comparation_operation LKEY loop_program RKEY
    (33) for -> FOR . short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value

    LKEY            shift and go to state 81
    IDENTIFIER      shift and go to state 84
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 82
    short_assignment               shift and go to state 83
    usable_value                   shift and go to state 74
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77

state 34

    (143) value -> STRING .

    PLUS            reduce using rule 143 (value -> STRING .)
    MINUS           reduce using rule 143 (value -> STRING .)
    DIVIDE          reduce using rule 143 (value -> STRING .)
    TIMES           reduce using rule 143 (value -> STRING .)
    ENTERE_DIVIDE   reduce using rule 143 (value -> STRING .)
    MODULE          reduce using rule 143 (value -> STRING .)
    EQUALEQUAL      reduce using rule 143 (value -> STRING .)
    NOT_EQUAL       reduce using rule 143 (value -> STRING .)
    LESS_EQUAL      reduce using rule 143 (value -> STRING .)
    GREATER_EQUAL   reduce using rule 143 (value -> STRING .)
    LESS            reduce using rule 143 (value -> STRING .)
    GREATER         reduce using rule 143 (value -> STRING .)
    LOGICAL_AND     reduce using rule 143 (value -> STRING .)
    LOGICAL_OR      reduce using rule 143 (value -> STRING .)
    LKEY            reduce using rule 143 (value -> STRING .)
    RPAREN          reduce using rule 143 (value -> STRING .)
    COMMA           reduce using rule 143 (value -> STRING .)
    FMT_LIBRARY     reduce using rule 143 (value -> STRING .)
    FUNC            reduce using rule 143 (value -> STRING .)
    IDENTIFIER      reduce using rule 143 (value -> STRING .)
    INPUT           reduce using rule 143 (value -> STRING .)
    VAR             reduce using rule 143 (value -> STRING .)
    CONST           reduce using rule 143 (value -> STRING .)
    IF              reduce using rule 143 (value -> STRING .)
    SWITCH          reduce using rule 143 (value -> STRING .)
    FOR             reduce using rule 143 (value -> STRING .)
    STRING          reduce using rule 143 (value -> STRING .)
    INTEGER         reduce using rule 143 (value -> STRING .)
    FLOAT           reduce using rule 143 (value -> STRING .)
    BOOLEAN         reduce using rule 143 (value -> STRING .)
    BREAK           reduce using rule 143 (value -> STRING .)
    CONTINUE        reduce using rule 143 (value -> STRING .)
    PASS            reduce using rule 143 (value -> STRING .)
    $end            reduce using rule 143 (value -> STRING .)
    RKEY            reduce using rule 143 (value -> STRING .)
    SEMICOLON       reduce using rule 143 (value -> STRING .)
    RETURN          reduce using rule 143 (value -> STRING .)
    CASE            reduce using rule 143 (value -> STRING .)
    DEFAULT         reduce using rule 143 (value -> STRING .)
    COLON           reduce using rule 143 (value -> STRING .)


state 35

    (144) value -> INTEGER .

    PLUS            reduce using rule 144 (value -> INTEGER .)
    MINUS           reduce using rule 144 (value -> INTEGER .)
    DIVIDE          reduce using rule 144 (value -> INTEGER .)
    TIMES           reduce using rule 144 (value -> INTEGER .)
    ENTERE_DIVIDE   reduce using rule 144 (value -> INTEGER .)
    MODULE          reduce using rule 144 (value -> INTEGER .)
    EQUALEQUAL      reduce using rule 144 (value -> INTEGER .)
    NOT_EQUAL       reduce using rule 144 (value -> INTEGER .)
    LESS_EQUAL      reduce using rule 144 (value -> INTEGER .)
    GREATER_EQUAL   reduce using rule 144 (value -> INTEGER .)
    LESS            reduce using rule 144 (value -> INTEGER .)
    GREATER         reduce using rule 144 (value -> INTEGER .)
    LOGICAL_AND     reduce using rule 144 (value -> INTEGER .)
    LOGICAL_OR      reduce using rule 144 (value -> INTEGER .)
    LKEY            reduce using rule 144 (value -> INTEGER .)
    RPAREN          reduce using rule 144 (value -> INTEGER .)
    COMMA           reduce using rule 144 (value -> INTEGER .)
    FMT_LIBRARY     reduce using rule 144 (value -> INTEGER .)
    FUNC            reduce using rule 144 (value -> INTEGER .)
    IDENTIFIER      reduce using rule 144 (value -> INTEGER .)
    INPUT           reduce using rule 144 (value -> INTEGER .)
    VAR             reduce using rule 144 (value -> INTEGER .)
    CONST           reduce using rule 144 (value -> INTEGER .)
    IF              reduce using rule 144 (value -> INTEGER .)
    SWITCH          reduce using rule 144 (value -> INTEGER .)
    FOR             reduce using rule 144 (value -> INTEGER .)
    STRING          reduce using rule 144 (value -> INTEGER .)
    INTEGER         reduce using rule 144 (value -> INTEGER .)
    FLOAT           reduce using rule 144 (value -> INTEGER .)
    BOOLEAN         reduce using rule 144 (value -> INTEGER .)
    BREAK           reduce using rule 144 (value -> INTEGER .)
    CONTINUE        reduce using rule 144 (value -> INTEGER .)
    PASS            reduce using rule 144 (value -> INTEGER .)
    $end            reduce using rule 144 (value -> INTEGER .)
    RKEY            reduce using rule 144 (value -> INTEGER .)
    SEMICOLON       reduce using rule 144 (value -> INTEGER .)
    RETURN          reduce using rule 144 (value -> INTEGER .)
    CASE            reduce using rule 144 (value -> INTEGER .)
    DEFAULT         reduce using rule 144 (value -> INTEGER .)
    COLON           reduce using rule 144 (value -> INTEGER .)


state 36

    (145) value -> FLOAT .

    PLUS            reduce using rule 145 (value -> FLOAT .)
    MINUS           reduce using rule 145 (value -> FLOAT .)
    DIVIDE          reduce using rule 145 (value -> FLOAT .)
    TIMES           reduce using rule 145 (value -> FLOAT .)
    ENTERE_DIVIDE   reduce using rule 145 (value -> FLOAT .)
    MODULE          reduce using rule 145 (value -> FLOAT .)
    EQUALEQUAL      reduce using rule 145 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 145 (value -> FLOAT .)
    LESS_EQUAL      reduce using rule 145 (value -> FLOAT .)
    GREATER_EQUAL   reduce using rule 145 (value -> FLOAT .)
    LESS            reduce using rule 145 (value -> FLOAT .)
    GREATER         reduce using rule 145 (value -> FLOAT .)
    LOGICAL_AND     reduce using rule 145 (value -> FLOAT .)
    LOGICAL_OR      reduce using rule 145 (value -> FLOAT .)
    LKEY            reduce using rule 145 (value -> FLOAT .)
    RPAREN          reduce using rule 145 (value -> FLOAT .)
    COMMA           reduce using rule 145 (value -> FLOAT .)
    FMT_LIBRARY     reduce using rule 145 (value -> FLOAT .)
    FUNC            reduce using rule 145 (value -> FLOAT .)
    IDENTIFIER      reduce using rule 145 (value -> FLOAT .)
    INPUT           reduce using rule 145 (value -> FLOAT .)
    VAR             reduce using rule 145 (value -> FLOAT .)
    CONST           reduce using rule 145 (value -> FLOAT .)
    IF              reduce using rule 145 (value -> FLOAT .)
    SWITCH          reduce using rule 145 (value -> FLOAT .)
    FOR             reduce using rule 145 (value -> FLOAT .)
    STRING          reduce using rule 145 (value -> FLOAT .)
    INTEGER         reduce using rule 145 (value -> FLOAT .)
    FLOAT           reduce using rule 145 (value -> FLOAT .)
    BOOLEAN         reduce using rule 145 (value -> FLOAT .)
    BREAK           reduce using rule 145 (value -> FLOAT .)
    CONTINUE        reduce using rule 145 (value -> FLOAT .)
    PASS            reduce using rule 145 (value -> FLOAT .)
    $end            reduce using rule 145 (value -> FLOAT .)
    RKEY            reduce using rule 145 (value -> FLOAT .)
    SEMICOLON       reduce using rule 145 (value -> FLOAT .)
    RETURN          reduce using rule 145 (value -> FLOAT .)
    CASE            reduce using rule 145 (value -> FLOAT .)
    DEFAULT         reduce using rule 145 (value -> FLOAT .)
    COLON           reduce using rule 145 (value -> FLOAT .)


state 37

    (146) value -> BOOLEAN .

    PLUS            reduce using rule 146 (value -> BOOLEAN .)
    MINUS           reduce using rule 146 (value -> BOOLEAN .)
    DIVIDE          reduce using rule 146 (value -> BOOLEAN .)
    TIMES           reduce using rule 146 (value -> BOOLEAN .)
    ENTERE_DIVIDE   reduce using rule 146 (value -> BOOLEAN .)
    MODULE          reduce using rule 146 (value -> BOOLEAN .)
    EQUALEQUAL      reduce using rule 146 (value -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 146 (value -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 146 (value -> BOOLEAN .)
    GREATER_EQUAL   reduce using rule 146 (value -> BOOLEAN .)
    LESS            reduce using rule 146 (value -> BOOLEAN .)
    GREATER         reduce using rule 146 (value -> BOOLEAN .)
    LOGICAL_AND     reduce using rule 146 (value -> BOOLEAN .)
    LOGICAL_OR      reduce using rule 146 (value -> BOOLEAN .)
    LKEY            reduce using rule 146 (value -> BOOLEAN .)
    RPAREN          reduce using rule 146 (value -> BOOLEAN .)
    COMMA           reduce using rule 146 (value -> BOOLEAN .)
    FMT_LIBRARY     reduce using rule 146 (value -> BOOLEAN .)
    FUNC            reduce using rule 146 (value -> BOOLEAN .)
    IDENTIFIER      reduce using rule 146 (value -> BOOLEAN .)
    INPUT           reduce using rule 146 (value -> BOOLEAN .)
    VAR             reduce using rule 146 (value -> BOOLEAN .)
    CONST           reduce using rule 146 (value -> BOOLEAN .)
    IF              reduce using rule 146 (value -> BOOLEAN .)
    SWITCH          reduce using rule 146 (value -> BOOLEAN .)
    FOR             reduce using rule 146 (value -> BOOLEAN .)
    STRING          reduce using rule 146 (value -> BOOLEAN .)
    INTEGER         reduce using rule 146 (value -> BOOLEAN .)
    FLOAT           reduce using rule 146 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 146 (value -> BOOLEAN .)
    BREAK           reduce using rule 146 (value -> BOOLEAN .)
    CONTINUE        reduce using rule 146 (value -> BOOLEAN .)
    PASS            reduce using rule 146 (value -> BOOLEAN .)
    $end            reduce using rule 146 (value -> BOOLEAN .)
    RKEY            reduce using rule 146 (value -> BOOLEAN .)
    SEMICOLON       reduce using rule 146 (value -> BOOLEAN .)
    RETURN          reduce using rule 146 (value -> BOOLEAN .)
    CASE            reduce using rule 146 (value -> BOOLEAN .)
    DEFAULT         reduce using rule 146 (value -> BOOLEAN .)
    COLON           reduce using rule 146 (value -> BOOLEAN .)


state 38

    (3) loop_program -> loop_program program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 3 (loop_program -> loop_program program .)
    CONTINUE        reduce using rule 3 (loop_program -> loop_program program .)
    PASS            reduce using rule 3 (loop_program -> loop_program program .)
    $end            reduce using rule 3 (loop_program -> loop_program program .)
    RKEY            reduce using rule 3 (loop_program -> loop_program program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! FMT_LIBRARY     [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FUNC            [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! IDENTIFIER      [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INPUT           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! VAR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! CONST           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! IF              [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! SWITCH          [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FOR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! STRING          [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INTEGER         [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FLOAT           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! BOOLEAN         [ reduce using rule 3 (loop_program -> loop_program program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 39

    (4) loop_program -> loop_program loop_reserved .

    BREAK           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    CONTINUE        reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    PASS            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FMT_LIBRARY     reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FUNC            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    IDENTIFIER      reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    INPUT           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    VAR             reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    CONST           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    IF              reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    SWITCH          reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FOR             reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    STRING          reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    INTEGER         reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FLOAT           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    BOOLEAN         reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    $end            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    RKEY            reduce using rule 4 (loop_program -> loop_program loop_reserved .)


state 40

    (13) program -> program sentencia .

    FMT_LIBRARY     reduce using rule 13 (program -> program sentencia .)
    FUNC            reduce using rule 13 (program -> program sentencia .)
    IDENTIFIER      reduce using rule 13 (program -> program sentencia .)
    INPUT           reduce using rule 13 (program -> program sentencia .)
    VAR             reduce using rule 13 (program -> program sentencia .)
    CONST           reduce using rule 13 (program -> program sentencia .)
    IF              reduce using rule 13 (program -> program sentencia .)
    SWITCH          reduce using rule 13 (program -> program sentencia .)
    FOR             reduce using rule 13 (program -> program sentencia .)
    STRING          reduce using rule 13 (program -> program sentencia .)
    INTEGER         reduce using rule 13 (program -> program sentencia .)
    FLOAT           reduce using rule 13 (program -> program sentencia .)
    BOOLEAN         reduce using rule 13 (program -> program sentencia .)
    BREAK           reduce using rule 13 (program -> program sentencia .)
    CONTINUE        reduce using rule 13 (program -> program sentencia .)
    PASS            reduce using rule 13 (program -> program sentencia .)
    $end            reduce using rule 13 (program -> program sentencia .)
    RKEY            reduce using rule 13 (program -> program sentencia .)
    RETURN          reduce using rule 13 (program -> program sentencia .)


state 41

    (14) program -> program loop .

    FMT_LIBRARY     reduce using rule 14 (program -> program loop .)
    FUNC            reduce using rule 14 (program -> program loop .)
    IDENTIFIER      reduce using rule 14 (program -> program loop .)
    INPUT           reduce using rule 14 (program -> program loop .)
    VAR             reduce using rule 14 (program -> program loop .)
    CONST           reduce using rule 14 (program -> program loop .)
    IF              reduce using rule 14 (program -> program loop .)
    SWITCH          reduce using rule 14 (program -> program loop .)
    FOR             reduce using rule 14 (program -> program loop .)
    STRING          reduce using rule 14 (program -> program loop .)
    INTEGER         reduce using rule 14 (program -> program loop .)
    FLOAT           reduce using rule 14 (program -> program loop .)
    BOOLEAN         reduce using rule 14 (program -> program loop .)
    BREAK           reduce using rule 14 (program -> program loop .)
    CONTINUE        reduce using rule 14 (program -> program loop .)
    PASS            reduce using rule 14 (program -> program loop .)
    $end            reduce using rule 14 (program -> program loop .)
    RKEY            reduce using rule 14 (program -> program loop .)
    RETURN          reduce using rule 14 (program -> program loop .)


state 42

    (79) print -> FMT_LIBRARY DOT . PRINTLN LPAREN data RPAREN
    (80) print -> FMT_LIBRARY DOT . PRINTF LPAREN value RPAREN
    (81) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA RPAREN
    (82) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> FMT_LIBRARY DOT . PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> FMT_LIBRARY DOT . PRINTF LPAREN RPAREN

    PRINTLN         shift and go to state 85
    PRINTF          shift and go to state 86


state 43

    (135) def_function -> FUNC IDENTIFIER . LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC IDENTIFIER . LPAREN parameters RPAREN data_type LKEY func_program RKEY

    LPAREN          shift and go to state 87


state 44

    (137) call_function -> IDENTIFIER LPAREN . values RPAREN
    (36) function_call -> IDENTIFIER LPAREN . values RPAREN
    (141) values -> . value
    (142) values -> . values COMMA value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    values                         shift and go to state 88
    value                          shift and go to state 89

state 45

    (91) short_assignment -> IDENTIFIER SHORT_VAR_DECL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 90
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 46

    (97) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 91

state 47

    (98) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 92

state 48

    (99) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 93

state 49

    (100) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 94

state 50

    (101) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 95

state 51

    (102) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 96

state 52

    (103) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 97

state 53

    (104) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 98

state 54

    (105) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 99

state 55

    (106) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 100

state 56

    (152) input -> INPUT LPAREN . RPAREN
    (153) input -> INPUT LPAREN . value RPAREN
    (154) input -> INPUT LPAREN . identifiers RPAREN
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (121) identifiers -> . IDENTIFIER
    (122) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 101
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 104

    value                          shift and go to state 102
    identifiers                    shift and go to state 103

state 57

    (89) assignment -> VAR IDENTIFIER . data_type EQUAL usable_value
    (148) data_type -> . INTEGER_DATA_TYPE
    (149) data_type -> . FLOAT_DATA_TYPE
    (150) data_type -> . BOOLEAN_DATA_TYPE
    (151) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 106
    FLOAT_DATA_TYPE shift and go to state 107
    BOOLEAN_DATA_TYPE shift and go to state 108
    STRING_DATA_TYPE shift and go to state 109

    data_type                      shift and go to state 105

state 58

    (107) arithmetic_operation -> usable_value PLUS . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 110
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 59

    (108) arithmetic_operation -> usable_value MINUS . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 111
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 60

    (109) arithmetic_operation -> usable_value DIVIDE . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 112
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 61

    (110) arithmetic_operation -> usable_value TIMES . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 113
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 62

    (111) arithmetic_operation -> usable_value ENTERE_DIVIDE . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 114
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 63

    (112) arithmetic_operation -> usable_value MODULE . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 115
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 64

    (113) comparation_operation -> usable_value EQUALEQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 116
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 65

    (114) comparation_operation -> usable_value NOT_EQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 117
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 66

    (115) comparation_operation -> usable_value LESS_EQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 118
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 67

    (116) comparation_operation -> usable_value GREATER_EQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 119
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 68

    (117) comparation_operation -> usable_value LESS . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 120
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 69

    (118) comparation_operation -> usable_value GREATER . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 121
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 70

    (119) comparation_operation -> usable_value LOGICAL_AND . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 122
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 71

    (120) comparation_operation -> usable_value LOGICAL_OR . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 123
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 72

    (90) assignment -> CONST IDENTIFIER . data_type EQUAL usable_value
    (148) data_type -> . INTEGER_DATA_TYPE
    (149) data_type -> . FLOAT_DATA_TYPE
    (150) data_type -> . BOOLEAN_DATA_TYPE
    (151) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 106
    FLOAT_DATA_TYPE shift and go to state 107
    BOOLEAN_DATA_TYPE shift and go to state 108
    STRING_DATA_TYPE shift and go to state 109

    data_type                      shift and go to state 124

state 73

    (37) if_statement -> IF comparation_operation . LKEY program RKEY
    (38) if_statement -> IF comparation_operation . LKEY program RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation . LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation . LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (96) usable_value -> comparation_operation .

    LKEY            shift and go to state 125
    EQUALEQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 96 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 96 (usable_value -> comparation_operation .)
    LESS            reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 96 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 96 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 96 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 96 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 96 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 96 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 96 (usable_value -> comparation_operation .)


state 74

    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value

    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63


state 75

    (93) usable_value -> call_function .

    EQUALEQUAL      reduce using rule 93 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 93 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 93 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 93 (usable_value -> call_function .)
    LESS            reduce using rule 93 (usable_value -> call_function .)
    GREATER         reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 93 (usable_value -> call_function .)
    PLUS            reduce using rule 93 (usable_value -> call_function .)
    MINUS           reduce using rule 93 (usable_value -> call_function .)
    DIVIDE          reduce using rule 93 (usable_value -> call_function .)
    TIMES           reduce using rule 93 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 93 (usable_value -> call_function .)
    MODULE          reduce using rule 93 (usable_value -> call_function .)
    FMT_LIBRARY     reduce using rule 93 (usable_value -> call_function .)
    FUNC            reduce using rule 93 (usable_value -> call_function .)
    IDENTIFIER      reduce using rule 93 (usable_value -> call_function .)
    INPUT           reduce using rule 93 (usable_value -> call_function .)
    VAR             reduce using rule 93 (usable_value -> call_function .)
    CONST           reduce using rule 93 (usable_value -> call_function .)
    IF              reduce using rule 93 (usable_value -> call_function .)
    SWITCH          reduce using rule 93 (usable_value -> call_function .)
    FOR             reduce using rule 93 (usable_value -> call_function .)
    STRING          reduce using rule 93 (usable_value -> call_function .)
    INTEGER         reduce using rule 93 (usable_value -> call_function .)
    FLOAT           reduce using rule 93 (usable_value -> call_function .)
    BOOLEAN         reduce using rule 93 (usable_value -> call_function .)
    BREAK           reduce using rule 93 (usable_value -> call_function .)
    CONTINUE        reduce using rule 93 (usable_value -> call_function .)
    PASS            reduce using rule 93 (usable_value -> call_function .)
    $end            reduce using rule 93 (usable_value -> call_function .)
    RKEY            reduce using rule 93 (usable_value -> call_function .)
    SEMICOLON       reduce using rule 93 (usable_value -> call_function .)
    RETURN          reduce using rule 93 (usable_value -> call_function .)
    CASE            reduce using rule 93 (usable_value -> call_function .)
    DEFAULT         reduce using rule 93 (usable_value -> call_function .)
    LKEY            reduce using rule 93 (usable_value -> call_function .)


state 76

    (94) usable_value -> IDENTIFIER .
    (147) value -> IDENTIFIER .
    (137) call_function -> IDENTIFIER . LPAREN values RPAREN

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FMT_LIBRARY resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNC resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for INPUT resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for BREAK resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PASS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for RKEY resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 94 (usable_value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 94 (usable_value -> IDENTIFIER .)
    PLUS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 94 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 94 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 94 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    FMT_LIBRARY     reduce using rule 94 (usable_value -> IDENTIFIER .)
    FUNC            reduce using rule 94 (usable_value -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 94 (usable_value -> IDENTIFIER .)
    INPUT           reduce using rule 94 (usable_value -> IDENTIFIER .)
    VAR             reduce using rule 94 (usable_value -> IDENTIFIER .)
    CONST           reduce using rule 94 (usable_value -> IDENTIFIER .)
    IF              reduce using rule 94 (usable_value -> IDENTIFIER .)
    SWITCH          reduce using rule 94 (usable_value -> IDENTIFIER .)
    FOR             reduce using rule 94 (usable_value -> IDENTIFIER .)
    STRING          reduce using rule 94 (usable_value -> IDENTIFIER .)
    INTEGER         reduce using rule 94 (usable_value -> IDENTIFIER .)
    FLOAT           reduce using rule 94 (usable_value -> IDENTIFIER .)
    BOOLEAN         reduce using rule 94 (usable_value -> IDENTIFIER .)
    BREAK           reduce using rule 94 (usable_value -> IDENTIFIER .)
    CONTINUE        reduce using rule 94 (usable_value -> IDENTIFIER .)
    PASS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    $end            reduce using rule 94 (usable_value -> IDENTIFIER .)
    RKEY            reduce using rule 94 (usable_value -> IDENTIFIER .)
    SEMICOLON       reduce using rule 94 (usable_value -> IDENTIFIER .)
    RETURN          reduce using rule 94 (usable_value -> IDENTIFIER .)
    CASE            reduce using rule 94 (usable_value -> IDENTIFIER .)
    DEFAULT         reduce using rule 94 (usable_value -> IDENTIFIER .)
    LKEY            reduce using rule 94 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 126

  ! EQUALEQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! FMT_LIBRARY     [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! INPUT           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! VAR             [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! SWITCH          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! BOOLEAN         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! BREAK           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! CONTINUE        [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! PASS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! RKEY            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! DEFAULT         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 77

    (95) usable_value -> arithmetic_operation .

    EQUALEQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 95 (usable_value -> arithmetic_operation .)
    PLUS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 95 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 95 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 95 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    FMT_LIBRARY     reduce using rule 95 (usable_value -> arithmetic_operation .)
    FUNC            reduce using rule 95 (usable_value -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 95 (usable_value -> arithmetic_operation .)
    INPUT           reduce using rule 95 (usable_value -> arithmetic_operation .)
    VAR             reduce using rule 95 (usable_value -> arithmetic_operation .)
    CONST           reduce using rule 95 (usable_value -> arithmetic_operation .)
    IF              reduce using rule 95 (usable_value -> arithmetic_operation .)
    SWITCH          reduce using rule 95 (usable_value -> arithmetic_operation .)
    FOR             reduce using rule 95 (usable_value -> arithmetic_operation .)
    STRING          reduce using rule 95 (usable_value -> arithmetic_operation .)
    INTEGER         reduce using rule 95 (usable_value -> arithmetic_operation .)
    FLOAT           reduce using rule 95 (usable_value -> arithmetic_operation .)
    BOOLEAN         reduce using rule 95 (usable_value -> arithmetic_operation .)
    BREAK           reduce using rule 95 (usable_value -> arithmetic_operation .)
    CONTINUE        reduce using rule 95 (usable_value -> arithmetic_operation .)
    PASS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    $end            reduce using rule 95 (usable_value -> arithmetic_operation .)
    RKEY            reduce using rule 95 (usable_value -> arithmetic_operation .)
    SEMICOLON       reduce using rule 95 (usable_value -> arithmetic_operation .)
    RETURN          reduce using rule 95 (usable_value -> arithmetic_operation .)
    CASE            reduce using rule 95 (usable_value -> arithmetic_operation .)
    DEFAULT         reduce using rule 95 (usable_value -> arithmetic_operation .)
    LKEY            reduce using rule 95 (usable_value -> arithmetic_operation .)


state 78

    (44) switch_statement -> SWITCH expression . LKEY case_clauses RKEY
    (45) switch_statement -> SWITCH expression . LKEY case_clauses DEFAULT COLON statements RKEY
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

    LKEY            shift and go to state 127
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141


state 79

    (64) expression -> value .

    LKEY            reduce using rule 64 (expression -> value .)
    PLUS            reduce using rule 64 (expression -> value .)
    MINUS           reduce using rule 64 (expression -> value .)
    TIMES           reduce using rule 64 (expression -> value .)
    DIVIDE          reduce using rule 64 (expression -> value .)
    ENTERE_DIVIDE   reduce using rule 64 (expression -> value .)
    MODULE          reduce using rule 64 (expression -> value .)
    EQUALEQUAL      reduce using rule 64 (expression -> value .)
    NOT_EQUAL       reduce using rule 64 (expression -> value .)
    LESS_EQUAL      reduce using rule 64 (expression -> value .)
    GREATER_EQUAL   reduce using rule 64 (expression -> value .)
    LESS            reduce using rule 64 (expression -> value .)
    GREATER         reduce using rule 64 (expression -> value .)
    LOGICAL_AND     reduce using rule 64 (expression -> value .)
    LOGICAL_OR      reduce using rule 64 (expression -> value .)


state 80

    (147) value -> IDENTIFIER .

    LKEY            reduce using rule 147 (value -> IDENTIFIER .)
    PLUS            reduce using rule 147 (value -> IDENTIFIER .)
    MINUS           reduce using rule 147 (value -> IDENTIFIER .)
    TIMES           reduce using rule 147 (value -> IDENTIFIER .)
    DIVIDE          reduce using rule 147 (value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 147 (value -> IDENTIFIER .)
    MODULE          reduce using rule 147 (value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 147 (value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 147 (value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 147 (value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 147 (value -> IDENTIFIER .)
    LESS            reduce using rule 147 (value -> IDENTIFIER .)
    GREATER         reduce using rule 147 (value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 147 (value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 147 (value -> IDENTIFIER .)
    RPAREN          reduce using rule 147 (value -> IDENTIFIER .)
    COMMA           reduce using rule 147 (value -> IDENTIFIER .)
    FMT_LIBRARY     reduce using rule 147 (value -> IDENTIFIER .)
    FUNC            reduce using rule 147 (value -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 147 (value -> IDENTIFIER .)
    INPUT           reduce using rule 147 (value -> IDENTIFIER .)
    VAR             reduce using rule 147 (value -> IDENTIFIER .)
    CONST           reduce using rule 147 (value -> IDENTIFIER .)
    IF              reduce using rule 147 (value -> IDENTIFIER .)
    SWITCH          reduce using rule 147 (value -> IDENTIFIER .)
    FOR             reduce using rule 147 (value -> IDENTIFIER .)
    STRING          reduce using rule 147 (value -> IDENTIFIER .)
    INTEGER         reduce using rule 147 (value -> IDENTIFIER .)
    FLOAT           reduce using rule 147 (value -> IDENTIFIER .)
    BOOLEAN         reduce using rule 147 (value -> IDENTIFIER .)
    BREAK           reduce using rule 147 (value -> IDENTIFIER .)
    CONTINUE        reduce using rule 147 (value -> IDENTIFIER .)
    PASS            reduce using rule 147 (value -> IDENTIFIER .)
    $end            reduce using rule 147 (value -> IDENTIFIER .)
    RKEY            reduce using rule 147 (value -> IDENTIFIER .)
    RETURN          reduce using rule 147 (value -> IDENTIFIER .)
    CASE            reduce using rule 147 (value -> IDENTIFIER .)
    DEFAULT         reduce using rule 147 (value -> IDENTIFIER .)
    COLON           reduce using rule 147 (value -> IDENTIFIER .)


state 81

    (31) for -> FOR LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    loop_program                   shift and go to state 142
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 82

    (32) for -> FOR comparation_operation . LKEY loop_program RKEY
    (96) usable_value -> comparation_operation .

    LKEY            shift and go to state 143
    EQUALEQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 96 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 96 (usable_value -> comparation_operation .)
    LESS            reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 96 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 96 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 96 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 96 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 96 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 96 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 96 (usable_value -> comparation_operation .)


state 83

    (33) for -> FOR short_assignment . SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY

    SEMICOLON       shift and go to state 144


state 84

    (91) short_assignment -> IDENTIFIER . SHORT_VAR_DECL usable_value
    (94) usable_value -> IDENTIFIER .
    (147) value -> IDENTIFIER .
    (137) call_function -> IDENTIFIER . LPAREN values RPAREN

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 94 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 94 (usable_value -> IDENTIFIER .)
    SHORT_VAR_DECL  shift and go to state 45
    EQUALEQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 94 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 94 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 94 (usable_value -> IDENTIFIER .)
    PLUS            reduce using rule 94 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 94 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 94 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 94 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 94 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 126

  ! EQUALEQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 85

    (79) print -> FMT_LIBRARY DOT PRINTLN . LPAREN data RPAREN
    (87) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 145


state 86

    (80) print -> FMT_LIBRARY DOT PRINTF . LPAREN value RPAREN
    (81) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA RPAREN
    (82) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA data RPAREN
    (88) print_withoutvalue -> FMT_LIBRARY DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 146


state 87

    (135) def_function -> FUNC IDENTIFIER LPAREN . parameters RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC IDENTIFIER LPAREN . parameters RPAREN data_type LKEY func_program RKEY
    (138) parameters -> . parameter
    (139) parameters -> . parameters COMMA parameter
    (140) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 147

    parameters                     shift and go to state 148
    parameter                      shift and go to state 149

state 88

    (137) call_function -> IDENTIFIER LPAREN values . RPAREN
    (36) function_call -> IDENTIFIER LPAREN values . RPAREN
    (142) values -> values . COMMA value

    RPAREN          shift and go to state 150
    COMMA           shift and go to state 151


state 89

    (141) values -> value .

    RPAREN          reduce using rule 141 (values -> value .)
    COMMA           reduce using rule 141 (values -> value .)


state 90

    (91) short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FUNC            reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    IDENTIFIER      reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INPUT           reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    VAR             reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CONST           reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    IF              reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    SWITCH          reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FOR             reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    STRING          reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INTEGER         reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FLOAT           reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BOOLEAN         reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BREAK           reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CONTINUE        reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    PASS            reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    $end            reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    RKEY            reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    SEMICOLON       reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    RETURN          reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CASE            reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    DEFAULT         reduce using rule 91 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 91

    (97) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .

    FMT_LIBRARY     reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FUNC            reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    IDENTIFIER      reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INPUT           reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    VAR             reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CONST           reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    IF              reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    SWITCH          reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FOR             reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    STRING          reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INTEGER         reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FLOAT           reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BOOLEAN         reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BREAK           reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CONTINUE        reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    PASS            reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    $end            reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    RKEY            reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    RETURN          reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CASE            reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    DEFAULT         reduce using rule 97 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)


state 92

    (98) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .

    FMT_LIBRARY     reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FUNC            reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    IDENTIFIER      reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INPUT           reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    VAR             reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CONST           reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    IF              reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    SWITCH          reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FOR             reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    STRING          reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INTEGER         reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FLOAT           reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BOOLEAN         reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BREAK           reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CONTINUE        reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    PASS            reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    $end            reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    RKEY            reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    RETURN          reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CASE            reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    DEFAULT         reduce using rule 98 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)


state 93

    (99) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .

    FMT_LIBRARY     reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FUNC            reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    IDENTIFIER      reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INPUT           reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    VAR             reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CONST           reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    IF              reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    SWITCH          reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FOR             reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    STRING          reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INTEGER         reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FLOAT           reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BOOLEAN         reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BREAK           reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CONTINUE        reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    PASS            reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    $end            reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    RKEY            reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    RETURN          reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CASE            reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    DEFAULT         reduce using rule 99 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)


state 94

    (100) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .

    FMT_LIBRARY     reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FUNC            reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    IDENTIFIER      reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INPUT           reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    VAR             reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CONST           reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    IF              reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    SWITCH          reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FOR             reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    STRING          reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INTEGER         reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FLOAT           reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BOOLEAN         reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BREAK           reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CONTINUE        reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    PASS            reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    $end            reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    RKEY            reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    RETURN          reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CASE            reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    DEFAULT         reduce using rule 100 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)


state 95

    (101) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .

    FMT_LIBRARY     reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FUNC            reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    IDENTIFIER      reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INPUT           reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    VAR             reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CONST           reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    IF              reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    SWITCH          reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FOR             reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    STRING          reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INTEGER         reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FLOAT           reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BOOLEAN         reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BREAK           reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CONTINUE        reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    PASS            reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    $end            reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    RKEY            reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    RETURN          reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CASE            reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    DEFAULT         reduce using rule 101 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)


state 96

    (102) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .

    FMT_LIBRARY     reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FUNC            reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    IDENTIFIER      reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INPUT           reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    VAR             reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CONST           reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    IF              reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    SWITCH          reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FOR             reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    STRING          reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INTEGER         reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FLOAT           reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BOOLEAN         reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BREAK           reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CONTINUE        reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    PASS            reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    $end            reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    RKEY            reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    RETURN          reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CASE            reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    DEFAULT         reduce using rule 102 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)


state 97

    (103) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .

    FMT_LIBRARY     reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FUNC            reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    IDENTIFIER      reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INPUT           reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    VAR             reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CONST           reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    IF              reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    SWITCH          reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FOR             reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    STRING          reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INTEGER         reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FLOAT           reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BOOLEAN         reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BREAK           reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CONTINUE        reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    PASS            reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    $end            reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    RKEY            reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    RETURN          reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CASE            reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    DEFAULT         reduce using rule 103 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)


state 98

    (104) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .

    FMT_LIBRARY     reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FUNC            reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    IDENTIFIER      reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INPUT           reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    VAR             reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CONST           reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    IF              reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    SWITCH          reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FOR             reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    STRING          reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INTEGER         reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FLOAT           reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BOOLEAN         reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BREAK           reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CONTINUE        reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    PASS            reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    $end            reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    RKEY            reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    RETURN          reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CASE            reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    DEFAULT         reduce using rule 104 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)


state 99

    (105) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FUNC            reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INPUT           reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    VAR             reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CONST           reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    IF              reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    SWITCH          reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FOR             reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    STRING          reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INTEGER         reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FLOAT           reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BREAK           reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CONTINUE        reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    PASS            reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    $end            reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    RKEY            reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    RETURN          reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CASE            reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    DEFAULT         reduce using rule 105 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)


state 100

    (106) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FUNC            reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INPUT           reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    VAR             reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CONST           reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    IF              reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    SWITCH          reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FOR             reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    STRING          reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INTEGER         reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FLOAT           reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BREAK           reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CONTINUE        reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    PASS            reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    $end            reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    RKEY            reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    RETURN          reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CASE            reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    DEFAULT         reduce using rule 106 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)


state 101

    (152) input -> INPUT LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    FUNC            reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    VAR             reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    CONST           reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    IF              reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    SWITCH          reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    STRING          reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    INTEGER         reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    FLOAT           reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    BOOLEAN         reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    BREAK           reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    CONTINUE        reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    PASS            reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    RKEY            reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    RETURN          reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    CASE            reduce using rule 152 (input -> INPUT LPAREN RPAREN .)
    DEFAULT         reduce using rule 152 (input -> INPUT LPAREN RPAREN .)


state 102

    (153) input -> INPUT LPAREN value . RPAREN

    RPAREN          shift and go to state 152


state 103

    (154) input -> INPUT LPAREN identifiers . RPAREN
    (122) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 154


state 104

    (147) value -> IDENTIFIER .
    (121) identifiers -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 121 (identifiers -> IDENTIFIER .)
    RPAREN          reduce using rule 121 (identifiers -> IDENTIFIER .)
    COMMA           reduce using rule 121 (identifiers -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 105

    (89) assignment -> VAR IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 155


state 106

    (148) data_type -> INTEGER_DATA_TYPE .

    EQUAL           reduce using rule 148 (data_type -> INTEGER_DATA_TYPE .)
    RPAREN          reduce using rule 148 (data_type -> INTEGER_DATA_TYPE .)
    COMMA           reduce using rule 148 (data_type -> INTEGER_DATA_TYPE .)
    LKEY            reduce using rule 148 (data_type -> INTEGER_DATA_TYPE .)


state 107

    (149) data_type -> FLOAT_DATA_TYPE .

    EQUAL           reduce using rule 149 (data_type -> FLOAT_DATA_TYPE .)
    RPAREN          reduce using rule 149 (data_type -> FLOAT_DATA_TYPE .)
    COMMA           reduce using rule 149 (data_type -> FLOAT_DATA_TYPE .)
    LKEY            reduce using rule 149 (data_type -> FLOAT_DATA_TYPE .)


state 108

    (150) data_type -> BOOLEAN_DATA_TYPE .

    EQUAL           reduce using rule 150 (data_type -> BOOLEAN_DATA_TYPE .)
    RPAREN          reduce using rule 150 (data_type -> BOOLEAN_DATA_TYPE .)
    COMMA           reduce using rule 150 (data_type -> BOOLEAN_DATA_TYPE .)
    LKEY            reduce using rule 150 (data_type -> BOOLEAN_DATA_TYPE .)


state 109

    (151) data_type -> STRING_DATA_TYPE .

    EQUAL           reduce using rule 151 (data_type -> STRING_DATA_TYPE .)
    RPAREN          reduce using rule 151 (data_type -> STRING_DATA_TYPE .)
    COMMA           reduce using rule 151 (data_type -> STRING_DATA_TYPE .)
    LKEY            reduce using rule 151 (data_type -> STRING_DATA_TYPE .)


state 110

    (107) arithmetic_operation -> usable_value PLUS usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    FUNC            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    IDENTIFIER      reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    INPUT           reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    VAR             reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    CONST           reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    IF              reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    SWITCH          reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    FOR             reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    STRING          reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    INTEGER         reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    FLOAT           reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    BOOLEAN         reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    BREAK           reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    CONTINUE        reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    PASS            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    $end            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    RKEY            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    SEMICOLON       reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    RETURN          reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    CASE            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    DEFAULT         reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    LKEY            reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MINUS           [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! TIMES           [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MODULE          [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS            [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER         [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 107 (arithmetic_operation -> usable_value PLUS usable_value .) ]


state 111

    (108) arithmetic_operation -> usable_value MINUS usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    FUNC            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    IDENTIFIER      reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    INPUT           reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    VAR             reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    CONST           reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    IF              reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    SWITCH          reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    FOR             reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    STRING          reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    INTEGER         reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    FLOAT           reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    BOOLEAN         reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    BREAK           reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    CONTINUE        reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    PASS            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    $end            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    RKEY            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    SEMICOLON       reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    RETURN          reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    CASE            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    DEFAULT         reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    LKEY            reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MINUS           [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! TIMES           [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MODULE          [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS            [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER         [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 108 (arithmetic_operation -> usable_value MINUS usable_value .) ]


state 112

    (109) arithmetic_operation -> usable_value DIVIDE usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FUNC            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INPUT           reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    VAR             reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CONST           reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    IF              reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    SWITCH          reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FOR             reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    STRING          reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INTEGER         reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FLOAT           reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BOOLEAN         reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BREAK           reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CONTINUE        reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    PASS            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    $end            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    RKEY            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    SEMICOLON       reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    RETURN          reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CASE            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    DEFAULT         reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    LKEY            reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 109 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]


state 113

    (110) arithmetic_operation -> usable_value TIMES usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    FUNC            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    IDENTIFIER      reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    INPUT           reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    VAR             reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    CONST           reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    IF              reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    SWITCH          reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    FOR             reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    STRING          reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    INTEGER         reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    FLOAT           reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    BOOLEAN         reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    BREAK           reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    CONTINUE        reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    PASS            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    $end            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    RKEY            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    SEMICOLON       reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    RETURN          reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    CASE            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    DEFAULT         reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    LKEY            reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MINUS           [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! DIVIDE          [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! TIMES           [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MODULE          [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS            [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER         [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 110 (arithmetic_operation -> usable_value TIMES usable_value .) ]


state 114

    (111) arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FUNC            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INPUT           reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    VAR             reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CONST           reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    IF              reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    SWITCH          reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FOR             reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    STRING          reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INTEGER         reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FLOAT           reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BOOLEAN         reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BREAK           reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CONTINUE        reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    PASS            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    $end            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    RKEY            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    SEMICOLON       reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    RETURN          reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CASE            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    DEFAULT         reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    LKEY            reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 111 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]


state 115

    (112) arithmetic_operation -> usable_value MODULE usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    FUNC            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    IDENTIFIER      reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    INPUT           reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    VAR             reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    CONST           reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    IF              reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    SWITCH          reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    FOR             reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    STRING          reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    INTEGER         reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    FLOAT           reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    BOOLEAN         reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    BREAK           reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    CONTINUE        reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    PASS            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    $end            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    RKEY            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    SEMICOLON       reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    RETURN          reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    CASE            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    DEFAULT         reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    LKEY            reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MINUS           [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! DIVIDE          [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! TIMES           [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MODULE          [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS            [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER         [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 112 (arithmetic_operation -> usable_value MODULE usable_value .) ]


state 116

    (113) comparation_operation -> usable_value EQUALEQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FUNC            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    IDENTIFIER      reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INPUT           reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    VAR             reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CONST           reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    IF              reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    SWITCH          reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FOR             reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    STRING          reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INTEGER         reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FLOAT           reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BOOLEAN         reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BREAK           reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CONTINUE        reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    PASS            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    $end            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    RKEY            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    SEMICOLON       reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    RETURN          reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CASE            reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    DEFAULT         reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS            [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 113 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]


state 117

    (114) comparation_operation -> usable_value NOT_EQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FUNC            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INPUT           reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    VAR             reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CONST           reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    IF              reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    SWITCH          reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FOR             reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    STRING          reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INTEGER         reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FLOAT           reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BOOLEAN         reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BREAK           reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CONTINUE        reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    PASS            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    $end            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    RKEY            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    SEMICOLON       reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    RETURN          reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CASE            reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    DEFAULT         reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 114 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]


state 118

    (115) comparation_operation -> usable_value LESS_EQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FUNC            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INPUT           reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    VAR             reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CONST           reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    IF              reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    SWITCH          reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FOR             reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    STRING          reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INTEGER         reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FLOAT           reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BOOLEAN         reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BREAK           reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CONTINUE        reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    PASS            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    $end            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    RKEY            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    SEMICOLON       reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    RETURN          reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CASE            reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    DEFAULT         reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 115 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]


state 119

    (116) comparation_operation -> usable_value GREATER_EQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FUNC            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INPUT           reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    VAR             reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CONST           reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    IF              reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    SWITCH          reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FOR             reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    STRING          reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INTEGER         reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FLOAT           reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BOOLEAN         reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BREAK           reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CONTINUE        reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    PASS            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    $end            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    RKEY            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    SEMICOLON       reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    RETURN          reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CASE            reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    DEFAULT         reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 116 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]


state 120

    (117) comparation_operation -> usable_value LESS usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    FMT_LIBRARY     reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    FUNC            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    IDENTIFIER      reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    INPUT           reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    VAR             reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    CONST           reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    IF              reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    SWITCH          reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    FOR             reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    STRING          reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    INTEGER         reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    FLOAT           reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    BOOLEAN         reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    BREAK           reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    CONTINUE        reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    PASS            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    $end            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    RKEY            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    SEMICOLON       reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    RETURN          reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    CASE            reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    DEFAULT         reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MINUS           [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! DIVIDE          [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! TIMES           [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MODULE          [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS            [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER         [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 117 (comparation_operation -> usable_value LESS usable_value .) ]


state 121

    (118) comparation_operation -> usable_value GREATER usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    FMT_LIBRARY     reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    FUNC            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    IDENTIFIER      reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    INPUT           reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    VAR             reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    CONST           reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    IF              reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    SWITCH          reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    FOR             reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    STRING          reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    INTEGER         reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    FLOAT           reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    BOOLEAN         reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    BREAK           reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    CONTINUE        reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    PASS            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    $end            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    RKEY            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    SEMICOLON       reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    RETURN          reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    CASE            reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    DEFAULT         reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MINUS           [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! DIVIDE          [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! TIMES           [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MODULE          [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS            [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER         [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 118 (comparation_operation -> usable_value GREATER usable_value .) ]


state 122

    (119) comparation_operation -> usable_value LOGICAL_AND usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FMT_LIBRARY     reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FUNC            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    IDENTIFIER      reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INPUT           reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    VAR             reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CONST           reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    IF              reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    SWITCH          reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FOR             reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    STRING          reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INTEGER         reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FLOAT           reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BOOLEAN         reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BREAK           reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CONTINUE        reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    PASS            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    $end            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    RKEY            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    SEMICOLON       reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    RETURN          reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CASE            reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    DEFAULT         reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MINUS           [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! DIVIDE          [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! TIMES           [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MODULE          [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS            [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER         [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 119 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]


state 123

    (120) comparation_operation -> usable_value LOGICAL_OR usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FMT_LIBRARY     reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FUNC            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    IDENTIFIER      reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INPUT           reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    VAR             reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CONST           reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    IF              reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    SWITCH          reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FOR             reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    STRING          reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INTEGER         reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FLOAT           reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BOOLEAN         reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BREAK           reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CONTINUE        reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    PASS            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    $end            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    RKEY            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    SEMICOLON       reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    RETURN          reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CASE            reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    DEFAULT         reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71

  ! PLUS            [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MINUS           [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! DIVIDE          [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! TIMES           [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MODULE          [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS            [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER         [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 120 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]


state 124

    (90) assignment -> CONST IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 156


state 125

    (37) if_statement -> IF comparation_operation LKEY . program RKEY
    (38) if_statement -> IF comparation_operation LKEY . program RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY . program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY . program RKEY conditions_elseif ELSE LKEY program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    program                        shift and go to state 157
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 126

    (137) call_function -> IDENTIFIER LPAREN . values RPAREN
    (141) values -> . value
    (142) values -> . values COMMA value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    values                         shift and go to state 158
    value                          shift and go to state 89

state 127

    (44) switch_statement -> SWITCH expression LKEY . case_clauses RKEY
    (45) switch_statement -> SWITCH expression LKEY . case_clauses DEFAULT COLON statements RKEY
    (46) case_clauses -> . case_clause case_clauses
    (47) case_clauses -> .
    (48) case_clause -> . CASE value COLON statements

    RKEY            reduce using rule 47 (case_clauses -> .)
    DEFAULT         reduce using rule 47 (case_clauses -> .)
    CASE            shift and go to state 161

    case_clauses                   shift and go to state 159
    case_clause                    shift and go to state 160

state 128

    (65) expression -> expression PLUS . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 162
    value                          shift and go to state 79

state 129

    (66) expression -> expression MINUS . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 163
    value                          shift and go to state 79

state 130

    (67) expression -> expression TIMES . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 164
    value                          shift and go to state 79

state 131

    (68) expression -> expression DIVIDE . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 165
    value                          shift and go to state 79

state 132

    (69) expression -> expression ENTERE_DIVIDE . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 166
    value                          shift and go to state 79

state 133

    (70) expression -> expression MODULE . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 167
    value                          shift and go to state 79

state 134

    (71) expression -> expression EQUALEQUAL . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 168
    value                          shift and go to state 79

state 135

    (72) expression -> expression NOT_EQUAL . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 169
    value                          shift and go to state 79

state 136

    (73) expression -> expression LESS_EQUAL . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 170
    value                          shift and go to state 79

state 137

    (74) expression -> expression GREATER_EQUAL . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 171
    value                          shift and go to state 79

state 138

    (75) expression -> expression LESS . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 172
    value                          shift and go to state 79

state 139

    (76) expression -> expression GREATER . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 173
    value                          shift and go to state 79

state 140

    (77) expression -> expression LOGICAL_AND . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 174
    value                          shift and go to state 79

state 141

    (78) expression -> expression LOGICAL_OR . expression
    (64) expression -> . value
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression TIMES expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression ENTERE_DIVIDE expression
    (70) expression -> . expression MODULE expression
    (71) expression -> . expression EQUALEQUAL expression
    (72) expression -> . expression NOT_EQUAL expression
    (73) expression -> . expression LESS_EQUAL expression
    (74) expression -> . expression GREATER_EQUAL expression
    (75) expression -> . expression LESS expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LOGICAL_AND expression
    (78) expression -> . expression LOGICAL_OR expression
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    expression                     shift and go to state 175
    value                          shift and go to state 79

state 142

    (31) for -> FOR LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 176
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 143

    (32) for -> FOR comparation_operation LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    loop_program                   shift and go to state 177
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 144

    (33) for -> FOR short_assignment SEMICOLON . comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 178
    usable_value                   shift and go to state 74
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77

state 145

    (79) print -> FMT_LIBRARY DOT PRINTLN LPAREN . data RPAREN
    (87) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN . RPAREN
    (83) data -> . value
    (84) data -> . IDENTIFIER
    (85) data -> . data COMMA value
    (86) data -> . data COMMA IDENTIFIER
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    RPAREN          shift and go to state 180
    IDENTIFIER      shift and go to state 182
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    data                           shift and go to state 179
    value                          shift and go to state 181

state 146

    (80) print -> FMT_LIBRARY DOT PRINTF LPAREN . value RPAREN
    (81) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA RPAREN
    (82) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA data RPAREN
    (88) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN . RPAREN
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    RPAREN          shift and go to state 184
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 183

state 147

    (140) parameter -> IDENTIFIER . data_type
    (148) data_type -> . INTEGER_DATA_TYPE
    (149) data_type -> . FLOAT_DATA_TYPE
    (150) data_type -> . BOOLEAN_DATA_TYPE
    (151) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 106
    FLOAT_DATA_TYPE shift and go to state 107
    BOOLEAN_DATA_TYPE shift and go to state 108
    STRING_DATA_TYPE shift and go to state 109

    data_type                      shift and go to state 185

state 148

    (135) def_function -> FUNC IDENTIFIER LPAREN parameters . RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC IDENTIFIER LPAREN parameters . RPAREN data_type LKEY func_program RKEY
    (139) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 186
    COMMA           shift and go to state 187


state 149

    (138) parameters -> parameter .

    RPAREN          reduce using rule 138 (parameters -> parameter .)
    COMMA           reduce using rule 138 (parameters -> parameter .)


state 150

    (137) call_function -> IDENTIFIER LPAREN values RPAREN .
    (36) function_call -> IDENTIFIER LPAREN values RPAREN .

  ! reduce/reduce conflict for FMT_LIBRARY resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for INPUT resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CONST resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for INTEGER resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FLOAT resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for PASS resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    PLUS            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MINUS           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DIVIDE          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    TIMES           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    ENTERE_DIVIDE   reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MODULE          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    EQUALEQUAL      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    NOT_EQUAL       reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS_EQUAL      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER_EQUAL   reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER         reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_AND     reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_OR      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FMT_LIBRARY     reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FUNC            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    IF              reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    SWITCH          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    STRING          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    INTEGER         reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    BREAK           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CONTINUE        reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    PASS            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    RETURN          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CASE            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    DEFAULT         reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)

  ! FMT_LIBRARY     [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FUNC            [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! IDENTIFIER      [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! INPUT           [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! VAR             [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CONST           [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! IF              [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! SWITCH          [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FOR             [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! STRING          [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! INTEGER         [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FLOAT           [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! BOOLEAN         [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! BREAK           [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CONTINUE        [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! PASS            [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! $end            [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! RKEY            [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! RETURN          [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CASE            [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! DEFAULT         [ reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]


state 151

    (142) values -> values COMMA . value
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 188

state 152

    (153) input -> INPUT LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    FUNC            reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    INPUT           reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    VAR             reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    CONST           reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    IF              reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    SWITCH          reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    FOR             reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    STRING          reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    INTEGER         reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    FLOAT           reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    BREAK           reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    CONTINUE        reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    PASS            reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    $end            reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    RKEY            reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    RETURN          reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    CASE            reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)
    DEFAULT         reduce using rule 153 (input -> INPUT LPAREN value RPAREN .)


state 153

    (154) input -> INPUT LPAREN identifiers RPAREN .

    FMT_LIBRARY     reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    FUNC            reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    IDENTIFIER      reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    INPUT           reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    VAR             reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    CONST           reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    IF              reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    SWITCH          reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    FOR             reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    STRING          reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    INTEGER         reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    FLOAT           reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    BOOLEAN         reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    BREAK           reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    CONTINUE        reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    PASS            reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    $end            reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    RKEY            reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    RETURN          reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    CASE            reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)
    DEFAULT         reduce using rule 154 (input -> INPUT LPAREN identifiers RPAREN .)


state 154

    (122) identifiers -> identifiers COMMA . identifiers
    (121) identifiers -> . IDENTIFIER
    (122) identifiers -> . identifiers COMMA identifiers

    IDENTIFIER      shift and go to state 190

    identifiers                    shift and go to state 189

state 155

    (89) assignment -> VAR IDENTIFIER data_type EQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 191
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 156

    (90) assignment -> CONST IDENTIFIER data_type EQUAL . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    usable_value                   shift and go to state 192
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 157

    (37) if_statement -> IF comparation_operation LKEY program . RKEY
    (38) if_statement -> IF comparation_operation LKEY program . RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY program . RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY program . RKEY conditions_elseif ELSE LKEY program RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 193
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 158

    (137) call_function -> IDENTIFIER LPAREN values . RPAREN
    (142) values -> values . COMMA value

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 151


state 159

    (44) switch_statement -> SWITCH expression LKEY case_clauses . RKEY
    (45) switch_statement -> SWITCH expression LKEY case_clauses . DEFAULT COLON statements RKEY

    RKEY            shift and go to state 195
    DEFAULT         shift and go to state 196


state 160

    (46) case_clauses -> case_clause . case_clauses
    (46) case_clauses -> . case_clause case_clauses
    (47) case_clauses -> .
    (48) case_clause -> . CASE value COLON statements

    RKEY            reduce using rule 47 (case_clauses -> .)
    DEFAULT         reduce using rule 47 (case_clauses -> .)
    CASE            shift and go to state 161

    case_clause                    shift and go to state 160
    case_clauses                   shift and go to state 197

state 161

    (48) case_clause -> CASE . value COLON statements
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    IDENTIFIER      shift and go to state 80

    value                          shift and go to state 198

state 162

    (65) expression -> expression PLUS expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 65 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! MODULE          [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! EQUALEQUAL      [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! LOGICAL_OR      [ reduce using rule 65 (expression -> expression PLUS expression .) ]


state 163

    (66) expression -> expression MINUS expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 66 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! MODULE          [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! EQUALEQUAL      [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! LOGICAL_OR      [ reduce using rule 66 (expression -> expression MINUS expression .) ]


state 164

    (67) expression -> expression TIMES expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 67 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! MODULE          [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! EQUALEQUAL      [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! NOT_EQUAL       [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! LESS_EQUAL      [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! LESS            [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! GREATER         [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! LOGICAL_AND     [ reduce using rule 67 (expression -> expression TIMES expression .) ]
  ! LOGICAL_OR      [ reduce using rule 67 (expression -> expression TIMES expression .) ]


state 165

    (68) expression -> expression DIVIDE expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 68 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! MODULE          [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! EQUALEQUAL      [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! LOGICAL_AND     [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]
  ! LOGICAL_OR      [ reduce using rule 68 (expression -> expression DIVIDE expression .) ]


state 166

    (69) expression -> expression ENTERE_DIVIDE expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! MODULE          [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! EQUALEQUAL      [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! LESS            [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! LOGICAL_AND     [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]
  ! LOGICAL_OR      [ reduce using rule 69 (expression -> expression ENTERE_DIVIDE expression .) ]


state 167

    (70) expression -> expression MODULE expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 70 (expression -> expression MODULE expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! MODULE          [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! EQUALEQUAL      [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! LESS            [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! GREATER         [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! LOGICAL_AND     [ reduce using rule 70 (expression -> expression MODULE expression .) ]
  ! LOGICAL_OR      [ reduce using rule 70 (expression -> expression MODULE expression .) ]


state 168

    (71) expression -> expression EQUALEQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 71 (expression -> expression EQUALEQUAL expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! MODULE          [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! EQUALEQUAL      [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! NOT_EQUAL       [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! LESS            [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! GREATER         [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! LOGICAL_AND     [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]
  ! LOGICAL_OR      [ reduce using rule 71 (expression -> expression EQUALEQUAL expression .) ]


state 169

    (72) expression -> expression NOT_EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 72 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! EQUALEQUAL      [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! NOT_EQUAL       [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS            [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! LOGICAL_AND     [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]
  ! LOGICAL_OR      [ reduce using rule 72 (expression -> expression NOT_EQUAL expression .) ]


state 170

    (73) expression -> expression LESS_EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 73 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! EQUALEQUAL      [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! NOT_EQUAL       [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS            [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! LOGICAL_AND     [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]
  ! LOGICAL_OR      [ reduce using rule 73 (expression -> expression LESS_EQUAL expression .) ]


state 171

    (74) expression -> expression GREATER_EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 74 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! EQUALEQUAL      [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! NOT_EQUAL       [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS            [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! LOGICAL_AND     [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]
  ! LOGICAL_OR      [ reduce using rule 74 (expression -> expression GREATER_EQUAL expression .) ]


state 172

    (75) expression -> expression LESS expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 75 (expression -> expression LESS expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! MODULE          [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! EQUALEQUAL      [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 75 (expression -> expression LESS expression .) ]
  ! LOGICAL_OR      [ reduce using rule 75 (expression -> expression LESS expression .) ]


state 173

    (76) expression -> expression GREATER expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 76 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! MODULE          [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! EQUALEQUAL      [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! NOT_EQUAL       [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! LOGICAL_AND     [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! LOGICAL_OR      [ reduce using rule 76 (expression -> expression GREATER expression .) ]


state 174

    (77) expression -> expression LOGICAL_AND expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 77 (expression -> expression LOGICAL_AND expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! MODULE          [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! EQUALEQUAL      [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS            [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER         [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_AND     [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_OR      [ reduce using rule 77 (expression -> expression LOGICAL_AND expression .) ]


state 175

    (78) expression -> expression LOGICAL_OR expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . TIMES expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . ENTERE_DIVIDE expression
    (70) expression -> expression . MODULE expression
    (71) expression -> expression . EQUALEQUAL expression
    (72) expression -> expression . NOT_EQUAL expression
    (73) expression -> expression . LESS_EQUAL expression
    (74) expression -> expression . GREATER_EQUAL expression
    (75) expression -> expression . LESS expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LOGICAL_AND expression
    (78) expression -> expression . LOGICAL_OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 78 (expression -> expression LOGICAL_OR expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    ENTERE_DIVIDE   shift and go to state 132
    MODULE          shift and go to state 133
    EQUALEQUAL      shift and go to state 134
    NOT_EQUAL       shift and go to state 135
    LESS_EQUAL      shift and go to state 136
    GREATER_EQUAL   shift and go to state 137
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    LOGICAL_AND     shift and go to state 140
    LOGICAL_OR      shift and go to state 141

  ! PLUS            [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! MODULE          [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! EQUALEQUAL      [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS            [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER         [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_OR      [ reduce using rule 78 (expression -> expression LOGICAL_OR expression .) ]


state 176

    (31) for -> FOR LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FUNC            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    INPUT           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    VAR             reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    CONST           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    IF              reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    SWITCH          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FOR             reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    STRING          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    INTEGER         reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FLOAT           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    BREAK           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    PASS            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    $end            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    RKEY            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    RETURN          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)


state 177

    (32) for -> FOR comparation_operation LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 199
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 178

    (33) for -> FOR short_assignment SEMICOLON comparation_operation . SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (96) usable_value -> comparation_operation .

    SEMICOLON       shift and go to state 200
    EQUALEQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 96 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 96 (usable_value -> comparation_operation .)
    LESS            reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 96 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 96 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 96 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 96 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 96 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 96 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 96 (usable_value -> comparation_operation .)


state 179

    (79) print -> FMT_LIBRARY DOT PRINTLN LPAREN data . RPAREN
    (85) data -> data . COMMA value
    (86) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 201
    COMMA           shift and go to state 202


state 180

    (87) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FUNC            reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INPUT           reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONST           reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IF              reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    SWITCH          reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    STRING          reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INTEGER         reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FLOAT           reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BOOLEAN         reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BREAK           reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONTINUE        reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    PASS            reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    $end            reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RKEY            reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RETURN          reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CASE            reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    DEFAULT         reduce using rule 87 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)


state 181

    (83) data -> value .

    RPAREN          reduce using rule 83 (data -> value .)
    COMMA           reduce using rule 83 (data -> value .)


state 182

    (84) data -> IDENTIFIER .
    (147) value -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 84 (data -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 84 (data -> IDENTIFIER .)
    RPAREN          reduce using rule 84 (data -> IDENTIFIER .)
    COMMA           reduce using rule 84 (data -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 183

    (80) print -> FMT_LIBRARY DOT PRINTF LPAREN value . RPAREN
    (81) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA RPAREN
    (82) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA data RPAREN

    RPAREN          shift and go to state 203
    COMMA           shift and go to state 204


state 184

    (88) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FUNC            reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INPUT           reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONST           reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IF              reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    SWITCH          reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    STRING          reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INTEGER         reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FLOAT           reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BOOLEAN         reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BREAK           reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONTINUE        reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    PASS            reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    $end            reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RKEY            reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RETURN          reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CASE            reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    DEFAULT         reduce using rule 88 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)


state 185

    (140) parameter -> IDENTIFIER data_type .

    RPAREN          reduce using rule 140 (parameter -> IDENTIFIER data_type .)
    COMMA           reduce using rule 140 (parameter -> IDENTIFIER data_type .)


state 186

    (135) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN . LKEY func_program RKEY
    (136) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN . data_type LKEY func_program RKEY
    (148) data_type -> . INTEGER_DATA_TYPE
    (149) data_type -> . FLOAT_DATA_TYPE
    (150) data_type -> . BOOLEAN_DATA_TYPE
    (151) data_type -> . STRING_DATA_TYPE

    LKEY            shift and go to state 205
    INTEGER_DATA_TYPE shift and go to state 106
    FLOAT_DATA_TYPE shift and go to state 107
    BOOLEAN_DATA_TYPE shift and go to state 108
    STRING_DATA_TYPE shift and go to state 109

    data_type                      shift and go to state 206

state 187

    (139) parameters -> parameters COMMA . parameter
    (140) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 147

    parameter                      shift and go to state 207

state 188

    (142) values -> values COMMA value .

    RPAREN          reduce using rule 142 (values -> values COMMA value .)
    COMMA           reduce using rule 142 (values -> values COMMA value .)


state 189

    (122) identifiers -> identifiers COMMA identifiers .
    (122) identifiers -> identifiers . COMMA identifiers

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 122 (identifiers -> identifiers COMMA identifiers .)
    COMMA           shift and go to state 154

  ! COMMA           [ reduce using rule 122 (identifiers -> identifiers COMMA identifiers .) ]


state 190

    (121) identifiers -> IDENTIFIER .

    COMMA           reduce using rule 121 (identifiers -> IDENTIFIER .)
    RPAREN          reduce using rule 121 (identifiers -> IDENTIFIER .)


state 191

    (89) assignment -> VAR IDENTIFIER data_type EQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    IF              reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    SWITCH          reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FLOAT           reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CONTINUE        reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    PASS            reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    RETURN          reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CASE            reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    DEFAULT         reduce using rule 89 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 192

    (90) assignment -> CONST IDENTIFIER data_type EQUAL usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    IF              reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    SWITCH          reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FLOAT           reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CONTINUE        reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    PASS            reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    RETURN          reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CASE            reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    DEFAULT         reduce using rule 90 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 193

    (37) if_statement -> IF comparation_operation LKEY program RKEY .
    (38) if_statement -> IF comparation_operation LKEY program RKEY . conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY program RKEY . ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY program RKEY . conditions_elseif ELSE LKEY program RKEY
    (41) conditions_elseif -> . else_if
    (42) conditions_elseif -> . conditions_elseif else_if
    (43) else_if -> . ELSE IF comparation_operation LKEY program RKEY

    FMT_LIBRARY     reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FUNC            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    IDENTIFIER      reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    INPUT           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    VAR             reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CONST           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    IF              reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    SWITCH          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FOR             reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    STRING          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    INTEGER         reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FLOAT           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    BOOLEAN         reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    BREAK           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CONTINUE        reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    PASS            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    $end            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    RKEY            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    RETURN          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CASE            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    DEFAULT         reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    ELSE            shift and go to state 209

    conditions_elseif              shift and go to state 208
    else_if                        shift and go to state 210

state 194

    (137) call_function -> IDENTIFIER LPAREN values RPAREN .

    EQUALEQUAL      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    NOT_EQUAL       reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS_EQUAL      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER_EQUAL   reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER         reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_AND     reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_OR      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    PLUS            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MINUS           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DIVIDE          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    TIMES           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    ENTERE_DIVIDE   reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MODULE          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FMT_LIBRARY     reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FUNC            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IF              reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    SWITCH          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    STRING          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INTEGER         reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BREAK           reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONTINUE        reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    PASS            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    SEMICOLON       reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RETURN          reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CASE            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DEFAULT         reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LKEY            reduce using rule 137 (call_function -> IDENTIFIER LPAREN values RPAREN .)


state 195

    (44) switch_statement -> SWITCH expression LKEY case_clauses RKEY .

    FMT_LIBRARY     reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    FUNC            reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    IDENTIFIER      reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    INPUT           reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    VAR             reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    CONST           reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    IF              reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    SWITCH          reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    FOR             reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    STRING          reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    INTEGER         reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    FLOAT           reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    BOOLEAN         reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    BREAK           reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    CONTINUE        reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    PASS            reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    $end            reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    RKEY            reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    RETURN          reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    CASE            reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)
    DEFAULT         reduce using rule 44 (switch_statement -> SWITCH expression LKEY case_clauses RKEY .)


state 196

    (45) switch_statement -> SWITCH expression LKEY case_clauses DEFAULT . COLON statements RKEY

    COLON           shift and go to state 211


state 197

    (46) case_clauses -> case_clause case_clauses .

    RKEY            reduce using rule 46 (case_clauses -> case_clause case_clauses .)
    DEFAULT         reduce using rule 46 (case_clauses -> case_clause case_clauses .)


state 198

    (48) case_clause -> CASE value . COLON statements

    COLON           shift and go to state 212


state 199

    (32) for -> FOR comparation_operation LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FUNC            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INPUT           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    VAR             reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    CONST           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    IF              reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    SWITCH          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FOR             reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    STRING          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INTEGER         reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FLOAT           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BREAK           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    PASS            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    $end            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    RKEY            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    RETURN          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)


state 200

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON . IDENTIFIER operator_for LKEY loop_program RKEY

    IDENTIFIER      shift and go to state 213


state 201

    (79) print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .

    FMT_LIBRARY     reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FUNC            reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    IDENTIFIER      reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INPUT           reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    VAR             reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CONST           reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    IF              reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    SWITCH          reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FOR             reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    STRING          reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INTEGER         reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FLOAT           reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BOOLEAN         reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BREAK           reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CONTINUE        reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    PASS            reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    $end            reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    RKEY            reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    RETURN          reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CASE            reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    DEFAULT         reduce using rule 79 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)


state 202

    (85) data -> data COMMA . value
    (86) data -> data COMMA . IDENTIFIER
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    IDENTIFIER      shift and go to state 215
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    value                          shift and go to state 214

state 203

    (80) print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FUNC            reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INPUT           reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    VAR             reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CONST           reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    IF              reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    SWITCH          reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FOR             reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    STRING          reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INTEGER         reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FLOAT           reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BREAK           reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CONTINUE        reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    PASS            reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    $end            reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    RKEY            reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    RETURN          reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CASE            reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    DEFAULT         reduce using rule 80 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)


state 204

    (81) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . RPAREN
    (82) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . data RPAREN
    (83) data -> . value
    (84) data -> . IDENTIFIER
    (85) data -> . data COMMA value
    (86) data -> . data COMMA IDENTIFIER
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER

    RPAREN          shift and go to state 216
    IDENTIFIER      shift and go to state 182
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    value                          shift and go to state 181
    data                           shift and go to state 217

state 205

    (135) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 220
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    func_program                   shift and go to state 218
    program                        shift and go to state 219
    usable_value                   shift and go to state 28
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 31

state 206

    (136) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type . LKEY func_program RKEY

    LKEY            shift and go to state 221


state 207

    (139) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 139 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 139 (parameters -> parameters COMMA parameter .)


state 208

    (38) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .
    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif . ELSE LKEY program RKEY
    (42) conditions_elseif -> conditions_elseif . else_if
    (43) else_if -> . ELSE IF comparation_operation LKEY program RKEY

    FMT_LIBRARY     reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FUNC            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    IDENTIFIER      reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    INPUT           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    VAR             reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CONST           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    IF              reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    SWITCH          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FOR             reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    STRING          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    INTEGER         reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FLOAT           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    BOOLEAN         reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    BREAK           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CONTINUE        reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    PASS            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    $end            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    RKEY            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    RETURN          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CASE            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    DEFAULT         reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    ELSE            shift and go to state 222

    else_if                        shift and go to state 223

state 209

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE . LKEY program RKEY
    (43) else_if -> ELSE . IF comparation_operation LKEY program RKEY

    LKEY            shift and go to state 225
    IF              shift and go to state 224


state 210

    (41) conditions_elseif -> else_if .

    ELSE            reduce using rule 41 (conditions_elseif -> else_if .)
    FMT_LIBRARY     reduce using rule 41 (conditions_elseif -> else_if .)
    FUNC            reduce using rule 41 (conditions_elseif -> else_if .)
    IDENTIFIER      reduce using rule 41 (conditions_elseif -> else_if .)
    INPUT           reduce using rule 41 (conditions_elseif -> else_if .)
    VAR             reduce using rule 41 (conditions_elseif -> else_if .)
    CONST           reduce using rule 41 (conditions_elseif -> else_if .)
    IF              reduce using rule 41 (conditions_elseif -> else_if .)
    SWITCH          reduce using rule 41 (conditions_elseif -> else_if .)
    FOR             reduce using rule 41 (conditions_elseif -> else_if .)
    STRING          reduce using rule 41 (conditions_elseif -> else_if .)
    INTEGER         reduce using rule 41 (conditions_elseif -> else_if .)
    FLOAT           reduce using rule 41 (conditions_elseif -> else_if .)
    BOOLEAN         reduce using rule 41 (conditions_elseif -> else_if .)
    BREAK           reduce using rule 41 (conditions_elseif -> else_if .)
    CONTINUE        reduce using rule 41 (conditions_elseif -> else_if .)
    PASS            reduce using rule 41 (conditions_elseif -> else_if .)
    $end            reduce using rule 41 (conditions_elseif -> else_if .)
    RKEY            reduce using rule 41 (conditions_elseif -> else_if .)
    RETURN          reduce using rule 41 (conditions_elseif -> else_if .)
    CASE            reduce using rule 41 (conditions_elseif -> else_if .)
    DEFAULT         reduce using rule 41 (conditions_elseif -> else_if .)


state 211

    (45) switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON . statements RKEY
    (49) statements -> . statement statements
    (50) statements -> .
    (51) statement -> . print
    (52) statement -> . print_withoutvalue
    (53) statement -> . def_function
    (54) statement -> . call_function
    (55) statement -> . input
    (56) statement -> . assignment
    (57) statement -> . short_assignment
    (58) statement -> . arithmetic_operation
    (59) statement -> . direct_arithmetic_operation
    (60) statement -> . if_statement
    (61) statement -> . function_call
    (62) statement -> . switch_statement
    (63) statement -> . statement
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            reduce using rule 50 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    statements                     shift and go to state 226
    statement                      shift and go to state 227
    print                          shift and go to state 228
    print_withoutvalue             shift and go to state 229
    def_function                   shift and go to state 230
    call_function                  shift and go to state 231
    input                          shift and go to state 232
    assignment                     shift and go to state 233
    short_assignment               shift and go to state 234
    arithmetic_operation           shift and go to state 235
    direct_arithmetic_operation    shift and go to state 236
    if_statement                   shift and go to state 237
    function_call                  shift and go to state 238
    switch_statement               shift and go to state 239
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 212

    (48) case_clause -> CASE value COLON . statements
    (49) statements -> . statement statements
    (50) statements -> .
    (51) statement -> . print
    (52) statement -> . print_withoutvalue
    (53) statement -> . def_function
    (54) statement -> . call_function
    (55) statement -> . input
    (56) statement -> . assignment
    (57) statement -> . short_assignment
    (58) statement -> . arithmetic_operation
    (59) statement -> . direct_arithmetic_operation
    (60) statement -> . if_statement
    (61) statement -> . function_call
    (62) statement -> . switch_statement
    (63) statement -> . statement
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    CASE            reduce using rule 50 (statements -> .)
    RKEY            reduce using rule 50 (statements -> .)
    DEFAULT         reduce using rule 50 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    value                          shift and go to state 23
    statements                     shift and go to state 240
    statement                      shift and go to state 227
    print                          shift and go to state 228
    print_withoutvalue             shift and go to state 229
    def_function                   shift and go to state 230
    call_function                  shift and go to state 231
    input                          shift and go to state 232
    assignment                     shift and go to state 233
    short_assignment               shift and go to state 234
    arithmetic_operation           shift and go to state 235
    direct_arithmetic_operation    shift and go to state 236
    if_statement                   shift and go to state 237
    function_call                  shift and go to state 238
    switch_statement               shift and go to state 239
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 213

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER . operator_for LKEY loop_program RKEY
    (34) operator_for -> . INCREASE
    (35) operator_for -> . DECREASE

    INCREASE        shift and go to state 242
    DECREASE        shift and go to state 243

    operator_for                   shift and go to state 241

state 214

    (85) data -> data COMMA value .

    RPAREN          reduce using rule 85 (data -> data COMMA value .)
    COMMA           reduce using rule 85 (data -> data COMMA value .)


state 215

    (86) data -> data COMMA IDENTIFIER .
    (147) value -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 86 (data -> data COMMA IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 86 (data -> data COMMA IDENTIFIER .)
    RPAREN          reduce using rule 86 (data -> data COMMA IDENTIFIER .)
    COMMA           reduce using rule 86 (data -> data COMMA IDENTIFIER .)

  ! RPAREN          [ reduce using rule 147 (value -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 147 (value -> IDENTIFIER .) ]


state 216

    (81) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .

    FMT_LIBRARY     reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FUNC            reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IDENTIFIER      reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INPUT           reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    VAR             reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONST           reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IF              reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    SWITCH          reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FOR             reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    STRING          reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INTEGER         reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FLOAT           reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BOOLEAN         reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BREAK           reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONTINUE        reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    PASS            reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    $end            reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RKEY            reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RETURN          reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CASE            reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    DEFAULT         reduce using rule 81 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)


state 217

    (82) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data . RPAREN
    (85) data -> data . COMMA value
    (86) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 244
    COMMA           shift and go to state 202


state 218

    (135) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 245
    RETURN          shift and go to state 247
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    program                        shift and go to state 246
    usable_value                   shift and go to state 28
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 31

state 219

    (5) func_program -> program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 5 (func_program -> program .)
    RETURN          reduce using rule 5 (func_program -> program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! FMT_LIBRARY     [ reduce using rule 5 (func_program -> program .) ]
  ! FUNC            [ reduce using rule 5 (func_program -> program .) ]
  ! IDENTIFIER      [ reduce using rule 5 (func_program -> program .) ]
  ! INPUT           [ reduce using rule 5 (func_program -> program .) ]
  ! VAR             [ reduce using rule 5 (func_program -> program .) ]
  ! CONST           [ reduce using rule 5 (func_program -> program .) ]
  ! IF              [ reduce using rule 5 (func_program -> program .) ]
  ! SWITCH          [ reduce using rule 5 (func_program -> program .) ]
  ! FOR             [ reduce using rule 5 (func_program -> program .) ]
  ! STRING          [ reduce using rule 5 (func_program -> program .) ]
  ! INTEGER         [ reduce using rule 5 (func_program -> program .) ]
  ! FLOAT           [ reduce using rule 5 (func_program -> program .) ]
  ! BOOLEAN         [ reduce using rule 5 (func_program -> program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 220

    (6) func_program -> RETURN .
    (7) func_program -> RETURN . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 6 (func_program -> RETURN .)
    RETURN          reduce using rule 6 (func_program -> RETURN .)
    FMT_LIBRARY     reduce using rule 6 (func_program -> RETURN .)
    FUNC            reduce using rule 6 (func_program -> RETURN .)
    INPUT           reduce using rule 6 (func_program -> RETURN .)
    VAR             reduce using rule 6 (func_program -> RETURN .)
    CONST           reduce using rule 6 (func_program -> RETURN .)
    IF              reduce using rule 6 (func_program -> RETURN .)
    SWITCH          reduce using rule 6 (func_program -> RETURN .)
    FOR             reduce using rule 6 (func_program -> RETURN .)
    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! IDENTIFIER      [ reduce using rule 6 (func_program -> RETURN .) ]
  ! STRING          [ reduce using rule 6 (func_program -> RETURN .) ]
  ! INTEGER         [ reduce using rule 6 (func_program -> RETURN .) ]
  ! FLOAT           [ reduce using rule 6 (func_program -> RETURN .) ]
  ! BOOLEAN         [ reduce using rule 6 (func_program -> RETURN .) ]

    usable_value                   shift and go to state 248
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 221

    (136) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 220
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    func_program                   shift and go to state 249
    program                        shift and go to state 219
    usable_value                   shift and go to state 28
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 31

state 222

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE . LKEY program RKEY
    (43) else_if -> ELSE . IF comparation_operation LKEY program RKEY

    LKEY            shift and go to state 250
    IF              shift and go to state 224


state 223

    (42) conditions_elseif -> conditions_elseif else_if .

    ELSE            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FMT_LIBRARY     reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FUNC            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    IDENTIFIER      reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    INPUT           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    VAR             reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CONST           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    IF              reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    SWITCH          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FOR             reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    STRING          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    INTEGER         reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FLOAT           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    BOOLEAN         reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    BREAK           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CONTINUE        reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    PASS            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    $end            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    RKEY            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    RETURN          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CASE            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    DEFAULT         reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)


state 224

    (43) else_if -> ELSE IF . comparation_operation LKEY program RKEY
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 251
    usable_value                   shift and go to state 74
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77

state 225

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    program                        shift and go to state 252
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 226

    (45) switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements . RKEY

    RKEY            shift and go to state 253


state 227

    (49) statements -> statement . statements
    (63) statement -> statement .
    (49) statements -> . statement statements
    (50) statements -> .
    (51) statement -> . print
    (52) statement -> . print_withoutvalue
    (53) statement -> . def_function
    (54) statement -> . call_function
    (55) statement -> . input
    (56) statement -> . assignment
    (57) statement -> . short_assignment
    (58) statement -> . arithmetic_operation
    (59) statement -> . direct_arithmetic_operation
    (60) statement -> . if_statement
    (61) statement -> . function_call
    (62) statement -> . switch_statement
    (63) statement -> . statement
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! reduce/reduce conflict for RKEY resolved using rule 50 (statements -> .)
  ! reduce/reduce conflict for CASE resolved using rule 50 (statements -> .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 50 (statements -> .)
  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 50 (statements -> .)
    CASE            reduce using rule 50 (statements -> .)
    DEFAULT         reduce using rule 50 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! FMT_LIBRARY     [ reduce using rule 63 (statement -> statement .) ]
  ! FUNC            [ reduce using rule 63 (statement -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 63 (statement -> statement .) ]
  ! INPUT           [ reduce using rule 63 (statement -> statement .) ]
  ! VAR             [ reduce using rule 63 (statement -> statement .) ]
  ! CONST           [ reduce using rule 63 (statement -> statement .) ]
  ! IF              [ reduce using rule 63 (statement -> statement .) ]
  ! SWITCH          [ reduce using rule 63 (statement -> statement .) ]
  ! STRING          [ reduce using rule 63 (statement -> statement .) ]
  ! INTEGER         [ reduce using rule 63 (statement -> statement .) ]
  ! FLOAT           [ reduce using rule 63 (statement -> statement .) ]
  ! BOOLEAN         [ reduce using rule 63 (statement -> statement .) ]
  ! RKEY            [ reduce using rule 63 (statement -> statement .) ]
  ! CASE            [ reduce using rule 63 (statement -> statement .) ]
  ! DEFAULT         [ reduce using rule 63 (statement -> statement .) ]

    statement                      shift and go to state 227
    statements                     shift and go to state 254
    print                          shift and go to state 228
    print_withoutvalue             shift and go to state 229
    def_function                   shift and go to state 230
    call_function                  shift and go to state 231
    input                          shift and go to state 232
    assignment                     shift and go to state 233
    short_assignment               shift and go to state 234
    arithmetic_operation           shift and go to state 235
    direct_arithmetic_operation    shift and go to state 236
    if_statement                   shift and go to state 237
    function_call                  shift and go to state 238
    switch_statement               shift and go to state 239
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 228

    (51) statement -> print .

    FMT_LIBRARY     reduce using rule 51 (statement -> print .)
    FUNC            reduce using rule 51 (statement -> print .)
    IDENTIFIER      reduce using rule 51 (statement -> print .)
    INPUT           reduce using rule 51 (statement -> print .)
    VAR             reduce using rule 51 (statement -> print .)
    CONST           reduce using rule 51 (statement -> print .)
    IF              reduce using rule 51 (statement -> print .)
    SWITCH          reduce using rule 51 (statement -> print .)
    STRING          reduce using rule 51 (statement -> print .)
    INTEGER         reduce using rule 51 (statement -> print .)
    FLOAT           reduce using rule 51 (statement -> print .)
    BOOLEAN         reduce using rule 51 (statement -> print .)
    RKEY            reduce using rule 51 (statement -> print .)
    CASE            reduce using rule 51 (statement -> print .)
    DEFAULT         reduce using rule 51 (statement -> print .)


state 229

    (52) statement -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 52 (statement -> print_withoutvalue .)
    FUNC            reduce using rule 52 (statement -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 52 (statement -> print_withoutvalue .)
    INPUT           reduce using rule 52 (statement -> print_withoutvalue .)
    VAR             reduce using rule 52 (statement -> print_withoutvalue .)
    CONST           reduce using rule 52 (statement -> print_withoutvalue .)
    IF              reduce using rule 52 (statement -> print_withoutvalue .)
    SWITCH          reduce using rule 52 (statement -> print_withoutvalue .)
    STRING          reduce using rule 52 (statement -> print_withoutvalue .)
    INTEGER         reduce using rule 52 (statement -> print_withoutvalue .)
    FLOAT           reduce using rule 52 (statement -> print_withoutvalue .)
    BOOLEAN         reduce using rule 52 (statement -> print_withoutvalue .)
    RKEY            reduce using rule 52 (statement -> print_withoutvalue .)
    CASE            reduce using rule 52 (statement -> print_withoutvalue .)
    DEFAULT         reduce using rule 52 (statement -> print_withoutvalue .)


state 230

    (53) statement -> def_function .

    FMT_LIBRARY     reduce using rule 53 (statement -> def_function .)
    FUNC            reduce using rule 53 (statement -> def_function .)
    IDENTIFIER      reduce using rule 53 (statement -> def_function .)
    INPUT           reduce using rule 53 (statement -> def_function .)
    VAR             reduce using rule 53 (statement -> def_function .)
    CONST           reduce using rule 53 (statement -> def_function .)
    IF              reduce using rule 53 (statement -> def_function .)
    SWITCH          reduce using rule 53 (statement -> def_function .)
    STRING          reduce using rule 53 (statement -> def_function .)
    INTEGER         reduce using rule 53 (statement -> def_function .)
    FLOAT           reduce using rule 53 (statement -> def_function .)
    BOOLEAN         reduce using rule 53 (statement -> def_function .)
    RKEY            reduce using rule 53 (statement -> def_function .)
    CASE            reduce using rule 53 (statement -> def_function .)
    DEFAULT         reduce using rule 53 (statement -> def_function .)


state 231

    (54) statement -> call_function .
    (93) usable_value -> call_function .

    FMT_LIBRARY     reduce using rule 54 (statement -> call_function .)
    FUNC            reduce using rule 54 (statement -> call_function .)
    IDENTIFIER      reduce using rule 54 (statement -> call_function .)
    INPUT           reduce using rule 54 (statement -> call_function .)
    VAR             reduce using rule 54 (statement -> call_function .)
    CONST           reduce using rule 54 (statement -> call_function .)
    IF              reduce using rule 54 (statement -> call_function .)
    SWITCH          reduce using rule 54 (statement -> call_function .)
    STRING          reduce using rule 54 (statement -> call_function .)
    INTEGER         reduce using rule 54 (statement -> call_function .)
    FLOAT           reduce using rule 54 (statement -> call_function .)
    BOOLEAN         reduce using rule 54 (statement -> call_function .)
    RKEY            reduce using rule 54 (statement -> call_function .)
    CASE            reduce using rule 54 (statement -> call_function .)
    DEFAULT         reduce using rule 54 (statement -> call_function .)
    PLUS            reduce using rule 93 (usable_value -> call_function .)
    MINUS           reduce using rule 93 (usable_value -> call_function .)
    DIVIDE          reduce using rule 93 (usable_value -> call_function .)
    TIMES           reduce using rule 93 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 93 (usable_value -> call_function .)
    MODULE          reduce using rule 93 (usable_value -> call_function .)
    EQUALEQUAL      reduce using rule 93 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 93 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 93 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 93 (usable_value -> call_function .)
    LESS            reduce using rule 93 (usable_value -> call_function .)
    GREATER         reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 93 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 93 (usable_value -> call_function .)


state 232

    (55) statement -> input .

    FMT_LIBRARY     reduce using rule 55 (statement -> input .)
    FUNC            reduce using rule 55 (statement -> input .)
    IDENTIFIER      reduce using rule 55 (statement -> input .)
    INPUT           reduce using rule 55 (statement -> input .)
    VAR             reduce using rule 55 (statement -> input .)
    CONST           reduce using rule 55 (statement -> input .)
    IF              reduce using rule 55 (statement -> input .)
    SWITCH          reduce using rule 55 (statement -> input .)
    STRING          reduce using rule 55 (statement -> input .)
    INTEGER         reduce using rule 55 (statement -> input .)
    FLOAT           reduce using rule 55 (statement -> input .)
    BOOLEAN         reduce using rule 55 (statement -> input .)
    RKEY            reduce using rule 55 (statement -> input .)
    CASE            reduce using rule 55 (statement -> input .)
    DEFAULT         reduce using rule 55 (statement -> input .)


state 233

    (56) statement -> assignment .

    FMT_LIBRARY     reduce using rule 56 (statement -> assignment .)
    FUNC            reduce using rule 56 (statement -> assignment .)
    IDENTIFIER      reduce using rule 56 (statement -> assignment .)
    INPUT           reduce using rule 56 (statement -> assignment .)
    VAR             reduce using rule 56 (statement -> assignment .)
    CONST           reduce using rule 56 (statement -> assignment .)
    IF              reduce using rule 56 (statement -> assignment .)
    SWITCH          reduce using rule 56 (statement -> assignment .)
    STRING          reduce using rule 56 (statement -> assignment .)
    INTEGER         reduce using rule 56 (statement -> assignment .)
    FLOAT           reduce using rule 56 (statement -> assignment .)
    BOOLEAN         reduce using rule 56 (statement -> assignment .)
    RKEY            reduce using rule 56 (statement -> assignment .)
    CASE            reduce using rule 56 (statement -> assignment .)
    DEFAULT         reduce using rule 56 (statement -> assignment .)


state 234

    (57) statement -> short_assignment .

    FMT_LIBRARY     reduce using rule 57 (statement -> short_assignment .)
    FUNC            reduce using rule 57 (statement -> short_assignment .)
    IDENTIFIER      reduce using rule 57 (statement -> short_assignment .)
    INPUT           reduce using rule 57 (statement -> short_assignment .)
    VAR             reduce using rule 57 (statement -> short_assignment .)
    CONST           reduce using rule 57 (statement -> short_assignment .)
    IF              reduce using rule 57 (statement -> short_assignment .)
    SWITCH          reduce using rule 57 (statement -> short_assignment .)
    STRING          reduce using rule 57 (statement -> short_assignment .)
    INTEGER         reduce using rule 57 (statement -> short_assignment .)
    FLOAT           reduce using rule 57 (statement -> short_assignment .)
    BOOLEAN         reduce using rule 57 (statement -> short_assignment .)
    RKEY            reduce using rule 57 (statement -> short_assignment .)
    CASE            reduce using rule 57 (statement -> short_assignment .)
    DEFAULT         reduce using rule 57 (statement -> short_assignment .)


state 235

    (58) statement -> arithmetic_operation .
    (95) usable_value -> arithmetic_operation .

    FMT_LIBRARY     reduce using rule 58 (statement -> arithmetic_operation .)
    FUNC            reduce using rule 58 (statement -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 58 (statement -> arithmetic_operation .)
    INPUT           reduce using rule 58 (statement -> arithmetic_operation .)
    VAR             reduce using rule 58 (statement -> arithmetic_operation .)
    CONST           reduce using rule 58 (statement -> arithmetic_operation .)
    IF              reduce using rule 58 (statement -> arithmetic_operation .)
    SWITCH          reduce using rule 58 (statement -> arithmetic_operation .)
    STRING          reduce using rule 58 (statement -> arithmetic_operation .)
    INTEGER         reduce using rule 58 (statement -> arithmetic_operation .)
    FLOAT           reduce using rule 58 (statement -> arithmetic_operation .)
    BOOLEAN         reduce using rule 58 (statement -> arithmetic_operation .)
    RKEY            reduce using rule 58 (statement -> arithmetic_operation .)
    CASE            reduce using rule 58 (statement -> arithmetic_operation .)
    DEFAULT         reduce using rule 58 (statement -> arithmetic_operation .)
    PLUS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 95 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 95 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 95 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 95 (usable_value -> arithmetic_operation .)
    EQUALEQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 95 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 95 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 95 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 95 (usable_value -> arithmetic_operation .)


state 236

    (59) statement -> direct_arithmetic_operation .

    FMT_LIBRARY     reduce using rule 59 (statement -> direct_arithmetic_operation .)
    FUNC            reduce using rule 59 (statement -> direct_arithmetic_operation .)
    IDENTIFIER      reduce using rule 59 (statement -> direct_arithmetic_operation .)
    INPUT           reduce using rule 59 (statement -> direct_arithmetic_operation .)
    VAR             reduce using rule 59 (statement -> direct_arithmetic_operation .)
    CONST           reduce using rule 59 (statement -> direct_arithmetic_operation .)
    IF              reduce using rule 59 (statement -> direct_arithmetic_operation .)
    SWITCH          reduce using rule 59 (statement -> direct_arithmetic_operation .)
    STRING          reduce using rule 59 (statement -> direct_arithmetic_operation .)
    INTEGER         reduce using rule 59 (statement -> direct_arithmetic_operation .)
    FLOAT           reduce using rule 59 (statement -> direct_arithmetic_operation .)
    BOOLEAN         reduce using rule 59 (statement -> direct_arithmetic_operation .)
    RKEY            reduce using rule 59 (statement -> direct_arithmetic_operation .)
    CASE            reduce using rule 59 (statement -> direct_arithmetic_operation .)
    DEFAULT         reduce using rule 59 (statement -> direct_arithmetic_operation .)


state 237

    (60) statement -> if_statement .

    FMT_LIBRARY     reduce using rule 60 (statement -> if_statement .)
    FUNC            reduce using rule 60 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 60 (statement -> if_statement .)
    INPUT           reduce using rule 60 (statement -> if_statement .)
    VAR             reduce using rule 60 (statement -> if_statement .)
    CONST           reduce using rule 60 (statement -> if_statement .)
    IF              reduce using rule 60 (statement -> if_statement .)
    SWITCH          reduce using rule 60 (statement -> if_statement .)
    STRING          reduce using rule 60 (statement -> if_statement .)
    INTEGER         reduce using rule 60 (statement -> if_statement .)
    FLOAT           reduce using rule 60 (statement -> if_statement .)
    BOOLEAN         reduce using rule 60 (statement -> if_statement .)
    RKEY            reduce using rule 60 (statement -> if_statement .)
    CASE            reduce using rule 60 (statement -> if_statement .)
    DEFAULT         reduce using rule 60 (statement -> if_statement .)


state 238

    (61) statement -> function_call .

    FMT_LIBRARY     reduce using rule 61 (statement -> function_call .)
    FUNC            reduce using rule 61 (statement -> function_call .)
    IDENTIFIER      reduce using rule 61 (statement -> function_call .)
    INPUT           reduce using rule 61 (statement -> function_call .)
    VAR             reduce using rule 61 (statement -> function_call .)
    CONST           reduce using rule 61 (statement -> function_call .)
    IF              reduce using rule 61 (statement -> function_call .)
    SWITCH          reduce using rule 61 (statement -> function_call .)
    STRING          reduce using rule 61 (statement -> function_call .)
    INTEGER         reduce using rule 61 (statement -> function_call .)
    FLOAT           reduce using rule 61 (statement -> function_call .)
    BOOLEAN         reduce using rule 61 (statement -> function_call .)
    RKEY            reduce using rule 61 (statement -> function_call .)
    CASE            reduce using rule 61 (statement -> function_call .)
    DEFAULT         reduce using rule 61 (statement -> function_call .)


state 239

    (62) statement -> switch_statement .

    FMT_LIBRARY     reduce using rule 62 (statement -> switch_statement .)
    FUNC            reduce using rule 62 (statement -> switch_statement .)
    IDENTIFIER      reduce using rule 62 (statement -> switch_statement .)
    INPUT           reduce using rule 62 (statement -> switch_statement .)
    VAR             reduce using rule 62 (statement -> switch_statement .)
    CONST           reduce using rule 62 (statement -> switch_statement .)
    IF              reduce using rule 62 (statement -> switch_statement .)
    SWITCH          reduce using rule 62 (statement -> switch_statement .)
    STRING          reduce using rule 62 (statement -> switch_statement .)
    INTEGER         reduce using rule 62 (statement -> switch_statement .)
    FLOAT           reduce using rule 62 (statement -> switch_statement .)
    BOOLEAN         reduce using rule 62 (statement -> switch_statement .)
    RKEY            reduce using rule 62 (statement -> switch_statement .)
    CASE            reduce using rule 62 (statement -> switch_statement .)
    DEFAULT         reduce using rule 62 (statement -> switch_statement .)


state 240

    (48) case_clause -> CASE value COLON statements .

    CASE            reduce using rule 48 (case_clause -> CASE value COLON statements .)
    RKEY            reduce using rule 48 (case_clause -> CASE value COLON statements .)
    DEFAULT         reduce using rule 48 (case_clause -> CASE value COLON statements .)


state 241

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for . LKEY loop_program RKEY

    LKEY            shift and go to state 255


state 242

    (34) operator_for -> INCREASE .

    LKEY            reduce using rule 34 (operator_for -> INCREASE .)


state 243

    (35) operator_for -> DECREASE .

    LKEY            reduce using rule 35 (operator_for -> DECREASE .)


state 244

    (82) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .

    FMT_LIBRARY     reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FUNC            reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    IDENTIFIER      reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INPUT           reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    VAR             reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CONST           reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    IF              reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    SWITCH          reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FOR             reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    STRING          reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INTEGER         reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FLOAT           reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BOOLEAN         reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BREAK           reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CONTINUE        reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    PASS            reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    $end            reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    RKEY            reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    RETURN          reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CASE            reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    DEFAULT         reduce using rule 82 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)


state 245

    (135) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    DEFAULT         reduce using rule 135 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)


state 246

    (8) func_program -> func_program program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 8 (func_program -> func_program program .)
    RETURN          reduce using rule 8 (func_program -> func_program program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! FMT_LIBRARY     [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FUNC            [ reduce using rule 8 (func_program -> func_program program .) ]
  ! IDENTIFIER      [ reduce using rule 8 (func_program -> func_program program .) ]
  ! INPUT           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! VAR             [ reduce using rule 8 (func_program -> func_program program .) ]
  ! CONST           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! IF              [ reduce using rule 8 (func_program -> func_program program .) ]
  ! SWITCH          [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FOR             [ reduce using rule 8 (func_program -> func_program program .) ]
  ! STRING          [ reduce using rule 8 (func_program -> func_program program .) ]
  ! INTEGER         [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FLOAT           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! BOOLEAN         [ reduce using rule 8 (func_program -> func_program program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28
    comparation_operation          shift and go to state 31

state 247

    (9) func_program -> func_program RETURN .
    (10) func_program -> func_program RETURN . usable_value
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 9 (func_program -> func_program RETURN .)
    RETURN          reduce using rule 9 (func_program -> func_program RETURN .)
    FMT_LIBRARY     reduce using rule 9 (func_program -> func_program RETURN .)
    FUNC            reduce using rule 9 (func_program -> func_program RETURN .)
    INPUT           reduce using rule 9 (func_program -> func_program RETURN .)
    VAR             reduce using rule 9 (func_program -> func_program RETURN .)
    CONST           reduce using rule 9 (func_program -> func_program RETURN .)
    IF              reduce using rule 9 (func_program -> func_program RETURN .)
    SWITCH          reduce using rule 9 (func_program -> func_program RETURN .)
    FOR             reduce using rule 9 (func_program -> func_program RETURN .)
    IDENTIFIER      shift and go to state 76
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! IDENTIFIER      [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! STRING          [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! INTEGER         [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! FLOAT           [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! BOOLEAN         [ reduce using rule 9 (func_program -> func_program RETURN .) ]

    usable_value                   shift and go to state 256
    value                          shift and go to state 23
    call_function                  shift and go to state 75
    arithmetic_operation           shift and go to state 77
    comparation_operation          shift and go to state 31

state 248

    (7) func_program -> RETURN usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    RKEY            reduce using rule 7 (func_program -> RETURN usable_value .)
    RETURN          reduce using rule 7 (func_program -> RETURN usable_value .)
    FMT_LIBRARY     reduce using rule 7 (func_program -> RETURN usable_value .)
    FUNC            reduce using rule 7 (func_program -> RETURN usable_value .)
    IDENTIFIER      reduce using rule 7 (func_program -> RETURN usable_value .)
    INPUT           reduce using rule 7 (func_program -> RETURN usable_value .)
    VAR             reduce using rule 7 (func_program -> RETURN usable_value .)
    CONST           reduce using rule 7 (func_program -> RETURN usable_value .)
    IF              reduce using rule 7 (func_program -> RETURN usable_value .)
    SWITCH          reduce using rule 7 (func_program -> RETURN usable_value .)
    FOR             reduce using rule 7 (func_program -> RETURN usable_value .)
    STRING          reduce using rule 7 (func_program -> RETURN usable_value .)
    INTEGER         reduce using rule 7 (func_program -> RETURN usable_value .)
    FLOAT           reduce using rule 7 (func_program -> RETURN usable_value .)
    BOOLEAN         reduce using rule 7 (func_program -> RETURN usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 249

    (136) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 257
    RETURN          shift and go to state 247
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    program                        shift and go to state 246
    usable_value                   shift and go to state 28
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 31

state 250

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    program                        shift and go to state 258
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 251

    (43) else_if -> ELSE IF comparation_operation . LKEY program RKEY
    (96) usable_value -> comparation_operation .

    LKEY            shift and go to state 259
    EQUALEQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 96 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 96 (usable_value -> comparation_operation .)
    LESS            reduce using rule 96 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 96 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 96 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 96 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 96 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 96 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 96 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 96 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 96 (usable_value -> comparation_operation .)


state 252

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 260
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 253

    (45) switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .

    FMT_LIBRARY     reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    FUNC            reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    IDENTIFIER      reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    INPUT           reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    VAR             reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    CONST           reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    IF              reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    SWITCH          reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    FOR             reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    STRING          reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    INTEGER         reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    FLOAT           reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    BOOLEAN         reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    BREAK           reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    CONTINUE        reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    PASS            reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    $end            reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    RKEY            reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    RETURN          reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    CASE            reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)
    DEFAULT         reduce using rule 45 (switch_statement -> SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY .)


state 254

    (49) statements -> statement statements .

    RKEY            reduce using rule 49 (statements -> statement statements .)
    CASE            reduce using rule 49 (statements -> statement statements .)
    DEFAULT         reduce using rule 49 (statements -> statement statements .)


state 255

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    short_assignment               shift and go to state 15
    comparation_operation          shift and go to state 31
    loop_program                   shift and go to state 261
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 256

    (10) func_program -> func_program RETURN usable_value .
    (107) arithmetic_operation -> usable_value . PLUS usable_value
    (108) arithmetic_operation -> usable_value . MINUS usable_value
    (109) arithmetic_operation -> usable_value . DIVIDE usable_value
    (110) arithmetic_operation -> usable_value . TIMES usable_value
    (111) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> usable_value . MODULE usable_value
    (113) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (114) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (115) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (116) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (117) comparation_operation -> usable_value . LESS usable_value
    (118) comparation_operation -> usable_value . GREATER usable_value
    (119) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (120) comparation_operation -> usable_value . LOGICAL_OR usable_value

    RKEY            reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    RETURN          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FMT_LIBRARY     reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FUNC            reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    IDENTIFIER      reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    INPUT           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    VAR             reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    CONST           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    IF              reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    SWITCH          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FOR             reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    STRING          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    INTEGER         reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FLOAT           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    BOOLEAN         reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    TIMES           shift and go to state 61
    ENTERE_DIVIDE   shift and go to state 62
    MODULE          shift and go to state 63
    EQUALEQUAL      shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    LOGICAL_AND     shift and go to state 70
    LOGICAL_OR      shift and go to state 71


state 257

    (136) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FUNC            reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    INPUT           reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    VAR             reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CONST           reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    IF              reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    SWITCH          reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FOR             reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    STRING          reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    INTEGER         reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FLOAT           reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    BREAK           reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CONTINUE        reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    PASS            reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    $end            reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    RKEY            reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    RETURN          reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CASE            reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    DEFAULT         reduce using rule 136 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)


state 258

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 262
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 259

    (43) else_if -> ELSE IF comparation_operation LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    program                        shift and go to state 263
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 260

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FUNC            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    IDENTIFIER      reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    INPUT           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    VAR             reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CONST           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    IF              reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    SWITCH          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FOR             reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    STRING          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    INTEGER         reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FLOAT           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    BOOLEAN         reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    BREAK           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CONTINUE        reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    PASS            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    $end            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    RKEY            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    RETURN          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CASE            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    DEFAULT         reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)


state 261

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 264
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    short_assignment               shift and go to state 15
    comparation_operation          shift and go to state 31
    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 262

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FUNC            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    IDENTIFIER      reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    INPUT           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    VAR             reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CONST           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    IF              reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    SWITCH          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FOR             reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    STRING          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    INTEGER         reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FLOAT           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    BOOLEAN         reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    BREAK           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CONTINUE        reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    PASS            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    $end            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    RKEY            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    RETURN          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CASE            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    DEFAULT         reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)


state 263

    (43) else_if -> ELSE IF comparation_operation LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (79) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (80) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (81) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (82) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (87) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (88) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (135) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (137) call_function -> . IDENTIFIER LPAREN values RPAREN
    (152) input -> . INPUT LPAREN RPAREN
    (153) input -> . INPUT LPAREN value RPAREN
    (154) input -> . INPUT LPAREN identifiers RPAREN
    (89) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (90) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (91) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (107) arithmetic_operation -> . usable_value PLUS usable_value
    (108) arithmetic_operation -> . usable_value MINUS usable_value
    (109) arithmetic_operation -> . usable_value DIVIDE usable_value
    (110) arithmetic_operation -> . usable_value TIMES usable_value
    (111) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (112) arithmetic_operation -> . usable_value MODULE usable_value
    (97) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (98) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (99) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (100) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (101) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (102) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (103) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (104) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (105) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (106) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH expression LKEY case_clauses RKEY
    (45) switch_statement -> . SWITCH expression LKEY case_clauses DEFAULT COLON statements RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (92) usable_value -> . value
    (93) usable_value -> . call_function
    (94) usable_value -> . IDENTIFIER
    (95) usable_value -> . arithmetic_operation
    (96) usable_value -> . comparation_operation
    (143) value -> . STRING
    (144) value -> . INTEGER
    (145) value -> . FLOAT
    (146) value -> . BOOLEAN
    (147) value -> . IDENTIFIER
    (113) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (114) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (115) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (116) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (117) comparation_operation -> . usable_value LESS usable_value
    (118) comparation_operation -> . usable_value GREATER usable_value
    (119) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (120) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 265
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 29
    IF              shift and go to state 30
    SWITCH          shift and go to state 32
    FOR             shift and go to state 33
    STRING          shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37

    comparation_operation          shift and go to state 31
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 28

state 264

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FUNC            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    INPUT           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    VAR             reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    CONST           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    IF              reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    SWITCH          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FOR             reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    STRING          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    INTEGER         reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FLOAT           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    BREAK           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    PASS            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    $end            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    RKEY            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    RETURN          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)


state 265

    (43) else_if -> ELSE IF comparation_operation LKEY program RKEY .

    ELSE            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FMT_LIBRARY     reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FUNC            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    IDENTIFIER      reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    INPUT           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    VAR             reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CONST           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    IF              reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    SWITCH          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FOR             reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    STRING          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    INTEGER         reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FLOAT           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    BOOLEAN         reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    BREAK           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CONTINUE        reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    PASS            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    $end            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    RKEY            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    RETURN          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CASE            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    DEFAULT         reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FMT_LIBRARY in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 2 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 38 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 38 resolved as shift
WARNING: shift/reduce conflict for VAR in state 38 resolved as shift
WARNING: shift/reduce conflict for CONST in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 38 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 118 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 119 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 120 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 121 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 121 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 122 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 123 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 123 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 162 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 162 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 162 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 162 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 162 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 162 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 162 resolved as shift
WARNING: shift/reduce conflict for LESS in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 162 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 162 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 163 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 163 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 163 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 163 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 163 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 163 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 163 resolved as shift
WARNING: shift/reduce conflict for LESS in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 163 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 163 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 164 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 164 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 164 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 164 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for LESS in state 164 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 164 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 164 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 165 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 165 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 165 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 166 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 166 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 166 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 166 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for LESS in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 166 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 166 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 167 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 167 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 167 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for LESS in state 167 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 167 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 167 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 167 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 168 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 168 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 168 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 168 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for LESS in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 168 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 168 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 169 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 169 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 169 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 169 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 169 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 169 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 169 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 169 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 170 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 170 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 170 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 170 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 170 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 170 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for LESS in state 170 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 170 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 171 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 171 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 171 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 171 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS in state 171 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 171 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 171 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 172 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 172 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 172 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 172 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for LESS in state 172 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 172 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 172 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 173 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 173 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 173 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 173 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for LESS in state 173 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 173 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 173 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 174 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 174 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 174 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 174 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for LESS in state 174 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 174 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 174 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 175 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 175 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 175 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 175 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for LESS in state 175 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 175 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 175 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 175 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 189 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 219 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 219 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 219 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 219 resolved as shift
WARNING: shift/reduce conflict for VAR in state 219 resolved as shift
WARNING: shift/reduce conflict for CONST in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for STRING in state 219 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 219 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 219 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 219 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING in state 220 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 220 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 220 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 220 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 227 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 227 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 227 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 227 resolved as shift
WARNING: shift/reduce conflict for VAR in state 227 resolved as shift
WARNING: shift/reduce conflict for CONST in state 227 resolved as shift
WARNING: shift/reduce conflict for IF in state 227 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 227 resolved as shift
WARNING: shift/reduce conflict for STRING in state 227 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 227 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 227 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 227 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 246 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 246 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 246 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 246 resolved as shift
WARNING: shift/reduce conflict for VAR in state 246 resolved as shift
WARNING: shift/reduce conflict for CONST in state 246 resolved as shift
WARNING: shift/reduce conflict for IF in state 246 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 246 resolved as shift
WARNING: shift/reduce conflict for FOR in state 246 resolved as shift
WARNING: shift/reduce conflict for STRING in state 246 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 246 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 246 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 246 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 247 resolved as shift
WARNING: shift/reduce conflict for STRING in state 247 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 247 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 247 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 247 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 25
WARNING: reduce/reduce conflict in state 76 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 76
WARNING: reduce/reduce conflict in state 84 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 84
WARNING: reduce/reduce conflict in state 104 resolved using rule (identifiers -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 104
WARNING: reduce/reduce conflict in state 150 resolved using rule (function_call -> IDENTIFIER LPAREN values RPAREN)
WARNING: rejected rule (call_function -> IDENTIFIER LPAREN values RPAREN) in state 150
WARNING: reduce/reduce conflict in state 182 resolved using rule (data -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 182
WARNING: reduce/reduce conflict in state 215 resolved using rule (data -> data COMMA IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 215
WARNING: reduce/reduce conflict in state 227 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> statement) in state 227
WARNING: Rule (statement -> statement) is never reduced
