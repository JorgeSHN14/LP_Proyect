Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    CLASS
    COMMENT
    COMMENT_MULTI
    DEFAULT
    DEL
    DOUBLE_QUOTE
    ELIF
    ELLIPSIS
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FROM
    GLOBAL
    GREATER_THAN
    HEX_NUMBER
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LESS_THAN
    NONE
    NONLOCAL
    NOT
    NULL
    OR
    PERCENT_D
    PIPE
    RAISE
    RBRACKET
    SCIENTIFIC_NOTATION
    TRUE
    TRY
    WITH
    YIELD

Grammar

Rule 0     S' -> loop_program
Rule 1     loop_program -> program
Rule 2     loop_program -> loop_reserved
Rule 3     loop_program -> loop_program program
Rule 4     loop_program -> loop_program loop_reserved
Rule 5     func_program -> program
Rule 6     func_program -> RETURN
Rule 7     func_program -> RETURN usable_value
Rule 8     func_program -> func_program program
Rule 9     func_program -> func_program RETURN
Rule 10    func_program -> func_program RETURN usable_value
Rule 11    program -> sentencia
Rule 12    program -> loop
Rule 13    program -> program sentencia
Rule 14    program -> program loop
Rule 15    loop_reserved -> BREAK
Rule 16    loop_reserved -> CONTINUE
Rule 17    loop_reserved -> PASS
Rule 18    loop -> for
Rule 19    sentencia -> print
Rule 20    sentencia -> print_withoutvalue
Rule 21    sentencia -> def_function
Rule 22    sentencia -> call_function
Rule 23    sentencia -> input
Rule 24    sentencia -> assignment
Rule 25    sentencia -> short_assignment
Rule 26    sentencia -> arithmetic_operation
Rule 27    sentencia -> direct_arithmetic_operation
Rule 28    sentencia -> if_statement
Rule 29    sentencia -> function_call
Rule 30    sentencia -> switch_statement
Rule 31    for -> FOR LKEY loop_program RKEY
Rule 32    for -> FOR comparation_operation LKEY loop_program RKEY
Rule 33    for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
Rule 34    operator_for -> INCREASE
Rule 35    operator_for -> DECREASE
Rule 36    function_call -> IDENTIFIER LPAREN values RPAREN
Rule 37    if_statement -> IF comparation_operation LKEY program RKEY
Rule 38    if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif
Rule 39    if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
Rule 40    if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
Rule 41    conditions_elseif -> else_if
Rule 42    conditions_elseif -> conditions_elseif else_if
Rule 43    else_if -> ELSE IF comparation_operation LKEY program RKEY
Rule 44    switch_statement -> SWITCH value LKEY switch_cases RKEY
Rule 45    switch_statement -> SWITCH LKEY switch_cases RKEY
Rule 46    switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY
Rule 47    switch_expression -> value
Rule 48    switch_expression -> <empty>
Rule 49    switch_cases -> switch_case switch_cases
Rule 50    switch_cases -> <empty>
Rule 51    switch_case -> CASE value COLON statements
Rule 52    switch_case -> CASE COLON statements
Rule 53    statements -> statement statements
Rule 54    statements -> <empty>
Rule 55    statement -> print
Rule 56    statement -> print_withoutvalue
Rule 57    statement -> def_function
Rule 58    statement -> call_function
Rule 59    statement -> input
Rule 60    statement -> assignment
Rule 61    statement -> short_assignment
Rule 62    statement -> arithmetic_operation
Rule 63    statement -> direct_arithmetic_operation
Rule 64    statement -> if_statement
Rule 65    statement -> function_call
Rule 66    statement -> switch_statement
Rule 67    print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
Rule 68    print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
Rule 69    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 70    print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
Rule 71    data -> value
Rule 72    data -> IDENTIFIER
Rule 73    data -> data COMMA value
Rule 74    data -> data COMMA IDENTIFIER
Rule 75    print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 76    print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 77    assignment -> VAR IDENTIFIER data_type EQUAL usable_value
Rule 78    assignment -> CONST IDENTIFIER data_type EQUAL usable_value
Rule 79    short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value
Rule 80    usable_value -> value
Rule 81    usable_value -> call_function
Rule 82    usable_value -> IDENTIFIER
Rule 83    usable_value -> arithmetic_operation
Rule 84    usable_value -> comparation_operation
Rule 85    direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value
Rule 86    direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value
Rule 87    direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value
Rule 88    direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value
Rule 89    direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value
Rule 90    direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value
Rule 91    direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value
Rule 92    direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value
Rule 93    direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value
Rule 94    direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value
Rule 95    arithmetic_operation -> usable_value PLUS usable_value
Rule 96    arithmetic_operation -> usable_value MINUS usable_value
Rule 97    arithmetic_operation -> usable_value DIVIDE usable_value
Rule 98    arithmetic_operation -> usable_value TIMES usable_value
Rule 99    arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value
Rule 100   arithmetic_operation -> usable_value MODULE usable_value
Rule 101   comparation_operation -> usable_value EQUALEQUAL usable_value
Rule 102   comparation_operation -> usable_value NOT_EQUAL usable_value
Rule 103   comparation_operation -> usable_value LESS_EQUAL usable_value
Rule 104   comparation_operation -> usable_value GREATER_EQUAL usable_value
Rule 105   comparation_operation -> usable_value LESS usable_value
Rule 106   comparation_operation -> usable_value GREATER usable_value
Rule 107   comparation_operation -> usable_value LOGICAL_AND usable_value
Rule 108   comparation_operation -> usable_value LOGICAL_OR usable_value
Rule 109   identifiers -> IDENTIFIER
Rule 110   identifiers -> identifiers COMMA identifiers
Rule 111   rule_comparation -> IDENTIFIER EQUALEQUAL value
Rule 112   rule_comparation -> IDENTIFIER NOT_EQUAL value
Rule 113   rule_comparation -> IDENTIFIER LESS_EQUAL value
Rule 114   rule_comparation -> IDENTIFIER GREATER_EQUAL value
Rule 115   rule_comparation -> IDENTIFIER LESS value
Rule 116   rule_comparation -> IDENTIFIER GREATER value
Rule 117   rule_comparation -> IDENTIFIER LOGICAL_AND value
Rule 118   rule_comparation -> IDENTIFIER LOGICAL_OR value
Rule 119   condition -> value comparation_operation value
Rule 120   condition -> condition LOGICAL_AND condition
Rule 121   condition -> condition LOGICAL_OR condition
Rule 122   condition -> LOGICAL_NOT condition
Rule 123   def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
Rule 124   def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
Rule 125   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
Rule 126   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
Rule 127   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
Rule 128   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
Rule 129   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
Rule 130   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
Rule 131   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
Rule 132   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
Rule 133   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
Rule 134   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
Rule 135   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
Rule 136   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
Rule 137   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
Rule 138   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
Rule 139   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
Rule 140   def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
Rule 141   call_function -> IDENTIFIER LPAREN values RPAREN
Rule 142   parameters -> parameter
Rule 143   parameters -> parameters COMMA parameter
Rule 144   parameter -> IDENTIFIER data_type
Rule 145   values -> value
Rule 146   values -> values COMMA value
Rule 147   value -> STRING
Rule 148   value -> INTEGER
Rule 149   value -> FLOAT
Rule 150   value -> BOOLEAN
Rule 151   value -> IDENTIFIER
Rule 152   data_type -> INTEGER_DATA_TYPE
Rule 153   data_type -> FLOAT_DATA_TYPE
Rule 154   data_type -> BOOLEAN_DATA_TYPE
Rule 155   data_type -> STRING_DATA_TYPE
Rule 156   input -> INPUT LPAREN RPAREN
Rule 157   input -> INPUT LPAREN value RPAREN
Rule 158   input -> INPUT LPAREN identifiers RPAREN

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 90
BITWISE_OR_EQ        : 91
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 92
BOOLEAN              : 133 134 139 140 150
BOOLEAN_DATA_TYPE    : 154
BREAK                : 15
CASE                 : 51 52
CLASS                : 
COLON                : 51 52
COMMA                : 69 70 73 74 110 125 126 126 127 128 128 129 130 130 131 132 132 133 134 134 135 135 136 136 136 137 137 138 138 138 139 139 140 140 140 143 146
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 78
CONTINUE             : 16
DECREASE             : 35
DEFAULT              : 
DEL                  : 
DIVIDE               : 97
DIVIDE_EQ            : 88
DOT                  : 67 68 69 70 75 76 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
DOUBLE_QUOTE         : 
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 39 40 43
ENTERE_DIVIDE        : 99
EQUAL                : 77 78
EQUALEQUAL           : 101 111
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT                : 129 130 135 136 149
FLOAT_DATA_TYPE      : 153
FMT_LIBRARY          : 67 68 69 70 75 76 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
FOR                  : 31 32 33
FROM                 : 
FUNC                 : 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
GLOBAL               : 
GREATER              : 106 116
GREATER_EQUAL        : 104 114
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 33 36 72 74 77 78 79 82 85 86 87 88 89 90 91 92 93 94 109 111 112 113 114 115 116 117 118 123 124 127 128 135 136 137 138 139 140 141 144 151
IF                   : 37 38 39 40 43
IMPORT               : 
IN                   : 
INCREASE             : 34
INPUT                : 156 157 158
INTEGER              : 131 132 137 138 148
INTEGER_DATA_TYPE    : 152
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 93
LESS                 : 105 115
LESS_EQUAL           : 103 113
LESS_THAN            : 
LKEY                 : 31 32 33 37 38 39 39 40 40 43 44 45 46 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
LOGICAL_AND          : 107 117 120
LOGICAL_NOT          : 122
LOGICAL_OR           : 108 118 121
LPAREN               : 36 67 68 69 70 75 76 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 156 157 158
MINUS                : 96
MINUS_EQ             : 86
MODULE               : 100
MODULO_EQ            : 89
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 102 112
NULL                 : 
OR                   : 
PASS                 : 17
PERCENT_D            : 
PIPE                 : 
PLUS                 : 95
PLUS_EQ              : 85
PRINTF               : 68 69 70 76 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
PRINTLN              : 67 75
RAISE                : 
RBRACKET             : 
RETURN               : 6 7 9 10
RIGHT_SHIFT_EQ       : 94
RKEY                 : 31 32 33 37 38 39 39 40 40 43 44 45 46 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
RPAREN               : 36 67 68 69 70 75 76 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 156 157 158
SCIENTIFIC_NOTATION  : 
SEMICOLON            : 33 33
SHORT_VAR_DECL       : 79
STRING               : 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 147
STRING_DATA_TYPE     : 155
SWITCH               : 44 45 46
TIMES                : 98
TIMES_EQ             : 87
TRUE                 : 
TRY                  : 
VAR                  : 77
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_operation : 26 62 83
assignment           : 24 60
call_function        : 22 58 81
comparation_operation : 32 33 37 38 39 40 43 84 119
condition            : 120 120 121 121 122
conditions_elseif    : 38 40 42
data                 : 67 70 73 74 125 126
data_type            : 77 78 124 144
def_function         : 21 57
direct_arithmetic_operation : 27 63
else_if              : 41 42
for                  : 18
func_program         : 8 9 10 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
function_call        : 29 65
identifiers          : 110 110 158
if_statement         : 28 64
input                : 23 59
loop                 : 12 14
loop_program         : 3 4 31 32 33 0
loop_reserved        : 2 4
operator_for         : 33
parameter            : 142 143
parameters           : 123 124 143
print                : 19 55
print_withoutvalue   : 20 56
program              : 1 3 5 8 13 14 37 38 39 39 40 40 43
rule_comparation     : 
sentencia            : 11 13
short_assignment     : 25 33 61
statement            : 53
statements           : 51 52 53
switch_case          : 49
switch_cases         : 44 45 46 49
switch_expression    : 46
switch_statement     : 30 66
usable_value         : 7 10 77 78 79 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108
value                : 44 47 51 68 69 70 71 73 80 85 86 87 88 89 90 91 92 93 94 111 112 113 114 115 116 117 118 119 119 145 146 157
values               : 36 141 146

Parsing method: LALR

state 0

    (0) S' -> . loop_program
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    loop_program                   shift and go to state 1
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 1

    (0) S' -> loop_program .
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 2

    (1) loop_program -> program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 1 (loop_program -> program .)
    CONTINUE        reduce using rule 1 (loop_program -> program .)
    PASS            reduce using rule 1 (loop_program -> program .)
    $end            reduce using rule 1 (loop_program -> program .)
    RKEY            reduce using rule 1 (loop_program -> program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! FMT_LIBRARY     [ reduce using rule 1 (loop_program -> program .) ]
  ! FUNC            [ reduce using rule 1 (loop_program -> program .) ]
  ! IDENTIFIER      [ reduce using rule 1 (loop_program -> program .) ]
  ! INPUT           [ reduce using rule 1 (loop_program -> program .) ]
  ! VAR             [ reduce using rule 1 (loop_program -> program .) ]
  ! CONST           [ reduce using rule 1 (loop_program -> program .) ]
  ! IF              [ reduce using rule 1 (loop_program -> program .) ]
  ! SWITCH          [ reduce using rule 1 (loop_program -> program .) ]
  ! FOR             [ reduce using rule 1 (loop_program -> program .) ]
  ! STRING          [ reduce using rule 1 (loop_program -> program .) ]
  ! INTEGER         [ reduce using rule 1 (loop_program -> program .) ]
  ! FLOAT           [ reduce using rule 1 (loop_program -> program .) ]
  ! BOOLEAN         [ reduce using rule 1 (loop_program -> program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 3

    (2) loop_program -> loop_reserved .

    BREAK           reduce using rule 2 (loop_program -> loop_reserved .)
    CONTINUE        reduce using rule 2 (loop_program -> loop_reserved .)
    PASS            reduce using rule 2 (loop_program -> loop_reserved .)
    FMT_LIBRARY     reduce using rule 2 (loop_program -> loop_reserved .)
    FUNC            reduce using rule 2 (loop_program -> loop_reserved .)
    IDENTIFIER      reduce using rule 2 (loop_program -> loop_reserved .)
    INPUT           reduce using rule 2 (loop_program -> loop_reserved .)
    VAR             reduce using rule 2 (loop_program -> loop_reserved .)
    CONST           reduce using rule 2 (loop_program -> loop_reserved .)
    IF              reduce using rule 2 (loop_program -> loop_reserved .)
    SWITCH          reduce using rule 2 (loop_program -> loop_reserved .)
    FOR             reduce using rule 2 (loop_program -> loop_reserved .)
    STRING          reduce using rule 2 (loop_program -> loop_reserved .)
    INTEGER         reduce using rule 2 (loop_program -> loop_reserved .)
    FLOAT           reduce using rule 2 (loop_program -> loop_reserved .)
    BOOLEAN         reduce using rule 2 (loop_program -> loop_reserved .)
    $end            reduce using rule 2 (loop_program -> loop_reserved .)
    RKEY            reduce using rule 2 (loop_program -> loop_reserved .)


state 4

    (11) program -> sentencia .

    FMT_LIBRARY     reduce using rule 11 (program -> sentencia .)
    FUNC            reduce using rule 11 (program -> sentencia .)
    IDENTIFIER      reduce using rule 11 (program -> sentencia .)
    INPUT           reduce using rule 11 (program -> sentencia .)
    VAR             reduce using rule 11 (program -> sentencia .)
    CONST           reduce using rule 11 (program -> sentencia .)
    IF              reduce using rule 11 (program -> sentencia .)
    SWITCH          reduce using rule 11 (program -> sentencia .)
    FOR             reduce using rule 11 (program -> sentencia .)
    STRING          reduce using rule 11 (program -> sentencia .)
    INTEGER         reduce using rule 11 (program -> sentencia .)
    FLOAT           reduce using rule 11 (program -> sentencia .)
    BOOLEAN         reduce using rule 11 (program -> sentencia .)
    BREAK           reduce using rule 11 (program -> sentencia .)
    CONTINUE        reduce using rule 11 (program -> sentencia .)
    PASS            reduce using rule 11 (program -> sentencia .)
    $end            reduce using rule 11 (program -> sentencia .)
    RKEY            reduce using rule 11 (program -> sentencia .)
    RETURN          reduce using rule 11 (program -> sentencia .)


state 5

    (12) program -> loop .

    FMT_LIBRARY     reduce using rule 12 (program -> loop .)
    FUNC            reduce using rule 12 (program -> loop .)
    IDENTIFIER      reduce using rule 12 (program -> loop .)
    INPUT           reduce using rule 12 (program -> loop .)
    VAR             reduce using rule 12 (program -> loop .)
    CONST           reduce using rule 12 (program -> loop .)
    IF              reduce using rule 12 (program -> loop .)
    SWITCH          reduce using rule 12 (program -> loop .)
    FOR             reduce using rule 12 (program -> loop .)
    STRING          reduce using rule 12 (program -> loop .)
    INTEGER         reduce using rule 12 (program -> loop .)
    FLOAT           reduce using rule 12 (program -> loop .)
    BOOLEAN         reduce using rule 12 (program -> loop .)
    BREAK           reduce using rule 12 (program -> loop .)
    CONTINUE        reduce using rule 12 (program -> loop .)
    PASS            reduce using rule 12 (program -> loop .)
    $end            reduce using rule 12 (program -> loop .)
    RKEY            reduce using rule 12 (program -> loop .)
    RETURN          reduce using rule 12 (program -> loop .)


state 6

    (15) loop_reserved -> BREAK .

    BREAK           reduce using rule 15 (loop_reserved -> BREAK .)
    CONTINUE        reduce using rule 15 (loop_reserved -> BREAK .)
    PASS            reduce using rule 15 (loop_reserved -> BREAK .)
    FMT_LIBRARY     reduce using rule 15 (loop_reserved -> BREAK .)
    FUNC            reduce using rule 15 (loop_reserved -> BREAK .)
    IDENTIFIER      reduce using rule 15 (loop_reserved -> BREAK .)
    INPUT           reduce using rule 15 (loop_reserved -> BREAK .)
    VAR             reduce using rule 15 (loop_reserved -> BREAK .)
    CONST           reduce using rule 15 (loop_reserved -> BREAK .)
    IF              reduce using rule 15 (loop_reserved -> BREAK .)
    SWITCH          reduce using rule 15 (loop_reserved -> BREAK .)
    FOR             reduce using rule 15 (loop_reserved -> BREAK .)
    STRING          reduce using rule 15 (loop_reserved -> BREAK .)
    INTEGER         reduce using rule 15 (loop_reserved -> BREAK .)
    FLOAT           reduce using rule 15 (loop_reserved -> BREAK .)
    BOOLEAN         reduce using rule 15 (loop_reserved -> BREAK .)
    $end            reduce using rule 15 (loop_reserved -> BREAK .)
    RKEY            reduce using rule 15 (loop_reserved -> BREAK .)


state 7

    (16) loop_reserved -> CONTINUE .

    BREAK           reduce using rule 16 (loop_reserved -> CONTINUE .)
    CONTINUE        reduce using rule 16 (loop_reserved -> CONTINUE .)
    PASS            reduce using rule 16 (loop_reserved -> CONTINUE .)
    FMT_LIBRARY     reduce using rule 16 (loop_reserved -> CONTINUE .)
    FUNC            reduce using rule 16 (loop_reserved -> CONTINUE .)
    IDENTIFIER      reduce using rule 16 (loop_reserved -> CONTINUE .)
    INPUT           reduce using rule 16 (loop_reserved -> CONTINUE .)
    VAR             reduce using rule 16 (loop_reserved -> CONTINUE .)
    CONST           reduce using rule 16 (loop_reserved -> CONTINUE .)
    IF              reduce using rule 16 (loop_reserved -> CONTINUE .)
    SWITCH          reduce using rule 16 (loop_reserved -> CONTINUE .)
    FOR             reduce using rule 16 (loop_reserved -> CONTINUE .)
    STRING          reduce using rule 16 (loop_reserved -> CONTINUE .)
    INTEGER         reduce using rule 16 (loop_reserved -> CONTINUE .)
    FLOAT           reduce using rule 16 (loop_reserved -> CONTINUE .)
    BOOLEAN         reduce using rule 16 (loop_reserved -> CONTINUE .)
    $end            reduce using rule 16 (loop_reserved -> CONTINUE .)
    RKEY            reduce using rule 16 (loop_reserved -> CONTINUE .)


state 8

    (17) loop_reserved -> PASS .

    BREAK           reduce using rule 17 (loop_reserved -> PASS .)
    CONTINUE        reduce using rule 17 (loop_reserved -> PASS .)
    PASS            reduce using rule 17 (loop_reserved -> PASS .)
    FMT_LIBRARY     reduce using rule 17 (loop_reserved -> PASS .)
    FUNC            reduce using rule 17 (loop_reserved -> PASS .)
    IDENTIFIER      reduce using rule 17 (loop_reserved -> PASS .)
    INPUT           reduce using rule 17 (loop_reserved -> PASS .)
    VAR             reduce using rule 17 (loop_reserved -> PASS .)
    CONST           reduce using rule 17 (loop_reserved -> PASS .)
    IF              reduce using rule 17 (loop_reserved -> PASS .)
    SWITCH          reduce using rule 17 (loop_reserved -> PASS .)
    FOR             reduce using rule 17 (loop_reserved -> PASS .)
    STRING          reduce using rule 17 (loop_reserved -> PASS .)
    INTEGER         reduce using rule 17 (loop_reserved -> PASS .)
    FLOAT           reduce using rule 17 (loop_reserved -> PASS .)
    BOOLEAN         reduce using rule 17 (loop_reserved -> PASS .)
    $end            reduce using rule 17 (loop_reserved -> PASS .)
    RKEY            reduce using rule 17 (loop_reserved -> PASS .)


state 9

    (19) sentencia -> print .

    FMT_LIBRARY     reduce using rule 19 (sentencia -> print .)
    FUNC            reduce using rule 19 (sentencia -> print .)
    IDENTIFIER      reduce using rule 19 (sentencia -> print .)
    INPUT           reduce using rule 19 (sentencia -> print .)
    VAR             reduce using rule 19 (sentencia -> print .)
    CONST           reduce using rule 19 (sentencia -> print .)
    IF              reduce using rule 19 (sentencia -> print .)
    SWITCH          reduce using rule 19 (sentencia -> print .)
    FOR             reduce using rule 19 (sentencia -> print .)
    STRING          reduce using rule 19 (sentencia -> print .)
    INTEGER         reduce using rule 19 (sentencia -> print .)
    FLOAT           reduce using rule 19 (sentencia -> print .)
    BOOLEAN         reduce using rule 19 (sentencia -> print .)
    BREAK           reduce using rule 19 (sentencia -> print .)
    CONTINUE        reduce using rule 19 (sentencia -> print .)
    PASS            reduce using rule 19 (sentencia -> print .)
    $end            reduce using rule 19 (sentencia -> print .)
    RKEY            reduce using rule 19 (sentencia -> print .)
    RETURN          reduce using rule 19 (sentencia -> print .)


state 10

    (20) sentencia -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 20 (sentencia -> print_withoutvalue .)
    FUNC            reduce using rule 20 (sentencia -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 20 (sentencia -> print_withoutvalue .)
    INPUT           reduce using rule 20 (sentencia -> print_withoutvalue .)
    VAR             reduce using rule 20 (sentencia -> print_withoutvalue .)
    CONST           reduce using rule 20 (sentencia -> print_withoutvalue .)
    IF              reduce using rule 20 (sentencia -> print_withoutvalue .)
    SWITCH          reduce using rule 20 (sentencia -> print_withoutvalue .)
    FOR             reduce using rule 20 (sentencia -> print_withoutvalue .)
    STRING          reduce using rule 20 (sentencia -> print_withoutvalue .)
    INTEGER         reduce using rule 20 (sentencia -> print_withoutvalue .)
    FLOAT           reduce using rule 20 (sentencia -> print_withoutvalue .)
    BOOLEAN         reduce using rule 20 (sentencia -> print_withoutvalue .)
    BREAK           reduce using rule 20 (sentencia -> print_withoutvalue .)
    CONTINUE        reduce using rule 20 (sentencia -> print_withoutvalue .)
    PASS            reduce using rule 20 (sentencia -> print_withoutvalue .)
    $end            reduce using rule 20 (sentencia -> print_withoutvalue .)
    RKEY            reduce using rule 20 (sentencia -> print_withoutvalue .)
    RETURN          reduce using rule 20 (sentencia -> print_withoutvalue .)


state 11

    (21) sentencia -> def_function .

    FMT_LIBRARY     reduce using rule 21 (sentencia -> def_function .)
    FUNC            reduce using rule 21 (sentencia -> def_function .)
    IDENTIFIER      reduce using rule 21 (sentencia -> def_function .)
    INPUT           reduce using rule 21 (sentencia -> def_function .)
    VAR             reduce using rule 21 (sentencia -> def_function .)
    CONST           reduce using rule 21 (sentencia -> def_function .)
    IF              reduce using rule 21 (sentencia -> def_function .)
    SWITCH          reduce using rule 21 (sentencia -> def_function .)
    FOR             reduce using rule 21 (sentencia -> def_function .)
    STRING          reduce using rule 21 (sentencia -> def_function .)
    INTEGER         reduce using rule 21 (sentencia -> def_function .)
    FLOAT           reduce using rule 21 (sentencia -> def_function .)
    BOOLEAN         reduce using rule 21 (sentencia -> def_function .)
    BREAK           reduce using rule 21 (sentencia -> def_function .)
    CONTINUE        reduce using rule 21 (sentencia -> def_function .)
    PASS            reduce using rule 21 (sentencia -> def_function .)
    $end            reduce using rule 21 (sentencia -> def_function .)
    RKEY            reduce using rule 21 (sentencia -> def_function .)
    RETURN          reduce using rule 21 (sentencia -> def_function .)


state 12

    (22) sentencia -> call_function .
    (81) usable_value -> call_function .

    FMT_LIBRARY     reduce using rule 22 (sentencia -> call_function .)
    FUNC            reduce using rule 22 (sentencia -> call_function .)
    IDENTIFIER      reduce using rule 22 (sentencia -> call_function .)
    INPUT           reduce using rule 22 (sentencia -> call_function .)
    VAR             reduce using rule 22 (sentencia -> call_function .)
    CONST           reduce using rule 22 (sentencia -> call_function .)
    IF              reduce using rule 22 (sentencia -> call_function .)
    SWITCH          reduce using rule 22 (sentencia -> call_function .)
    FOR             reduce using rule 22 (sentencia -> call_function .)
    STRING          reduce using rule 22 (sentencia -> call_function .)
    INTEGER         reduce using rule 22 (sentencia -> call_function .)
    FLOAT           reduce using rule 22 (sentencia -> call_function .)
    BOOLEAN         reduce using rule 22 (sentencia -> call_function .)
    BREAK           reduce using rule 22 (sentencia -> call_function .)
    CONTINUE        reduce using rule 22 (sentencia -> call_function .)
    PASS            reduce using rule 22 (sentencia -> call_function .)
    $end            reduce using rule 22 (sentencia -> call_function .)
    RKEY            reduce using rule 22 (sentencia -> call_function .)
    RETURN          reduce using rule 22 (sentencia -> call_function .)
    PLUS            reduce using rule 81 (usable_value -> call_function .)
    MINUS           reduce using rule 81 (usable_value -> call_function .)
    DIVIDE          reduce using rule 81 (usable_value -> call_function .)
    TIMES           reduce using rule 81 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 81 (usable_value -> call_function .)
    MODULE          reduce using rule 81 (usable_value -> call_function .)
    EQUALEQUAL      reduce using rule 81 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 81 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 81 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 81 (usable_value -> call_function .)
    LESS            reduce using rule 81 (usable_value -> call_function .)
    GREATER         reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 81 (usable_value -> call_function .)


state 13

    (23) sentencia -> input .

    FMT_LIBRARY     reduce using rule 23 (sentencia -> input .)
    FUNC            reduce using rule 23 (sentencia -> input .)
    IDENTIFIER      reduce using rule 23 (sentencia -> input .)
    INPUT           reduce using rule 23 (sentencia -> input .)
    VAR             reduce using rule 23 (sentencia -> input .)
    CONST           reduce using rule 23 (sentencia -> input .)
    IF              reduce using rule 23 (sentencia -> input .)
    SWITCH          reduce using rule 23 (sentencia -> input .)
    FOR             reduce using rule 23 (sentencia -> input .)
    STRING          reduce using rule 23 (sentencia -> input .)
    INTEGER         reduce using rule 23 (sentencia -> input .)
    FLOAT           reduce using rule 23 (sentencia -> input .)
    BOOLEAN         reduce using rule 23 (sentencia -> input .)
    BREAK           reduce using rule 23 (sentencia -> input .)
    CONTINUE        reduce using rule 23 (sentencia -> input .)
    PASS            reduce using rule 23 (sentencia -> input .)
    $end            reduce using rule 23 (sentencia -> input .)
    RKEY            reduce using rule 23 (sentencia -> input .)
    RETURN          reduce using rule 23 (sentencia -> input .)


state 14

    (24) sentencia -> assignment .

    FMT_LIBRARY     reduce using rule 24 (sentencia -> assignment .)
    FUNC            reduce using rule 24 (sentencia -> assignment .)
    IDENTIFIER      reduce using rule 24 (sentencia -> assignment .)
    INPUT           reduce using rule 24 (sentencia -> assignment .)
    VAR             reduce using rule 24 (sentencia -> assignment .)
    CONST           reduce using rule 24 (sentencia -> assignment .)
    IF              reduce using rule 24 (sentencia -> assignment .)
    SWITCH          reduce using rule 24 (sentencia -> assignment .)
    FOR             reduce using rule 24 (sentencia -> assignment .)
    STRING          reduce using rule 24 (sentencia -> assignment .)
    INTEGER         reduce using rule 24 (sentencia -> assignment .)
    FLOAT           reduce using rule 24 (sentencia -> assignment .)
    BOOLEAN         reduce using rule 24 (sentencia -> assignment .)
    BREAK           reduce using rule 24 (sentencia -> assignment .)
    CONTINUE        reduce using rule 24 (sentencia -> assignment .)
    PASS            reduce using rule 24 (sentencia -> assignment .)
    $end            reduce using rule 24 (sentencia -> assignment .)
    RKEY            reduce using rule 24 (sentencia -> assignment .)
    RETURN          reduce using rule 24 (sentencia -> assignment .)


state 15

    (25) sentencia -> short_assignment .

    FMT_LIBRARY     reduce using rule 25 (sentencia -> short_assignment .)
    FUNC            reduce using rule 25 (sentencia -> short_assignment .)
    IDENTIFIER      reduce using rule 25 (sentencia -> short_assignment .)
    INPUT           reduce using rule 25 (sentencia -> short_assignment .)
    VAR             reduce using rule 25 (sentencia -> short_assignment .)
    CONST           reduce using rule 25 (sentencia -> short_assignment .)
    IF              reduce using rule 25 (sentencia -> short_assignment .)
    SWITCH          reduce using rule 25 (sentencia -> short_assignment .)
    FOR             reduce using rule 25 (sentencia -> short_assignment .)
    STRING          reduce using rule 25 (sentencia -> short_assignment .)
    INTEGER         reduce using rule 25 (sentencia -> short_assignment .)
    FLOAT           reduce using rule 25 (sentencia -> short_assignment .)
    BOOLEAN         reduce using rule 25 (sentencia -> short_assignment .)
    BREAK           reduce using rule 25 (sentencia -> short_assignment .)
    CONTINUE        reduce using rule 25 (sentencia -> short_assignment .)
    PASS            reduce using rule 25 (sentencia -> short_assignment .)
    $end            reduce using rule 25 (sentencia -> short_assignment .)
    RKEY            reduce using rule 25 (sentencia -> short_assignment .)
    RETURN          reduce using rule 25 (sentencia -> short_assignment .)


state 16

    (26) sentencia -> arithmetic_operation .
    (83) usable_value -> arithmetic_operation .

    FMT_LIBRARY     reduce using rule 26 (sentencia -> arithmetic_operation .)
    FUNC            reduce using rule 26 (sentencia -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 26 (sentencia -> arithmetic_operation .)
    INPUT           reduce using rule 26 (sentencia -> arithmetic_operation .)
    VAR             reduce using rule 26 (sentencia -> arithmetic_operation .)
    CONST           reduce using rule 26 (sentencia -> arithmetic_operation .)
    IF              reduce using rule 26 (sentencia -> arithmetic_operation .)
    SWITCH          reduce using rule 26 (sentencia -> arithmetic_operation .)
    FOR             reduce using rule 26 (sentencia -> arithmetic_operation .)
    STRING          reduce using rule 26 (sentencia -> arithmetic_operation .)
    INTEGER         reduce using rule 26 (sentencia -> arithmetic_operation .)
    FLOAT           reduce using rule 26 (sentencia -> arithmetic_operation .)
    BOOLEAN         reduce using rule 26 (sentencia -> arithmetic_operation .)
    BREAK           reduce using rule 26 (sentencia -> arithmetic_operation .)
    CONTINUE        reduce using rule 26 (sentencia -> arithmetic_operation .)
    PASS            reduce using rule 26 (sentencia -> arithmetic_operation .)
    $end            reduce using rule 26 (sentencia -> arithmetic_operation .)
    RKEY            reduce using rule 26 (sentencia -> arithmetic_operation .)
    RETURN          reduce using rule 26 (sentencia -> arithmetic_operation .)
    PLUS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 83 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 83 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 83 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    EQUALEQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 83 (usable_value -> arithmetic_operation .)


state 17

    (27) sentencia -> direct_arithmetic_operation .

    FMT_LIBRARY     reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FUNC            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    IDENTIFIER      reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    INPUT           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    VAR             reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    CONST           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    IF              reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    SWITCH          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FOR             reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    STRING          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    INTEGER         reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    FLOAT           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    BOOLEAN         reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    BREAK           reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    CONTINUE        reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    PASS            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    $end            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    RKEY            reduce using rule 27 (sentencia -> direct_arithmetic_operation .)
    RETURN          reduce using rule 27 (sentencia -> direct_arithmetic_operation .)


state 18

    (28) sentencia -> if_statement .

    FMT_LIBRARY     reduce using rule 28 (sentencia -> if_statement .)
    FUNC            reduce using rule 28 (sentencia -> if_statement .)
    IDENTIFIER      reduce using rule 28 (sentencia -> if_statement .)
    INPUT           reduce using rule 28 (sentencia -> if_statement .)
    VAR             reduce using rule 28 (sentencia -> if_statement .)
    CONST           reduce using rule 28 (sentencia -> if_statement .)
    IF              reduce using rule 28 (sentencia -> if_statement .)
    SWITCH          reduce using rule 28 (sentencia -> if_statement .)
    FOR             reduce using rule 28 (sentencia -> if_statement .)
    STRING          reduce using rule 28 (sentencia -> if_statement .)
    INTEGER         reduce using rule 28 (sentencia -> if_statement .)
    FLOAT           reduce using rule 28 (sentencia -> if_statement .)
    BOOLEAN         reduce using rule 28 (sentencia -> if_statement .)
    BREAK           reduce using rule 28 (sentencia -> if_statement .)
    CONTINUE        reduce using rule 28 (sentencia -> if_statement .)
    PASS            reduce using rule 28 (sentencia -> if_statement .)
    $end            reduce using rule 28 (sentencia -> if_statement .)
    RKEY            reduce using rule 28 (sentencia -> if_statement .)
    RETURN          reduce using rule 28 (sentencia -> if_statement .)


state 19

    (29) sentencia -> function_call .

    FMT_LIBRARY     reduce using rule 29 (sentencia -> function_call .)
    FUNC            reduce using rule 29 (sentencia -> function_call .)
    IDENTIFIER      reduce using rule 29 (sentencia -> function_call .)
    INPUT           reduce using rule 29 (sentencia -> function_call .)
    VAR             reduce using rule 29 (sentencia -> function_call .)
    CONST           reduce using rule 29 (sentencia -> function_call .)
    IF              reduce using rule 29 (sentencia -> function_call .)
    SWITCH          reduce using rule 29 (sentencia -> function_call .)
    FOR             reduce using rule 29 (sentencia -> function_call .)
    STRING          reduce using rule 29 (sentencia -> function_call .)
    INTEGER         reduce using rule 29 (sentencia -> function_call .)
    FLOAT           reduce using rule 29 (sentencia -> function_call .)
    BOOLEAN         reduce using rule 29 (sentencia -> function_call .)
    BREAK           reduce using rule 29 (sentencia -> function_call .)
    CONTINUE        reduce using rule 29 (sentencia -> function_call .)
    PASS            reduce using rule 29 (sentencia -> function_call .)
    $end            reduce using rule 29 (sentencia -> function_call .)
    RKEY            reduce using rule 29 (sentencia -> function_call .)
    RETURN          reduce using rule 29 (sentencia -> function_call .)


state 20

    (30) sentencia -> switch_statement .

    FMT_LIBRARY     reduce using rule 30 (sentencia -> switch_statement .)
    FUNC            reduce using rule 30 (sentencia -> switch_statement .)
    IDENTIFIER      reduce using rule 30 (sentencia -> switch_statement .)
    INPUT           reduce using rule 30 (sentencia -> switch_statement .)
    VAR             reduce using rule 30 (sentencia -> switch_statement .)
    CONST           reduce using rule 30 (sentencia -> switch_statement .)
    IF              reduce using rule 30 (sentencia -> switch_statement .)
    SWITCH          reduce using rule 30 (sentencia -> switch_statement .)
    FOR             reduce using rule 30 (sentencia -> switch_statement .)
    STRING          reduce using rule 30 (sentencia -> switch_statement .)
    INTEGER         reduce using rule 30 (sentencia -> switch_statement .)
    FLOAT           reduce using rule 30 (sentencia -> switch_statement .)
    BOOLEAN         reduce using rule 30 (sentencia -> switch_statement .)
    BREAK           reduce using rule 30 (sentencia -> switch_statement .)
    CONTINUE        reduce using rule 30 (sentencia -> switch_statement .)
    PASS            reduce using rule 30 (sentencia -> switch_statement .)
    $end            reduce using rule 30 (sentencia -> switch_statement .)
    RKEY            reduce using rule 30 (sentencia -> switch_statement .)
    RETURN          reduce using rule 30 (sentencia -> switch_statement .)


state 21

    (18) loop -> for .

    FMT_LIBRARY     reduce using rule 18 (loop -> for .)
    FUNC            reduce using rule 18 (loop -> for .)
    IDENTIFIER      reduce using rule 18 (loop -> for .)
    INPUT           reduce using rule 18 (loop -> for .)
    VAR             reduce using rule 18 (loop -> for .)
    CONST           reduce using rule 18 (loop -> for .)
    IF              reduce using rule 18 (loop -> for .)
    SWITCH          reduce using rule 18 (loop -> for .)
    FOR             reduce using rule 18 (loop -> for .)
    STRING          reduce using rule 18 (loop -> for .)
    INTEGER         reduce using rule 18 (loop -> for .)
    FLOAT           reduce using rule 18 (loop -> for .)
    BOOLEAN         reduce using rule 18 (loop -> for .)
    BREAK           reduce using rule 18 (loop -> for .)
    CONTINUE        reduce using rule 18 (loop -> for .)
    PASS            reduce using rule 18 (loop -> for .)
    $end            reduce using rule 18 (loop -> for .)
    RKEY            reduce using rule 18 (loop -> for .)
    RETURN          reduce using rule 18 (loop -> for .)


state 22

    (67) print -> FMT_LIBRARY . DOT PRINTLN LPAREN data RPAREN
    (68) print -> FMT_LIBRARY . DOT PRINTF LPAREN value RPAREN
    (69) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> FMT_LIBRARY . DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> FMT_LIBRARY . DOT PRINTF LPAREN RPAREN

    DOT             shift and go to state 42


state 23

    (80) usable_value -> value .

    PLUS            reduce using rule 80 (usable_value -> value .)
    MINUS           reduce using rule 80 (usable_value -> value .)
    DIVIDE          reduce using rule 80 (usable_value -> value .)
    TIMES           reduce using rule 80 (usable_value -> value .)
    ENTERE_DIVIDE   reduce using rule 80 (usable_value -> value .)
    MODULE          reduce using rule 80 (usable_value -> value .)
    EQUALEQUAL      reduce using rule 80 (usable_value -> value .)
    NOT_EQUAL       reduce using rule 80 (usable_value -> value .)
    LESS_EQUAL      reduce using rule 80 (usable_value -> value .)
    GREATER_EQUAL   reduce using rule 80 (usable_value -> value .)
    LESS            reduce using rule 80 (usable_value -> value .)
    GREATER         reduce using rule 80 (usable_value -> value .)
    LOGICAL_AND     reduce using rule 80 (usable_value -> value .)
    LOGICAL_OR      reduce using rule 80 (usable_value -> value .)
    FMT_LIBRARY     reduce using rule 80 (usable_value -> value .)
    FUNC            reduce using rule 80 (usable_value -> value .)
    IDENTIFIER      reduce using rule 80 (usable_value -> value .)
    INPUT           reduce using rule 80 (usable_value -> value .)
    VAR             reduce using rule 80 (usable_value -> value .)
    CONST           reduce using rule 80 (usable_value -> value .)
    IF              reduce using rule 80 (usable_value -> value .)
    SWITCH          reduce using rule 80 (usable_value -> value .)
    FOR             reduce using rule 80 (usable_value -> value .)
    STRING          reduce using rule 80 (usable_value -> value .)
    INTEGER         reduce using rule 80 (usable_value -> value .)
    FLOAT           reduce using rule 80 (usable_value -> value .)
    BOOLEAN         reduce using rule 80 (usable_value -> value .)
    BREAK           reduce using rule 80 (usable_value -> value .)
    CONTINUE        reduce using rule 80 (usable_value -> value .)
    PASS            reduce using rule 80 (usable_value -> value .)
    $end            reduce using rule 80 (usable_value -> value .)
    RKEY            reduce using rule 80 (usable_value -> value .)
    SEMICOLON       reduce using rule 80 (usable_value -> value .)
    CASE            reduce using rule 80 (usable_value -> value .)
    RETURN          reduce using rule 80 (usable_value -> value .)
    LKEY            reduce using rule 80 (usable_value -> value .)


state 24

    (123) def_function -> FUNC . IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> FUNC . IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC . FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    IDENTIFIER      shift and go to state 43
    FMT_LIBRARY     shift and go to state 44


state 25

    (141) call_function -> IDENTIFIER . LPAREN values RPAREN
    (79) short_assignment -> IDENTIFIER . SHORT_VAR_DECL usable_value
    (85) direct_arithmetic_operation -> IDENTIFIER . PLUS_EQ value
    (86) direct_arithmetic_operation -> IDENTIFIER . MINUS_EQ value
    (87) direct_arithmetic_operation -> IDENTIFIER . TIMES_EQ value
    (88) direct_arithmetic_operation -> IDENTIFIER . DIVIDE_EQ value
    (89) direct_arithmetic_operation -> IDENTIFIER . MODULO_EQ value
    (90) direct_arithmetic_operation -> IDENTIFIER . BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> IDENTIFIER . BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> IDENTIFIER . BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> IDENTIFIER . LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> IDENTIFIER . RIGHT_SHIFT_EQ value
    (36) function_call -> IDENTIFIER . LPAREN values RPAREN
    (82) usable_value -> IDENTIFIER .
    (151) value -> IDENTIFIER .

  ! reduce/reduce conflict for PLUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 82 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 45
    SHORT_VAR_DECL  shift and go to state 46
    PLUS_EQ         shift and go to state 47
    MINUS_EQ        shift and go to state 48
    TIMES_EQ        shift and go to state 49
    DIVIDE_EQ       shift and go to state 50
    MODULO_EQ       shift and go to state 51
    BITWISE_AND_EQ  shift and go to state 52
    BITWISE_OR_EQ   shift and go to state 53
    BITWISE_XOR_EQ  shift and go to state 54
    LEFT_SHIFT_EQ   shift and go to state 55
    RIGHT_SHIFT_EQ  shift and go to state 56
    PLUS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 82 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 82 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 82 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 82 (usable_value -> IDENTIFIER .)

  ! PLUS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! EQUALEQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 26

    (147) value -> STRING .

    PLUS            reduce using rule 147 (value -> STRING .)
    MINUS           reduce using rule 147 (value -> STRING .)
    DIVIDE          reduce using rule 147 (value -> STRING .)
    TIMES           reduce using rule 147 (value -> STRING .)
    ENTERE_DIVIDE   reduce using rule 147 (value -> STRING .)
    MODULE          reduce using rule 147 (value -> STRING .)
    EQUALEQUAL      reduce using rule 147 (value -> STRING .)
    NOT_EQUAL       reduce using rule 147 (value -> STRING .)
    LESS_EQUAL      reduce using rule 147 (value -> STRING .)
    GREATER_EQUAL   reduce using rule 147 (value -> STRING .)
    LESS            reduce using rule 147 (value -> STRING .)
    GREATER         reduce using rule 147 (value -> STRING .)
    LOGICAL_AND     reduce using rule 147 (value -> STRING .)
    LOGICAL_OR      reduce using rule 147 (value -> STRING .)
    LKEY            reduce using rule 147 (value -> STRING .)
    RPAREN          reduce using rule 147 (value -> STRING .)
    COMMA           reduce using rule 147 (value -> STRING .)
    FMT_LIBRARY     reduce using rule 147 (value -> STRING .)
    FUNC            reduce using rule 147 (value -> STRING .)
    IDENTIFIER      reduce using rule 147 (value -> STRING .)
    INPUT           reduce using rule 147 (value -> STRING .)
    VAR             reduce using rule 147 (value -> STRING .)
    CONST           reduce using rule 147 (value -> STRING .)
    IF              reduce using rule 147 (value -> STRING .)
    SWITCH          reduce using rule 147 (value -> STRING .)
    FOR             reduce using rule 147 (value -> STRING .)
    STRING          reduce using rule 147 (value -> STRING .)
    INTEGER         reduce using rule 147 (value -> STRING .)
    FLOAT           reduce using rule 147 (value -> STRING .)
    BOOLEAN         reduce using rule 147 (value -> STRING .)
    BREAK           reduce using rule 147 (value -> STRING .)
    CONTINUE        reduce using rule 147 (value -> STRING .)
    PASS            reduce using rule 147 (value -> STRING .)
    $end            reduce using rule 147 (value -> STRING .)
    RKEY            reduce using rule 147 (value -> STRING .)
    SEMICOLON       reduce using rule 147 (value -> STRING .)
    CASE            reduce using rule 147 (value -> STRING .)
    RETURN          reduce using rule 147 (value -> STRING .)
    COLON           reduce using rule 147 (value -> STRING .)


state 27

    (149) value -> FLOAT .

    PLUS            reduce using rule 149 (value -> FLOAT .)
    MINUS           reduce using rule 149 (value -> FLOAT .)
    DIVIDE          reduce using rule 149 (value -> FLOAT .)
    TIMES           reduce using rule 149 (value -> FLOAT .)
    ENTERE_DIVIDE   reduce using rule 149 (value -> FLOAT .)
    MODULE          reduce using rule 149 (value -> FLOAT .)
    EQUALEQUAL      reduce using rule 149 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 149 (value -> FLOAT .)
    LESS_EQUAL      reduce using rule 149 (value -> FLOAT .)
    GREATER_EQUAL   reduce using rule 149 (value -> FLOAT .)
    LESS            reduce using rule 149 (value -> FLOAT .)
    GREATER         reduce using rule 149 (value -> FLOAT .)
    LOGICAL_AND     reduce using rule 149 (value -> FLOAT .)
    LOGICAL_OR      reduce using rule 149 (value -> FLOAT .)
    LKEY            reduce using rule 149 (value -> FLOAT .)
    RPAREN          reduce using rule 149 (value -> FLOAT .)
    COMMA           reduce using rule 149 (value -> FLOAT .)
    FMT_LIBRARY     reduce using rule 149 (value -> FLOAT .)
    FUNC            reduce using rule 149 (value -> FLOAT .)
    IDENTIFIER      reduce using rule 149 (value -> FLOAT .)
    INPUT           reduce using rule 149 (value -> FLOAT .)
    VAR             reduce using rule 149 (value -> FLOAT .)
    CONST           reduce using rule 149 (value -> FLOAT .)
    IF              reduce using rule 149 (value -> FLOAT .)
    SWITCH          reduce using rule 149 (value -> FLOAT .)
    FOR             reduce using rule 149 (value -> FLOAT .)
    STRING          reduce using rule 149 (value -> FLOAT .)
    INTEGER         reduce using rule 149 (value -> FLOAT .)
    FLOAT           reduce using rule 149 (value -> FLOAT .)
    BOOLEAN         reduce using rule 149 (value -> FLOAT .)
    BREAK           reduce using rule 149 (value -> FLOAT .)
    CONTINUE        reduce using rule 149 (value -> FLOAT .)
    PASS            reduce using rule 149 (value -> FLOAT .)
    $end            reduce using rule 149 (value -> FLOAT .)
    RKEY            reduce using rule 149 (value -> FLOAT .)
    SEMICOLON       reduce using rule 149 (value -> FLOAT .)
    CASE            reduce using rule 149 (value -> FLOAT .)
    RETURN          reduce using rule 149 (value -> FLOAT .)
    COLON           reduce using rule 149 (value -> FLOAT .)


state 28

    (148) value -> INTEGER .

    PLUS            reduce using rule 148 (value -> INTEGER .)
    MINUS           reduce using rule 148 (value -> INTEGER .)
    DIVIDE          reduce using rule 148 (value -> INTEGER .)
    TIMES           reduce using rule 148 (value -> INTEGER .)
    ENTERE_DIVIDE   reduce using rule 148 (value -> INTEGER .)
    MODULE          reduce using rule 148 (value -> INTEGER .)
    EQUALEQUAL      reduce using rule 148 (value -> INTEGER .)
    NOT_EQUAL       reduce using rule 148 (value -> INTEGER .)
    LESS_EQUAL      reduce using rule 148 (value -> INTEGER .)
    GREATER_EQUAL   reduce using rule 148 (value -> INTEGER .)
    LESS            reduce using rule 148 (value -> INTEGER .)
    GREATER         reduce using rule 148 (value -> INTEGER .)
    LOGICAL_AND     reduce using rule 148 (value -> INTEGER .)
    LOGICAL_OR      reduce using rule 148 (value -> INTEGER .)
    LKEY            reduce using rule 148 (value -> INTEGER .)
    RPAREN          reduce using rule 148 (value -> INTEGER .)
    COMMA           reduce using rule 148 (value -> INTEGER .)
    FMT_LIBRARY     reduce using rule 148 (value -> INTEGER .)
    FUNC            reduce using rule 148 (value -> INTEGER .)
    IDENTIFIER      reduce using rule 148 (value -> INTEGER .)
    INPUT           reduce using rule 148 (value -> INTEGER .)
    VAR             reduce using rule 148 (value -> INTEGER .)
    CONST           reduce using rule 148 (value -> INTEGER .)
    IF              reduce using rule 148 (value -> INTEGER .)
    SWITCH          reduce using rule 148 (value -> INTEGER .)
    FOR             reduce using rule 148 (value -> INTEGER .)
    STRING          reduce using rule 148 (value -> INTEGER .)
    INTEGER         reduce using rule 148 (value -> INTEGER .)
    FLOAT           reduce using rule 148 (value -> INTEGER .)
    BOOLEAN         reduce using rule 148 (value -> INTEGER .)
    BREAK           reduce using rule 148 (value -> INTEGER .)
    CONTINUE        reduce using rule 148 (value -> INTEGER .)
    PASS            reduce using rule 148 (value -> INTEGER .)
    $end            reduce using rule 148 (value -> INTEGER .)
    RKEY            reduce using rule 148 (value -> INTEGER .)
    SEMICOLON       reduce using rule 148 (value -> INTEGER .)
    CASE            reduce using rule 148 (value -> INTEGER .)
    RETURN          reduce using rule 148 (value -> INTEGER .)
    COLON           reduce using rule 148 (value -> INTEGER .)


state 29

    (150) value -> BOOLEAN .

    PLUS            reduce using rule 150 (value -> BOOLEAN .)
    MINUS           reduce using rule 150 (value -> BOOLEAN .)
    DIVIDE          reduce using rule 150 (value -> BOOLEAN .)
    TIMES           reduce using rule 150 (value -> BOOLEAN .)
    ENTERE_DIVIDE   reduce using rule 150 (value -> BOOLEAN .)
    MODULE          reduce using rule 150 (value -> BOOLEAN .)
    EQUALEQUAL      reduce using rule 150 (value -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 150 (value -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 150 (value -> BOOLEAN .)
    GREATER_EQUAL   reduce using rule 150 (value -> BOOLEAN .)
    LESS            reduce using rule 150 (value -> BOOLEAN .)
    GREATER         reduce using rule 150 (value -> BOOLEAN .)
    LOGICAL_AND     reduce using rule 150 (value -> BOOLEAN .)
    LOGICAL_OR      reduce using rule 150 (value -> BOOLEAN .)
    LKEY            reduce using rule 150 (value -> BOOLEAN .)
    RPAREN          reduce using rule 150 (value -> BOOLEAN .)
    COMMA           reduce using rule 150 (value -> BOOLEAN .)
    FMT_LIBRARY     reduce using rule 150 (value -> BOOLEAN .)
    FUNC            reduce using rule 150 (value -> BOOLEAN .)
    IDENTIFIER      reduce using rule 150 (value -> BOOLEAN .)
    INPUT           reduce using rule 150 (value -> BOOLEAN .)
    VAR             reduce using rule 150 (value -> BOOLEAN .)
    CONST           reduce using rule 150 (value -> BOOLEAN .)
    IF              reduce using rule 150 (value -> BOOLEAN .)
    SWITCH          reduce using rule 150 (value -> BOOLEAN .)
    FOR             reduce using rule 150 (value -> BOOLEAN .)
    STRING          reduce using rule 150 (value -> BOOLEAN .)
    INTEGER         reduce using rule 150 (value -> BOOLEAN .)
    FLOAT           reduce using rule 150 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 150 (value -> BOOLEAN .)
    BREAK           reduce using rule 150 (value -> BOOLEAN .)
    CONTINUE        reduce using rule 150 (value -> BOOLEAN .)
    PASS            reduce using rule 150 (value -> BOOLEAN .)
    $end            reduce using rule 150 (value -> BOOLEAN .)
    RKEY            reduce using rule 150 (value -> BOOLEAN .)
    SEMICOLON       reduce using rule 150 (value -> BOOLEAN .)
    CASE            reduce using rule 150 (value -> BOOLEAN .)
    RETURN          reduce using rule 150 (value -> BOOLEAN .)
    COLON           reduce using rule 150 (value -> BOOLEAN .)


state 30

    (156) input -> INPUT . LPAREN RPAREN
    (157) input -> INPUT . LPAREN value RPAREN
    (158) input -> INPUT . LPAREN identifiers RPAREN

    LPAREN          shift and go to state 57


state 31

    (77) assignment -> VAR . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 58


state 32

    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 33

    (78) assignment -> CONST . IDENTIFIER data_type EQUAL usable_value

    IDENTIFIER      shift and go to state 73


state 34

    (37) if_statement -> IF . comparation_operation LKEY program RKEY
    (38) if_statement -> IF . comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> IF . comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF . comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 74
    usable_value                   shift and go to state 75
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78

state 35

    (84) usable_value -> comparation_operation .

    PLUS            reduce using rule 84 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 84 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 84 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 84 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 84 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 84 (usable_value -> comparation_operation .)
    EQUALEQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 84 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 84 (usable_value -> comparation_operation .)
    LESS            reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 84 (usable_value -> comparation_operation .)
    FMT_LIBRARY     reduce using rule 84 (usable_value -> comparation_operation .)
    FUNC            reduce using rule 84 (usable_value -> comparation_operation .)
    IDENTIFIER      reduce using rule 84 (usable_value -> comparation_operation .)
    INPUT           reduce using rule 84 (usable_value -> comparation_operation .)
    VAR             reduce using rule 84 (usable_value -> comparation_operation .)
    CONST           reduce using rule 84 (usable_value -> comparation_operation .)
    IF              reduce using rule 84 (usable_value -> comparation_operation .)
    SWITCH          reduce using rule 84 (usable_value -> comparation_operation .)
    FOR             reduce using rule 84 (usable_value -> comparation_operation .)
    STRING          reduce using rule 84 (usable_value -> comparation_operation .)
    INTEGER         reduce using rule 84 (usable_value -> comparation_operation .)
    FLOAT           reduce using rule 84 (usable_value -> comparation_operation .)
    BOOLEAN         reduce using rule 84 (usable_value -> comparation_operation .)
    BREAK           reduce using rule 84 (usable_value -> comparation_operation .)
    CONTINUE        reduce using rule 84 (usable_value -> comparation_operation .)
    PASS            reduce using rule 84 (usable_value -> comparation_operation .)
    $end            reduce using rule 84 (usable_value -> comparation_operation .)
    RKEY            reduce using rule 84 (usable_value -> comparation_operation .)
    SEMICOLON       reduce using rule 84 (usable_value -> comparation_operation .)
    CASE            reduce using rule 84 (usable_value -> comparation_operation .)
    RETURN          reduce using rule 84 (usable_value -> comparation_operation .)
    LKEY            reduce using rule 84 (usable_value -> comparation_operation .)


state 36

    (44) switch_statement -> SWITCH . value LKEY switch_cases RKEY
    (45) switch_statement -> SWITCH . LKEY switch_cases RKEY
    (46) switch_statement -> SWITCH . switch_expression LKEY switch_cases RKEY
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (47) switch_expression -> . value
    (48) switch_expression -> .

  ! shift/reduce conflict for LKEY resolved as shift
    LKEY            shift and go to state 80
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

  ! LKEY            [ reduce using rule 48 (switch_expression -> .) ]

    value                          shift and go to state 79
    switch_expression              shift and go to state 81

state 37

    (31) for -> FOR . LKEY loop_program RKEY
    (32) for -> FOR . comparation_operation LKEY loop_program RKEY
    (33) for -> FOR . short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value

    LKEY            shift and go to state 83
    IDENTIFIER      shift and go to state 86
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 84
    short_assignment               shift and go to state 85
    usable_value                   shift and go to state 75
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78

state 38

    (3) loop_program -> loop_program program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    BREAK           reduce using rule 3 (loop_program -> loop_program program .)
    CONTINUE        reduce using rule 3 (loop_program -> loop_program program .)
    PASS            reduce using rule 3 (loop_program -> loop_program program .)
    $end            reduce using rule 3 (loop_program -> loop_program program .)
    RKEY            reduce using rule 3 (loop_program -> loop_program program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! FMT_LIBRARY     [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FUNC            [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! IDENTIFIER      [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INPUT           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! VAR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! CONST           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! IF              [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! SWITCH          [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FOR             [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! STRING          [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! INTEGER         [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! FLOAT           [ reduce using rule 3 (loop_program -> loop_program program .) ]
  ! BOOLEAN         [ reduce using rule 3 (loop_program -> loop_program program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 39

    (4) loop_program -> loop_program loop_reserved .

    BREAK           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    CONTINUE        reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    PASS            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FMT_LIBRARY     reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FUNC            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    IDENTIFIER      reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    INPUT           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    VAR             reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    CONST           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    IF              reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    SWITCH          reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FOR             reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    STRING          reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    INTEGER         reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    FLOAT           reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    BOOLEAN         reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    $end            reduce using rule 4 (loop_program -> loop_program loop_reserved .)
    RKEY            reduce using rule 4 (loop_program -> loop_program loop_reserved .)


state 40

    (13) program -> program sentencia .

    FMT_LIBRARY     reduce using rule 13 (program -> program sentencia .)
    FUNC            reduce using rule 13 (program -> program sentencia .)
    IDENTIFIER      reduce using rule 13 (program -> program sentencia .)
    INPUT           reduce using rule 13 (program -> program sentencia .)
    VAR             reduce using rule 13 (program -> program sentencia .)
    CONST           reduce using rule 13 (program -> program sentencia .)
    IF              reduce using rule 13 (program -> program sentencia .)
    SWITCH          reduce using rule 13 (program -> program sentencia .)
    FOR             reduce using rule 13 (program -> program sentencia .)
    STRING          reduce using rule 13 (program -> program sentencia .)
    INTEGER         reduce using rule 13 (program -> program sentencia .)
    FLOAT           reduce using rule 13 (program -> program sentencia .)
    BOOLEAN         reduce using rule 13 (program -> program sentencia .)
    BREAK           reduce using rule 13 (program -> program sentencia .)
    CONTINUE        reduce using rule 13 (program -> program sentencia .)
    PASS            reduce using rule 13 (program -> program sentencia .)
    $end            reduce using rule 13 (program -> program sentencia .)
    RKEY            reduce using rule 13 (program -> program sentencia .)
    RETURN          reduce using rule 13 (program -> program sentencia .)


state 41

    (14) program -> program loop .

    FMT_LIBRARY     reduce using rule 14 (program -> program loop .)
    FUNC            reduce using rule 14 (program -> program loop .)
    IDENTIFIER      reduce using rule 14 (program -> program loop .)
    INPUT           reduce using rule 14 (program -> program loop .)
    VAR             reduce using rule 14 (program -> program loop .)
    CONST           reduce using rule 14 (program -> program loop .)
    IF              reduce using rule 14 (program -> program loop .)
    SWITCH          reduce using rule 14 (program -> program loop .)
    FOR             reduce using rule 14 (program -> program loop .)
    STRING          reduce using rule 14 (program -> program loop .)
    INTEGER         reduce using rule 14 (program -> program loop .)
    FLOAT           reduce using rule 14 (program -> program loop .)
    BOOLEAN         reduce using rule 14 (program -> program loop .)
    BREAK           reduce using rule 14 (program -> program loop .)
    CONTINUE        reduce using rule 14 (program -> program loop .)
    PASS            reduce using rule 14 (program -> program loop .)
    $end            reduce using rule 14 (program -> program loop .)
    RKEY            reduce using rule 14 (program -> program loop .)
    RETURN          reduce using rule 14 (program -> program loop .)


state 42

    (67) print -> FMT_LIBRARY DOT . PRINTLN LPAREN data RPAREN
    (68) print -> FMT_LIBRARY DOT . PRINTF LPAREN value RPAREN
    (69) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA RPAREN
    (70) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> FMT_LIBRARY DOT . PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> FMT_LIBRARY DOT . PRINTF LPAREN RPAREN

    PRINTLN         shift and go to state 87
    PRINTF          shift and go to state 88


state 43

    (123) def_function -> FUNC IDENTIFIER . LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> FUNC IDENTIFIER . LPAREN parameters RPAREN data_type LKEY func_program RKEY

    LPAREN          shift and go to state 89


state 44

    (125) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY . DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    DOT             shift and go to state 90


state 45

    (141) call_function -> IDENTIFIER LPAREN . values RPAREN
    (36) function_call -> IDENTIFIER LPAREN . values RPAREN
    (145) values -> . value
    (146) values -> . values COMMA value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    values                         shift and go to state 91
    value                          shift and go to state 92

state 46

    (79) short_assignment -> IDENTIFIER SHORT_VAR_DECL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 93
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 47

    (85) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 94

state 48

    (86) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 95

state 49

    (87) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 96

state 50

    (88) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 97

state 51

    (89) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 98

state 52

    (90) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 99

state 53

    (91) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 100

state 54

    (92) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 101

state 55

    (93) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 102

state 56

    (94) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 103

state 57

    (156) input -> INPUT LPAREN . RPAREN
    (157) input -> INPUT LPAREN . value RPAREN
    (158) input -> INPUT LPAREN . identifiers RPAREN
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (109) identifiers -> . IDENTIFIER
    (110) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 104
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 107

    value                          shift and go to state 105
    identifiers                    shift and go to state 106

state 58

    (77) assignment -> VAR IDENTIFIER . data_type EQUAL usable_value
    (152) data_type -> . INTEGER_DATA_TYPE
    (153) data_type -> . FLOAT_DATA_TYPE
    (154) data_type -> . BOOLEAN_DATA_TYPE
    (155) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 109
    FLOAT_DATA_TYPE shift and go to state 110
    BOOLEAN_DATA_TYPE shift and go to state 111
    STRING_DATA_TYPE shift and go to state 112

    data_type                      shift and go to state 108

state 59

    (95) arithmetic_operation -> usable_value PLUS . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 113
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 60

    (96) arithmetic_operation -> usable_value MINUS . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 114
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 61

    (97) arithmetic_operation -> usable_value DIVIDE . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 115
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 62

    (98) arithmetic_operation -> usable_value TIMES . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 116
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 63

    (99) arithmetic_operation -> usable_value ENTERE_DIVIDE . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 117
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 64

    (100) arithmetic_operation -> usable_value MODULE . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 118
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 65

    (101) comparation_operation -> usable_value EQUALEQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 119
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 66

    (102) comparation_operation -> usable_value NOT_EQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 120
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 67

    (103) comparation_operation -> usable_value LESS_EQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 121
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 68

    (104) comparation_operation -> usable_value GREATER_EQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 122
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 69

    (105) comparation_operation -> usable_value LESS . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 123
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 70

    (106) comparation_operation -> usable_value GREATER . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 124
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 71

    (107) comparation_operation -> usable_value LOGICAL_AND . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 125
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 72

    (108) comparation_operation -> usable_value LOGICAL_OR . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 126
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 73

    (78) assignment -> CONST IDENTIFIER . data_type EQUAL usable_value
    (152) data_type -> . INTEGER_DATA_TYPE
    (153) data_type -> . FLOAT_DATA_TYPE
    (154) data_type -> . BOOLEAN_DATA_TYPE
    (155) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 109
    FLOAT_DATA_TYPE shift and go to state 110
    BOOLEAN_DATA_TYPE shift and go to state 111
    STRING_DATA_TYPE shift and go to state 112

    data_type                      shift and go to state 127

state 74

    (37) if_statement -> IF comparation_operation . LKEY program RKEY
    (38) if_statement -> IF comparation_operation . LKEY program RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation . LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation . LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (84) usable_value -> comparation_operation .

    LKEY            shift and go to state 128
    EQUALEQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 84 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 84 (usable_value -> comparation_operation .)
    LESS            reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 84 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 84 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 84 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 84 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 84 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 84 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 84 (usable_value -> comparation_operation .)


state 75

    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value

    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64


state 76

    (81) usable_value -> call_function .

    EQUALEQUAL      reduce using rule 81 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 81 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 81 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 81 (usable_value -> call_function .)
    LESS            reduce using rule 81 (usable_value -> call_function .)
    GREATER         reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 81 (usable_value -> call_function .)
    PLUS            reduce using rule 81 (usable_value -> call_function .)
    MINUS           reduce using rule 81 (usable_value -> call_function .)
    DIVIDE          reduce using rule 81 (usable_value -> call_function .)
    TIMES           reduce using rule 81 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 81 (usable_value -> call_function .)
    MODULE          reduce using rule 81 (usable_value -> call_function .)
    FMT_LIBRARY     reduce using rule 81 (usable_value -> call_function .)
    FUNC            reduce using rule 81 (usable_value -> call_function .)
    IDENTIFIER      reduce using rule 81 (usable_value -> call_function .)
    INPUT           reduce using rule 81 (usable_value -> call_function .)
    VAR             reduce using rule 81 (usable_value -> call_function .)
    CONST           reduce using rule 81 (usable_value -> call_function .)
    IF              reduce using rule 81 (usable_value -> call_function .)
    SWITCH          reduce using rule 81 (usable_value -> call_function .)
    FOR             reduce using rule 81 (usable_value -> call_function .)
    STRING          reduce using rule 81 (usable_value -> call_function .)
    INTEGER         reduce using rule 81 (usable_value -> call_function .)
    FLOAT           reduce using rule 81 (usable_value -> call_function .)
    BOOLEAN         reduce using rule 81 (usable_value -> call_function .)
    BREAK           reduce using rule 81 (usable_value -> call_function .)
    CONTINUE        reduce using rule 81 (usable_value -> call_function .)
    PASS            reduce using rule 81 (usable_value -> call_function .)
    $end            reduce using rule 81 (usable_value -> call_function .)
    RKEY            reduce using rule 81 (usable_value -> call_function .)
    SEMICOLON       reduce using rule 81 (usable_value -> call_function .)
    CASE            reduce using rule 81 (usable_value -> call_function .)
    RETURN          reduce using rule 81 (usable_value -> call_function .)
    LKEY            reduce using rule 81 (usable_value -> call_function .)


state 77

    (82) usable_value -> IDENTIFIER .
    (151) value -> IDENTIFIER .
    (141) call_function -> IDENTIFIER . LPAREN values RPAREN

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FMT_LIBRARY resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNC resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for INPUT resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for BREAK resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PASS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for RKEY resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 82 (usable_value -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 82 (usable_value -> IDENTIFIER .)
    PLUS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 82 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 82 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 82 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    FMT_LIBRARY     reduce using rule 82 (usable_value -> IDENTIFIER .)
    FUNC            reduce using rule 82 (usable_value -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (usable_value -> IDENTIFIER .)
    INPUT           reduce using rule 82 (usable_value -> IDENTIFIER .)
    VAR             reduce using rule 82 (usable_value -> IDENTIFIER .)
    CONST           reduce using rule 82 (usable_value -> IDENTIFIER .)
    IF              reduce using rule 82 (usable_value -> IDENTIFIER .)
    SWITCH          reduce using rule 82 (usable_value -> IDENTIFIER .)
    FOR             reduce using rule 82 (usable_value -> IDENTIFIER .)
    STRING          reduce using rule 82 (usable_value -> IDENTIFIER .)
    INTEGER         reduce using rule 82 (usable_value -> IDENTIFIER .)
    FLOAT           reduce using rule 82 (usable_value -> IDENTIFIER .)
    BOOLEAN         reduce using rule 82 (usable_value -> IDENTIFIER .)
    BREAK           reduce using rule 82 (usable_value -> IDENTIFIER .)
    CONTINUE        reduce using rule 82 (usable_value -> IDENTIFIER .)
    PASS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    $end            reduce using rule 82 (usable_value -> IDENTIFIER .)
    RKEY            reduce using rule 82 (usable_value -> IDENTIFIER .)
    SEMICOLON       reduce using rule 82 (usable_value -> IDENTIFIER .)
    CASE            reduce using rule 82 (usable_value -> IDENTIFIER .)
    RETURN          reduce using rule 82 (usable_value -> IDENTIFIER .)
    LKEY            reduce using rule 82 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 129

  ! EQUALEQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! FMT_LIBRARY     [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! INPUT           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! VAR             [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! SWITCH          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! BOOLEAN         [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! BREAK           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! CONTINUE        [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! PASS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! RKEY            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 78

    (83) usable_value -> arithmetic_operation .

    EQUALEQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 83 (usable_value -> arithmetic_operation .)
    PLUS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 83 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 83 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 83 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    FMT_LIBRARY     reduce using rule 83 (usable_value -> arithmetic_operation .)
    FUNC            reduce using rule 83 (usable_value -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 83 (usable_value -> arithmetic_operation .)
    INPUT           reduce using rule 83 (usable_value -> arithmetic_operation .)
    VAR             reduce using rule 83 (usable_value -> arithmetic_operation .)
    CONST           reduce using rule 83 (usable_value -> arithmetic_operation .)
    IF              reduce using rule 83 (usable_value -> arithmetic_operation .)
    SWITCH          reduce using rule 83 (usable_value -> arithmetic_operation .)
    FOR             reduce using rule 83 (usable_value -> arithmetic_operation .)
    STRING          reduce using rule 83 (usable_value -> arithmetic_operation .)
    INTEGER         reduce using rule 83 (usable_value -> arithmetic_operation .)
    FLOAT           reduce using rule 83 (usable_value -> arithmetic_operation .)
    BOOLEAN         reduce using rule 83 (usable_value -> arithmetic_operation .)
    BREAK           reduce using rule 83 (usable_value -> arithmetic_operation .)
    CONTINUE        reduce using rule 83 (usable_value -> arithmetic_operation .)
    PASS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    $end            reduce using rule 83 (usable_value -> arithmetic_operation .)
    RKEY            reduce using rule 83 (usable_value -> arithmetic_operation .)
    SEMICOLON       reduce using rule 83 (usable_value -> arithmetic_operation .)
    CASE            reduce using rule 83 (usable_value -> arithmetic_operation .)
    RETURN          reduce using rule 83 (usable_value -> arithmetic_operation .)
    LKEY            reduce using rule 83 (usable_value -> arithmetic_operation .)


state 79

    (44) switch_statement -> SWITCH value . LKEY switch_cases RKEY
    (47) switch_expression -> value .

  ! shift/reduce conflict for LKEY resolved as shift
    LKEY            shift and go to state 130

  ! LKEY            [ reduce using rule 47 (switch_expression -> value .) ]


state 80

    (45) switch_statement -> SWITCH LKEY . switch_cases RKEY
    (49) switch_cases -> . switch_case switch_cases
    (50) switch_cases -> .
    (51) switch_case -> . CASE value COLON statements
    (52) switch_case -> . CASE COLON statements

    RKEY            reduce using rule 50 (switch_cases -> .)
    CASE            shift and go to state 133

    switch_cases                   shift and go to state 131
    switch_case                    shift and go to state 132

state 81

    (46) switch_statement -> SWITCH switch_expression . LKEY switch_cases RKEY

    LKEY            shift and go to state 134


state 82

    (151) value -> IDENTIFIER .

    LKEY            reduce using rule 151 (value -> IDENTIFIER .)
    RPAREN          reduce using rule 151 (value -> IDENTIFIER .)
    COMMA           reduce using rule 151 (value -> IDENTIFIER .)
    FMT_LIBRARY     reduce using rule 151 (value -> IDENTIFIER .)
    FUNC            reduce using rule 151 (value -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (value -> IDENTIFIER .)
    INPUT           reduce using rule 151 (value -> IDENTIFIER .)
    VAR             reduce using rule 151 (value -> IDENTIFIER .)
    CONST           reduce using rule 151 (value -> IDENTIFIER .)
    IF              reduce using rule 151 (value -> IDENTIFIER .)
    SWITCH          reduce using rule 151 (value -> IDENTIFIER .)
    FOR             reduce using rule 151 (value -> IDENTIFIER .)
    STRING          reduce using rule 151 (value -> IDENTIFIER .)
    INTEGER         reduce using rule 151 (value -> IDENTIFIER .)
    FLOAT           reduce using rule 151 (value -> IDENTIFIER .)
    BOOLEAN         reduce using rule 151 (value -> IDENTIFIER .)
    BREAK           reduce using rule 151 (value -> IDENTIFIER .)
    CONTINUE        reduce using rule 151 (value -> IDENTIFIER .)
    PASS            reduce using rule 151 (value -> IDENTIFIER .)
    $end            reduce using rule 151 (value -> IDENTIFIER .)
    RKEY            reduce using rule 151 (value -> IDENTIFIER .)
    CASE            reduce using rule 151 (value -> IDENTIFIER .)
    RETURN          reduce using rule 151 (value -> IDENTIFIER .)
    COLON           reduce using rule 151 (value -> IDENTIFIER .)


state 83

    (31) for -> FOR LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    loop_program                   shift and go to state 135
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 84

    (32) for -> FOR comparation_operation . LKEY loop_program RKEY
    (84) usable_value -> comparation_operation .

    LKEY            shift and go to state 136
    EQUALEQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 84 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 84 (usable_value -> comparation_operation .)
    LESS            reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 84 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 84 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 84 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 84 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 84 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 84 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 84 (usable_value -> comparation_operation .)


state 85

    (33) for -> FOR short_assignment . SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY

    SEMICOLON       shift and go to state 137


state 86

    (79) short_assignment -> IDENTIFIER . SHORT_VAR_DECL usable_value
    (82) usable_value -> IDENTIFIER .
    (151) value -> IDENTIFIER .
    (141) call_function -> IDENTIFIER . LPAREN values RPAREN

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for ENTERE_DIVIDE resolved using rule 82 (usable_value -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 82 (usable_value -> IDENTIFIER .)
    SHORT_VAR_DECL  shift and go to state 46
    EQUALEQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 82 (usable_value -> IDENTIFIER .)
    LESS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    GREATER         reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 82 (usable_value -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 82 (usable_value -> IDENTIFIER .)
    PLUS            reduce using rule 82 (usable_value -> IDENTIFIER .)
    MINUS           reduce using rule 82 (usable_value -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    TIMES           reduce using rule 82 (usable_value -> IDENTIFIER .)
    ENTERE_DIVIDE   reduce using rule 82 (usable_value -> IDENTIFIER .)
    MODULE          reduce using rule 82 (usable_value -> IDENTIFIER .)
    LPAREN          shift and go to state 129

  ! EQUALEQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS_EQUAL      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER_EQUAL   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_AND     [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! LOGICAL_OR      [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 87

    (67) print -> FMT_LIBRARY DOT PRINTLN . LPAREN data RPAREN
    (75) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 138


state 88

    (68) print -> FMT_LIBRARY DOT PRINTF . LPAREN value RPAREN
    (69) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA RPAREN
    (70) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA data RPAREN
    (76) print_withoutvalue -> FMT_LIBRARY DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 139


state 89

    (123) def_function -> FUNC IDENTIFIER LPAREN . parameters RPAREN LKEY func_program RKEY
    (124) def_function -> FUNC IDENTIFIER LPAREN . parameters RPAREN data_type LKEY func_program RKEY
    (142) parameters -> . parameter
    (143) parameters -> . parameters COMMA parameter
    (144) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 140

    parameters                     shift and go to state 141
    parameter                      shift and go to state 142

state 90

    (125) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT . PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    PRINTF          shift and go to state 143


state 91

    (141) call_function -> IDENTIFIER LPAREN values . RPAREN
    (36) function_call -> IDENTIFIER LPAREN values . RPAREN
    (146) values -> values . COMMA value

    RPAREN          shift and go to state 144
    COMMA           shift and go to state 145


state 92

    (145) values -> value .

    RPAREN          reduce using rule 145 (values -> value .)
    COMMA           reduce using rule 145 (values -> value .)


state 93

    (79) short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FUNC            reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    IDENTIFIER      reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INPUT           reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    VAR             reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CONST           reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    IF              reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    SWITCH          reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FOR             reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    STRING          reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    INTEGER         reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    FLOAT           reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BOOLEAN         reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    BREAK           reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CONTINUE        reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    PASS            reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    $end            reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    RKEY            reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    SEMICOLON       reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    CASE            reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    RETURN          reduce using rule 79 (short_assignment -> IDENTIFIER SHORT_VAR_DECL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 94

    (85) direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .

    FMT_LIBRARY     reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FUNC            reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    IDENTIFIER      reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INPUT           reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    VAR             reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CONST           reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    IF              reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    SWITCH          reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FOR             reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    STRING          reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    INTEGER         reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    FLOAT           reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BOOLEAN         reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    BREAK           reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CONTINUE        reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    PASS            reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    $end            reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    RKEY            reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    CASE            reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)
    RETURN          reduce using rule 85 (direct_arithmetic_operation -> IDENTIFIER PLUS_EQ value .)


state 95

    (86) direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .

    FMT_LIBRARY     reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FUNC            reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    IDENTIFIER      reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INPUT           reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    VAR             reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CONST           reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    IF              reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    SWITCH          reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FOR             reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    STRING          reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    INTEGER         reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    FLOAT           reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BOOLEAN         reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    BREAK           reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CONTINUE        reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    PASS            reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    $end            reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    RKEY            reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    CASE            reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)
    RETURN          reduce using rule 86 (direct_arithmetic_operation -> IDENTIFIER MINUS_EQ value .)


state 96

    (87) direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .

    FMT_LIBRARY     reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FUNC            reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    IDENTIFIER      reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INPUT           reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    VAR             reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CONST           reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    IF              reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    SWITCH          reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FOR             reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    STRING          reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    INTEGER         reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    FLOAT           reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BOOLEAN         reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    BREAK           reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CONTINUE        reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    PASS            reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    $end            reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    RKEY            reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    CASE            reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)
    RETURN          reduce using rule 87 (direct_arithmetic_operation -> IDENTIFIER TIMES_EQ value .)


state 97

    (88) direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .

    FMT_LIBRARY     reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FUNC            reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    IDENTIFIER      reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INPUT           reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    VAR             reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CONST           reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    IF              reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    SWITCH          reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FOR             reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    STRING          reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    INTEGER         reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    FLOAT           reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BOOLEAN         reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    BREAK           reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CONTINUE        reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    PASS            reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    $end            reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    RKEY            reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    CASE            reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)
    RETURN          reduce using rule 88 (direct_arithmetic_operation -> IDENTIFIER DIVIDE_EQ value .)


state 98

    (89) direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .

    FMT_LIBRARY     reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FUNC            reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    IDENTIFIER      reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INPUT           reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    VAR             reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CONST           reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    IF              reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    SWITCH          reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FOR             reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    STRING          reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    INTEGER         reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    FLOAT           reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BOOLEAN         reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    BREAK           reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CONTINUE        reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    PASS            reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    $end            reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    RKEY            reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    CASE            reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)
    RETURN          reduce using rule 89 (direct_arithmetic_operation -> IDENTIFIER MODULO_EQ value .)


state 99

    (90) direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .

    FMT_LIBRARY     reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FUNC            reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    IDENTIFIER      reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INPUT           reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    VAR             reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CONST           reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    IF              reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    SWITCH          reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FOR             reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    STRING          reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    INTEGER         reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    FLOAT           reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BOOLEAN         reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    BREAK           reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CONTINUE        reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    PASS            reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    $end            reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    RKEY            reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    CASE            reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)
    RETURN          reduce using rule 90 (direct_arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value .)


state 100

    (91) direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .

    FMT_LIBRARY     reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FUNC            reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    IDENTIFIER      reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INPUT           reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    VAR             reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CONST           reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    IF              reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    SWITCH          reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FOR             reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    STRING          reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    INTEGER         reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    FLOAT           reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BOOLEAN         reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    BREAK           reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CONTINUE        reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    PASS            reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    $end            reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    RKEY            reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    CASE            reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)
    RETURN          reduce using rule 91 (direct_arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value .)


state 101

    (92) direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .

    FMT_LIBRARY     reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FUNC            reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    IDENTIFIER      reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INPUT           reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    VAR             reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CONST           reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    IF              reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    SWITCH          reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FOR             reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    STRING          reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    INTEGER         reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    FLOAT           reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BOOLEAN         reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    BREAK           reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CONTINUE        reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    PASS            reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    $end            reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    RKEY            reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    CASE            reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)
    RETURN          reduce using rule 92 (direct_arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value .)


state 102

    (93) direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FUNC            reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INPUT           reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    VAR             reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CONST           reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    IF              reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    SWITCH          reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FOR             reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    STRING          reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    INTEGER         reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    FLOAT           reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    BREAK           reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CONTINUE        reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    PASS            reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    $end            reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    RKEY            reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    CASE            reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)
    RETURN          reduce using rule 93 (direct_arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value .)


state 103

    (94) direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .

    FMT_LIBRARY     reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FUNC            reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    IDENTIFIER      reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INPUT           reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    VAR             reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CONST           reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    IF              reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    SWITCH          reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FOR             reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    STRING          reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    INTEGER         reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    FLOAT           reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BOOLEAN         reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    BREAK           reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CONTINUE        reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    PASS            reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    $end            reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    RKEY            reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    CASE            reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)
    RETURN          reduce using rule 94 (direct_arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value .)


state 104

    (156) input -> INPUT LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    FUNC            reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    VAR             reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    CONST           reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    IF              reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    SWITCH          reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    STRING          reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    INTEGER         reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    FLOAT           reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    BOOLEAN         reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    BREAK           reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    CONTINUE        reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    PASS            reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    RKEY            reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    CASE            reduce using rule 156 (input -> INPUT LPAREN RPAREN .)
    RETURN          reduce using rule 156 (input -> INPUT LPAREN RPAREN .)


state 105

    (157) input -> INPUT LPAREN value . RPAREN

    RPAREN          shift and go to state 146


state 106

    (158) input -> INPUT LPAREN identifiers . RPAREN
    (110) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 147
    COMMA           shift and go to state 148


state 107

    (151) value -> IDENTIFIER .
    (109) identifiers -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 109 (identifiers -> IDENTIFIER .)
    RPAREN          reduce using rule 109 (identifiers -> IDENTIFIER .)
    COMMA           reduce using rule 109 (identifiers -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 108

    (77) assignment -> VAR IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 149


state 109

    (152) data_type -> INTEGER_DATA_TYPE .

    EQUAL           reduce using rule 152 (data_type -> INTEGER_DATA_TYPE .)
    RPAREN          reduce using rule 152 (data_type -> INTEGER_DATA_TYPE .)
    COMMA           reduce using rule 152 (data_type -> INTEGER_DATA_TYPE .)
    LKEY            reduce using rule 152 (data_type -> INTEGER_DATA_TYPE .)


state 110

    (153) data_type -> FLOAT_DATA_TYPE .

    EQUAL           reduce using rule 153 (data_type -> FLOAT_DATA_TYPE .)
    RPAREN          reduce using rule 153 (data_type -> FLOAT_DATA_TYPE .)
    COMMA           reduce using rule 153 (data_type -> FLOAT_DATA_TYPE .)
    LKEY            reduce using rule 153 (data_type -> FLOAT_DATA_TYPE .)


state 111

    (154) data_type -> BOOLEAN_DATA_TYPE .

    EQUAL           reduce using rule 154 (data_type -> BOOLEAN_DATA_TYPE .)
    RPAREN          reduce using rule 154 (data_type -> BOOLEAN_DATA_TYPE .)
    COMMA           reduce using rule 154 (data_type -> BOOLEAN_DATA_TYPE .)
    LKEY            reduce using rule 154 (data_type -> BOOLEAN_DATA_TYPE .)


state 112

    (155) data_type -> STRING_DATA_TYPE .

    EQUAL           reduce using rule 155 (data_type -> STRING_DATA_TYPE .)
    RPAREN          reduce using rule 155 (data_type -> STRING_DATA_TYPE .)
    COMMA           reduce using rule 155 (data_type -> STRING_DATA_TYPE .)
    LKEY            reduce using rule 155 (data_type -> STRING_DATA_TYPE .)


state 113

    (95) arithmetic_operation -> usable_value PLUS usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    FUNC            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    IDENTIFIER      reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    INPUT           reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    VAR             reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    CONST           reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    IF              reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    SWITCH          reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    FOR             reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    STRING          reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    INTEGER         reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    FLOAT           reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    BOOLEAN         reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    BREAK           reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    CONTINUE        reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    PASS            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    $end            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    RKEY            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    SEMICOLON       reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    CASE            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    RETURN          reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    LKEY            reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MINUS           [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! TIMES           [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! MODULE          [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LESS            [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! GREATER         [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 95 (arithmetic_operation -> usable_value PLUS usable_value .) ]


state 114

    (96) arithmetic_operation -> usable_value MINUS usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    FUNC            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    IDENTIFIER      reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    INPUT           reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    VAR             reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    CONST           reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    IF              reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    SWITCH          reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    FOR             reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    STRING          reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    INTEGER         reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    FLOAT           reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    BOOLEAN         reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    BREAK           reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    CONTINUE        reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    PASS            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    $end            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    RKEY            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    SEMICOLON       reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    CASE            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    RETURN          reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    LKEY            reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MINUS           [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! DIVIDE          [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! TIMES           [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! MODULE          [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LESS            [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! GREATER         [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 96 (arithmetic_operation -> usable_value MINUS usable_value .) ]


state 115

    (97) arithmetic_operation -> usable_value DIVIDE usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FUNC            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INPUT           reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    VAR             reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CONST           reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    IF              reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    SWITCH          reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FOR             reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    STRING          reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    INTEGER         reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    FLOAT           reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BOOLEAN         reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    BREAK           reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CONTINUE        reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    PASS            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    $end            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    RKEY            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    SEMICOLON       reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    CASE            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    RETURN          reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    LKEY            reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 97 (arithmetic_operation -> usable_value DIVIDE usable_value .) ]


state 116

    (98) arithmetic_operation -> usable_value TIMES usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    FUNC            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    IDENTIFIER      reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    INPUT           reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    VAR             reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    CONST           reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    IF              reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    SWITCH          reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    FOR             reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    STRING          reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    INTEGER         reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    FLOAT           reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    BOOLEAN         reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    BREAK           reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    CONTINUE        reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    PASS            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    $end            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    RKEY            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    SEMICOLON       reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    CASE            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    RETURN          reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    LKEY            reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MINUS           [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! DIVIDE          [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! TIMES           [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! MODULE          [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LESS            [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! GREATER         [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 98 (arithmetic_operation -> usable_value TIMES usable_value .) ]


state 117

    (99) arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FUNC            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    IDENTIFIER      reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INPUT           reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    VAR             reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CONST           reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    IF              reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    SWITCH          reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FOR             reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    STRING          reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    INTEGER         reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    FLOAT           reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BOOLEAN         reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    BREAK           reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CONTINUE        reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    PASS            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    $end            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    RKEY            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    SEMICOLON       reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    CASE            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    RETURN          reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    LKEY            reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MINUS           [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! DIVIDE          [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! TIMES           [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! MODULE          [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LESS            [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! GREATER         [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 99 (arithmetic_operation -> usable_value ENTERE_DIVIDE usable_value .) ]


state 118

    (100) arithmetic_operation -> usable_value MODULE usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    FMT_LIBRARY     reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    FUNC            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    IDENTIFIER      reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    INPUT           reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    VAR             reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    CONST           reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    IF              reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    SWITCH          reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    FOR             reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    STRING          reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    INTEGER         reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    FLOAT           reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    BOOLEAN         reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    BREAK           reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    CONTINUE        reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    PASS            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    $end            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    RKEY            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    SEMICOLON       reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    CASE            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    RETURN          reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    LKEY            reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MINUS           [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! DIVIDE          [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! TIMES           [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! MODULE          [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LESS            [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! GREATER         [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 100 (arithmetic_operation -> usable_value MODULE usable_value .) ]


state 119

    (101) comparation_operation -> usable_value EQUALEQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FUNC            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    IDENTIFIER      reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INPUT           reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    VAR             reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CONST           reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    IF              reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    SWITCH          reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FOR             reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    STRING          reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    INTEGER         reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    FLOAT           reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BOOLEAN         reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    BREAK           reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CONTINUE        reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    PASS            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    $end            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    RKEY            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    SEMICOLON       reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    CASE            reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    RETURN          reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LESS            [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 101 (comparation_operation -> usable_value EQUALEQUAL usable_value .) ]


state 120

    (102) comparation_operation -> usable_value NOT_EQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FUNC            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INPUT           reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    VAR             reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CONST           reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    IF              reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    SWITCH          reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FOR             reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    STRING          reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    INTEGER         reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    FLOAT           reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BOOLEAN         reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    BREAK           reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CONTINUE        reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    PASS            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    $end            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    RKEY            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    SEMICOLON       reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    CASE            reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    RETURN          reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 102 (comparation_operation -> usable_value NOT_EQUAL usable_value .) ]


state 121

    (103) comparation_operation -> usable_value LESS_EQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FUNC            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INPUT           reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    VAR             reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CONST           reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    IF              reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    SWITCH          reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FOR             reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    STRING          reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    INTEGER         reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    FLOAT           reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BOOLEAN         reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    BREAK           reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CONTINUE        reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    PASS            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    $end            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    RKEY            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    SEMICOLON       reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    CASE            reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    RETURN          reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 103 (comparation_operation -> usable_value LESS_EQUAL usable_value .) ]


state 122

    (104) comparation_operation -> usable_value GREATER_EQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FMT_LIBRARY     reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FUNC            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    IDENTIFIER      reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INPUT           reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    VAR             reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CONST           reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    IF              reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    SWITCH          reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FOR             reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    STRING          reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    INTEGER         reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    FLOAT           reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BOOLEAN         reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    BREAK           reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CONTINUE        reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    PASS            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    $end            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    RKEY            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    SEMICOLON       reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    CASE            reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    RETURN          reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MINUS           [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! DIVIDE          [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! TIMES           [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! MODULE          [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LESS            [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! GREATER         [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 104 (comparation_operation -> usable_value GREATER_EQUAL usable_value .) ]


state 123

    (105) comparation_operation -> usable_value LESS usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    FMT_LIBRARY     reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    FUNC            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    IDENTIFIER      reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    INPUT           reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    VAR             reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    CONST           reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    IF              reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    SWITCH          reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    FOR             reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    STRING          reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    INTEGER         reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    FLOAT           reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    BOOLEAN         reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    BREAK           reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    CONTINUE        reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    PASS            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    $end            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    RKEY            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    SEMICOLON       reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    CASE            reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    RETURN          reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MINUS           [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! DIVIDE          [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! TIMES           [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! MODULE          [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LESS            [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! GREATER         [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 105 (comparation_operation -> usable_value LESS usable_value .) ]


state 124

    (106) comparation_operation -> usable_value GREATER usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    FMT_LIBRARY     reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    FUNC            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    IDENTIFIER      reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    INPUT           reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    VAR             reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    CONST           reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    IF              reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    SWITCH          reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    FOR             reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    STRING          reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    INTEGER         reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    FLOAT           reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    BOOLEAN         reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    BREAK           reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    CONTINUE        reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    PASS            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    $end            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    RKEY            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    SEMICOLON       reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    CASE            reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    RETURN          reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MINUS           [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! DIVIDE          [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! TIMES           [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! MODULE          [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LESS            [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! GREATER         [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 106 (comparation_operation -> usable_value GREATER usable_value .) ]


state 125

    (107) comparation_operation -> usable_value LOGICAL_AND usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FMT_LIBRARY     reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FUNC            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    IDENTIFIER      reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INPUT           reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    VAR             reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CONST           reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    IF              reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    SWITCH          reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FOR             reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    STRING          reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    INTEGER         reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    FLOAT           reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BOOLEAN         reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    BREAK           reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CONTINUE        reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    PASS            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    $end            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    RKEY            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    SEMICOLON       reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    CASE            reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    RETURN          reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MINUS           [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! DIVIDE          [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! TIMES           [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! MODULE          [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LESS            [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! GREATER         [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 107 (comparation_operation -> usable_value LOGICAL_AND usable_value .) ]


state 126

    (108) comparation_operation -> usable_value LOGICAL_OR usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ENTERE_DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LKEY            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FMT_LIBRARY     reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FUNC            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    IDENTIFIER      reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INPUT           reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    VAR             reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CONST           reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    IF              reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    SWITCH          reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FOR             reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    STRING          reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    INTEGER         reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    FLOAT           reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BOOLEAN         reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    BREAK           reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CONTINUE        reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    PASS            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    $end            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    RKEY            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    SEMICOLON       reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    CASE            reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    RETURN          reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72

  ! PLUS            [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MINUS           [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! DIVIDE          [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! TIMES           [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! ENTERE_DIVIDE   [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! MODULE          [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! EQUALEQUAL      [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! NOT_EQUAL       [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER_EQUAL   [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LESS            [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! GREATER         [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_AND     [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]
  ! LOGICAL_OR      [ reduce using rule 108 (comparation_operation -> usable_value LOGICAL_OR usable_value .) ]


state 127

    (78) assignment -> CONST IDENTIFIER data_type . EQUAL usable_value

    EQUAL           shift and go to state 150


state 128

    (37) if_statement -> IF comparation_operation LKEY . program RKEY
    (38) if_statement -> IF comparation_operation LKEY . program RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY . program RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY . program RKEY conditions_elseif ELSE LKEY program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    program                        shift and go to state 151
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 129

    (141) call_function -> IDENTIFIER LPAREN . values RPAREN
    (145) values -> . value
    (146) values -> . values COMMA value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    values                         shift and go to state 152
    value                          shift and go to state 92

state 130

    (44) switch_statement -> SWITCH value LKEY . switch_cases RKEY
    (49) switch_cases -> . switch_case switch_cases
    (50) switch_cases -> .
    (51) switch_case -> . CASE value COLON statements
    (52) switch_case -> . CASE COLON statements

    RKEY            reduce using rule 50 (switch_cases -> .)
    CASE            shift and go to state 133

    switch_cases                   shift and go to state 153
    switch_case                    shift and go to state 132

state 131

    (45) switch_statement -> SWITCH LKEY switch_cases . RKEY

    RKEY            shift and go to state 154


state 132

    (49) switch_cases -> switch_case . switch_cases
    (49) switch_cases -> . switch_case switch_cases
    (50) switch_cases -> .
    (51) switch_case -> . CASE value COLON statements
    (52) switch_case -> . CASE COLON statements

    RKEY            reduce using rule 50 (switch_cases -> .)
    CASE            shift and go to state 133

    switch_case                    shift and go to state 132
    switch_cases                   shift and go to state 155

state 133

    (51) switch_case -> CASE . value COLON statements
    (52) switch_case -> CASE . COLON statements
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    COLON           shift and go to state 157
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 156

state 134

    (46) switch_statement -> SWITCH switch_expression LKEY . switch_cases RKEY
    (49) switch_cases -> . switch_case switch_cases
    (50) switch_cases -> .
    (51) switch_case -> . CASE value COLON statements
    (52) switch_case -> . CASE COLON statements

    RKEY            reduce using rule 50 (switch_cases -> .)
    CASE            shift and go to state 133

    switch_cases                   shift and go to state 158
    switch_case                    shift and go to state 132

state 135

    (31) for -> FOR LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 159
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 136

    (32) for -> FOR comparation_operation LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    loop_program                   shift and go to state 160
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 137

    (33) for -> FOR short_assignment SEMICOLON . comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 161
    usable_value                   shift and go to state 75
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78

state 138

    (67) print -> FMT_LIBRARY DOT PRINTLN LPAREN . data RPAREN
    (75) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN . RPAREN
    (71) data -> . value
    (72) data -> . IDENTIFIER
    (73) data -> . data COMMA value
    (74) data -> . data COMMA IDENTIFIER
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    RPAREN          shift and go to state 163
    IDENTIFIER      shift and go to state 165
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    data                           shift and go to state 162
    value                          shift and go to state 164

state 139

    (68) print -> FMT_LIBRARY DOT PRINTF LPAREN . value RPAREN
    (69) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA RPAREN
    (70) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA data RPAREN
    (76) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN . RPAREN
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    RPAREN          shift and go to state 167
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 166

state 140

    (144) parameter -> IDENTIFIER . data_type
    (152) data_type -> . INTEGER_DATA_TYPE
    (153) data_type -> . FLOAT_DATA_TYPE
    (154) data_type -> . BOOLEAN_DATA_TYPE
    (155) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 109
    FLOAT_DATA_TYPE shift and go to state 110
    BOOLEAN_DATA_TYPE shift and go to state 111
    STRING_DATA_TYPE shift and go to state 112

    data_type                      shift and go to state 168

state 141

    (123) def_function -> FUNC IDENTIFIER LPAREN parameters . RPAREN LKEY func_program RKEY
    (124) def_function -> FUNC IDENTIFIER LPAREN parameters . RPAREN data_type LKEY func_program RKEY
    (143) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 170


state 142

    (142) parameters -> parameter .

    RPAREN          reduce using rule 142 (parameters -> parameter .)
    COMMA           reduce using rule 142 (parameters -> parameter .)


state 143

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF . LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    LPAREN          shift and go to state 171


state 144

    (141) call_function -> IDENTIFIER LPAREN values RPAREN .
    (36) function_call -> IDENTIFIER LPAREN values RPAREN .

  ! reduce/reduce conflict for FMT_LIBRARY resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for INPUT resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CONST resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for INTEGER resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for FLOAT resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for PASS resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    PLUS            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MINUS           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DIVIDE          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    TIMES           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    ENTERE_DIVIDE   reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MODULE          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    EQUALEQUAL      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    NOT_EQUAL       reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS_EQUAL      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER_EQUAL   reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER         reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_AND     reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_OR      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FMT_LIBRARY     reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FUNC            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    IF              reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    SWITCH          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    STRING          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    INTEGER         reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    BREAK           reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CONTINUE        reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    PASS            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    CASE            reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)
    RETURN          reduce using rule 36 (function_call -> IDENTIFIER LPAREN values RPAREN .)

  ! FMT_LIBRARY     [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FUNC            [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! IDENTIFIER      [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! INPUT           [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! VAR             [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CONST           [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! IF              [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! SWITCH          [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FOR             [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! STRING          [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! INTEGER         [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! FLOAT           [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! BOOLEAN         [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! BREAK           [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CONTINUE        [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! PASS            [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! $end            [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! RKEY            [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! CASE            [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]
  ! RETURN          [ reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .) ]


state 145

    (146) values -> values COMMA . value
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29
    IDENTIFIER      shift and go to state 82

    value                          shift and go to state 172

state 146

    (157) input -> INPUT LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    FUNC            reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    INPUT           reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    VAR             reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    CONST           reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    IF              reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    SWITCH          reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    FOR             reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    STRING          reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    INTEGER         reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    FLOAT           reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    BREAK           reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    CONTINUE        reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    PASS            reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    $end            reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    RKEY            reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    CASE            reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)
    RETURN          reduce using rule 157 (input -> INPUT LPAREN value RPAREN .)


state 147

    (158) input -> INPUT LPAREN identifiers RPAREN .

    FMT_LIBRARY     reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    FUNC            reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    IDENTIFIER      reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    INPUT           reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    VAR             reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    CONST           reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    IF              reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    SWITCH          reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    FOR             reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    STRING          reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    INTEGER         reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    FLOAT           reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    BOOLEAN         reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    BREAK           reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    CONTINUE        reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    PASS            reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    $end            reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    RKEY            reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    CASE            reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)
    RETURN          reduce using rule 158 (input -> INPUT LPAREN identifiers RPAREN .)


state 148

    (110) identifiers -> identifiers COMMA . identifiers
    (109) identifiers -> . IDENTIFIER
    (110) identifiers -> . identifiers COMMA identifiers

    IDENTIFIER      shift and go to state 174

    identifiers                    shift and go to state 173

state 149

    (77) assignment -> VAR IDENTIFIER data_type EQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 175
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 150

    (78) assignment -> CONST IDENTIFIER data_type EQUAL . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    usable_value                   shift and go to state 176
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 151

    (37) if_statement -> IF comparation_operation LKEY program . RKEY
    (38) if_statement -> IF comparation_operation LKEY program . RKEY conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY program . RKEY ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY program . RKEY conditions_elseif ELSE LKEY program RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 177
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 152

    (141) call_function -> IDENTIFIER LPAREN values . RPAREN
    (146) values -> values . COMMA value

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 145


state 153

    (44) switch_statement -> SWITCH value LKEY switch_cases . RKEY

    RKEY            shift and go to state 179


state 154

    (45) switch_statement -> SWITCH LKEY switch_cases RKEY .

    FMT_LIBRARY     reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    FUNC            reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    IDENTIFIER      reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    INPUT           reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    VAR             reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    CONST           reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    IF              reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    SWITCH          reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    FOR             reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    STRING          reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    INTEGER         reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    FLOAT           reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    BOOLEAN         reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    BREAK           reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    CONTINUE        reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    PASS            reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    $end            reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    RKEY            reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    CASE            reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)
    RETURN          reduce using rule 45 (switch_statement -> SWITCH LKEY switch_cases RKEY .)


state 155

    (49) switch_cases -> switch_case switch_cases .

    RKEY            reduce using rule 49 (switch_cases -> switch_case switch_cases .)


state 156

    (51) switch_case -> CASE value . COLON statements

    COLON           shift and go to state 180


state 157

    (52) switch_case -> CASE COLON . statements
    (53) statements -> . statement statements
    (54) statements -> .
    (55) statement -> . print
    (56) statement -> . print_withoutvalue
    (57) statement -> . def_function
    (58) statement -> . call_function
    (59) statement -> . input
    (60) statement -> . assignment
    (61) statement -> . short_assignment
    (62) statement -> . arithmetic_operation
    (63) statement -> . direct_arithmetic_operation
    (64) statement -> . if_statement
    (65) statement -> . function_call
    (66) statement -> . switch_statement
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    CASE            reduce using rule 54 (statements -> .)
    RKEY            reduce using rule 54 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    statements                     shift and go to state 181
    statement                      shift and go to state 182
    print                          shift and go to state 183
    print_withoutvalue             shift and go to state 184
    def_function                   shift and go to state 185
    call_function                  shift and go to state 186
    input                          shift and go to state 187
    assignment                     shift and go to state 188
    short_assignment               shift and go to state 189
    arithmetic_operation           shift and go to state 190
    direct_arithmetic_operation    shift and go to state 191
    if_statement                   shift and go to state 192
    function_call                  shift and go to state 193
    switch_statement               shift and go to state 194
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 158

    (46) switch_statement -> SWITCH switch_expression LKEY switch_cases . RKEY

    RKEY            shift and go to state 195


state 159

    (31) for -> FOR LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FUNC            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    INPUT           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    VAR             reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    CONST           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    IF              reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    SWITCH          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FOR             reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    STRING          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    INTEGER         reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    FLOAT           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    BREAK           reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    PASS            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    $end            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    RKEY            reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)
    RETURN          reduce using rule 31 (for -> FOR LKEY loop_program RKEY .)


state 160

    (32) for -> FOR comparation_operation LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 196
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 161

    (33) for -> FOR short_assignment SEMICOLON comparation_operation . SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (84) usable_value -> comparation_operation .

    SEMICOLON       shift and go to state 197
    EQUALEQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 84 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 84 (usable_value -> comparation_operation .)
    LESS            reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 84 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 84 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 84 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 84 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 84 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 84 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 84 (usable_value -> comparation_operation .)


state 162

    (67) print -> FMT_LIBRARY DOT PRINTLN LPAREN data . RPAREN
    (73) data -> data . COMMA value
    (74) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 199


state 163

    (75) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FUNC            reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INPUT           reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONST           reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    IF              reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    SWITCH          reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    STRING          reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    INTEGER         reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    FLOAT           reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BOOLEAN         reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    BREAK           reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CONTINUE        reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    PASS            reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    $end            reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RKEY            reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    CASE            reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)
    RETURN          reduce using rule 75 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)


state 164

    (71) data -> value .

    RPAREN          reduce using rule 71 (data -> value .)
    COMMA           reduce using rule 71 (data -> value .)


state 165

    (72) data -> IDENTIFIER .
    (151) value -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 72 (data -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (data -> IDENTIFIER .)
    RPAREN          reduce using rule 72 (data -> IDENTIFIER .)
    COMMA           reduce using rule 72 (data -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 166

    (68) print -> FMT_LIBRARY DOT PRINTF LPAREN value . RPAREN
    (69) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA RPAREN
    (70) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA data RPAREN

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 201


state 167

    (76) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .

    FMT_LIBRARY     reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FUNC            reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INPUT           reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONST           reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    IF              reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    SWITCH          reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    STRING          reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    INTEGER         reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    FLOAT           reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BOOLEAN         reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    BREAK           reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CONTINUE        reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    PASS            reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    $end            reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RKEY            reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    CASE            reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)
    RETURN          reduce using rule 76 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)


state 168

    (144) parameter -> IDENTIFIER data_type .

    RPAREN          reduce using rule 144 (parameter -> IDENTIFIER data_type .)
    COMMA           reduce using rule 144 (parameter -> IDENTIFIER data_type .)


state 169

    (123) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN . LKEY func_program RKEY
    (124) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN . data_type LKEY func_program RKEY
    (152) data_type -> . INTEGER_DATA_TYPE
    (153) data_type -> . FLOAT_DATA_TYPE
    (154) data_type -> . BOOLEAN_DATA_TYPE
    (155) data_type -> . STRING_DATA_TYPE

    LKEY            shift and go to state 202
    INTEGER_DATA_TYPE shift and go to state 109
    FLOAT_DATA_TYPE shift and go to state 110
    BOOLEAN_DATA_TYPE shift and go to state 111
    STRING_DATA_TYPE shift and go to state 112

    data_type                      shift and go to state 203

state 170

    (143) parameters -> parameters COMMA . parameter
    (144) parameter -> . IDENTIFIER data_type

    IDENTIFIER      shift and go to state 140

    parameter                      shift and go to state 204

state 171

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN . STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    STRING          shift and go to state 205


state 172

    (146) values -> values COMMA value .

    RPAREN          reduce using rule 146 (values -> values COMMA value .)
    COMMA           reduce using rule 146 (values -> values COMMA value .)


state 173

    (110) identifiers -> identifiers COMMA identifiers .
    (110) identifiers -> identifiers . COMMA identifiers

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 110 (identifiers -> identifiers COMMA identifiers .)
    COMMA           shift and go to state 148

  ! COMMA           [ reduce using rule 110 (identifiers -> identifiers COMMA identifiers .) ]


state 174

    (109) identifiers -> IDENTIFIER .

    COMMA           reduce using rule 109 (identifiers -> IDENTIFIER .)
    RPAREN          reduce using rule 109 (identifiers -> IDENTIFIER .)


state 175

    (77) assignment -> VAR IDENTIFIER data_type EQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    IF              reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    SWITCH          reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    FLOAT           reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CONTINUE        reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    PASS            reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    CASE            reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    RETURN          reduce using rule 77 (assignment -> VAR IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 176

    (78) assignment -> CONST IDENTIFIER data_type EQUAL usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    FMT_LIBRARY     reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FUNC            reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    IDENTIFIER      reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INPUT           reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    VAR             reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CONST           reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    IF              reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    SWITCH          reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FOR             reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    STRING          reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    INTEGER         reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    FLOAT           reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BOOLEAN         reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    BREAK           reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CONTINUE        reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    PASS            reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    $end            reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    RKEY            reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    CASE            reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    RETURN          reduce using rule 78 (assignment -> CONST IDENTIFIER data_type EQUAL usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 177

    (37) if_statement -> IF comparation_operation LKEY program RKEY .
    (38) if_statement -> IF comparation_operation LKEY program RKEY . conditions_elseif
    (39) if_statement -> IF comparation_operation LKEY program RKEY . ELSE LKEY program RKEY
    (40) if_statement -> IF comparation_operation LKEY program RKEY . conditions_elseif ELSE LKEY program RKEY
    (41) conditions_elseif -> . else_if
    (42) conditions_elseif -> . conditions_elseif else_if
    (43) else_if -> . ELSE IF comparation_operation LKEY program RKEY

    FMT_LIBRARY     reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FUNC            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    IDENTIFIER      reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    INPUT           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    VAR             reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CONST           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    IF              reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    SWITCH          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FOR             reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    STRING          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    INTEGER         reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    FLOAT           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    BOOLEAN         reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    BREAK           reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CONTINUE        reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    PASS            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    $end            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    RKEY            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    CASE            reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    RETURN          reduce using rule 37 (if_statement -> IF comparation_operation LKEY program RKEY .)
    ELSE            shift and go to state 207

    conditions_elseif              shift and go to state 206
    else_if                        shift and go to state 208

state 178

    (141) call_function -> IDENTIFIER LPAREN values RPAREN .

    EQUALEQUAL      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    NOT_EQUAL       reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS_EQUAL      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER_EQUAL   reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LESS            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    GREATER         reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_AND     reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LOGICAL_OR      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    PLUS            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MINUS           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    DIVIDE          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    TIMES           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    ENTERE_DIVIDE   reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    MODULE          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FMT_LIBRARY     reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FUNC            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IDENTIFIER      reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INPUT           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    VAR             reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONST           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    IF              reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    SWITCH          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FOR             reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    STRING          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    INTEGER         reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    FLOAT           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    BREAK           reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CONTINUE        reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    PASS            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    $end            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RKEY            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    SEMICOLON       reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    CASE            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    RETURN          reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)
    LKEY            reduce using rule 141 (call_function -> IDENTIFIER LPAREN values RPAREN .)


state 179

    (44) switch_statement -> SWITCH value LKEY switch_cases RKEY .

    FMT_LIBRARY     reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    FUNC            reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    IDENTIFIER      reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    INPUT           reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    VAR             reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    CONST           reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    IF              reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    SWITCH          reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    FOR             reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    STRING          reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    INTEGER         reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    FLOAT           reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    BOOLEAN         reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    BREAK           reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    CONTINUE        reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    PASS            reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    $end            reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    RKEY            reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    CASE            reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)
    RETURN          reduce using rule 44 (switch_statement -> SWITCH value LKEY switch_cases RKEY .)


state 180

    (51) switch_case -> CASE value COLON . statements
    (53) statements -> . statement statements
    (54) statements -> .
    (55) statement -> . print
    (56) statement -> . print_withoutvalue
    (57) statement -> . def_function
    (58) statement -> . call_function
    (59) statement -> . input
    (60) statement -> . assignment
    (61) statement -> . short_assignment
    (62) statement -> . arithmetic_operation
    (63) statement -> . direct_arithmetic_operation
    (64) statement -> . if_statement
    (65) statement -> . function_call
    (66) statement -> . switch_statement
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    CASE            reduce using rule 54 (statements -> .)
    RKEY            reduce using rule 54 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    value                          shift and go to state 23
    statements                     shift and go to state 209
    statement                      shift and go to state 182
    print                          shift and go to state 183
    print_withoutvalue             shift and go to state 184
    def_function                   shift and go to state 185
    call_function                  shift and go to state 186
    input                          shift and go to state 187
    assignment                     shift and go to state 188
    short_assignment               shift and go to state 189
    arithmetic_operation           shift and go to state 190
    direct_arithmetic_operation    shift and go to state 191
    if_statement                   shift and go to state 192
    function_call                  shift and go to state 193
    switch_statement               shift and go to state 194
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 181

    (52) switch_case -> CASE COLON statements .

    CASE            reduce using rule 52 (switch_case -> CASE COLON statements .)
    RKEY            reduce using rule 52 (switch_case -> CASE COLON statements .)


state 182

    (53) statements -> statement . statements
    (53) statements -> . statement statements
    (54) statements -> .
    (55) statement -> . print
    (56) statement -> . print_withoutvalue
    (57) statement -> . def_function
    (58) statement -> . call_function
    (59) statement -> . input
    (60) statement -> . assignment
    (61) statement -> . short_assignment
    (62) statement -> . arithmetic_operation
    (63) statement -> . direct_arithmetic_operation
    (64) statement -> . if_statement
    (65) statement -> . function_call
    (66) statement -> . switch_statement
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    CASE            reduce using rule 54 (statements -> .)
    RKEY            reduce using rule 54 (statements -> .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    statement                      shift and go to state 182
    statements                     shift and go to state 210
    print                          shift and go to state 183
    print_withoutvalue             shift and go to state 184
    def_function                   shift and go to state 185
    call_function                  shift and go to state 186
    input                          shift and go to state 187
    assignment                     shift and go to state 188
    short_assignment               shift and go to state 189
    arithmetic_operation           shift and go to state 190
    direct_arithmetic_operation    shift and go to state 191
    if_statement                   shift and go to state 192
    function_call                  shift and go to state 193
    switch_statement               shift and go to state 194
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 183

    (55) statement -> print .

    FMT_LIBRARY     reduce using rule 55 (statement -> print .)
    FUNC            reduce using rule 55 (statement -> print .)
    IDENTIFIER      reduce using rule 55 (statement -> print .)
    INPUT           reduce using rule 55 (statement -> print .)
    VAR             reduce using rule 55 (statement -> print .)
    CONST           reduce using rule 55 (statement -> print .)
    IF              reduce using rule 55 (statement -> print .)
    SWITCH          reduce using rule 55 (statement -> print .)
    STRING          reduce using rule 55 (statement -> print .)
    INTEGER         reduce using rule 55 (statement -> print .)
    FLOAT           reduce using rule 55 (statement -> print .)
    BOOLEAN         reduce using rule 55 (statement -> print .)
    CASE            reduce using rule 55 (statement -> print .)
    RKEY            reduce using rule 55 (statement -> print .)


state 184

    (56) statement -> print_withoutvalue .

    FMT_LIBRARY     reduce using rule 56 (statement -> print_withoutvalue .)
    FUNC            reduce using rule 56 (statement -> print_withoutvalue .)
    IDENTIFIER      reduce using rule 56 (statement -> print_withoutvalue .)
    INPUT           reduce using rule 56 (statement -> print_withoutvalue .)
    VAR             reduce using rule 56 (statement -> print_withoutvalue .)
    CONST           reduce using rule 56 (statement -> print_withoutvalue .)
    IF              reduce using rule 56 (statement -> print_withoutvalue .)
    SWITCH          reduce using rule 56 (statement -> print_withoutvalue .)
    STRING          reduce using rule 56 (statement -> print_withoutvalue .)
    INTEGER         reduce using rule 56 (statement -> print_withoutvalue .)
    FLOAT           reduce using rule 56 (statement -> print_withoutvalue .)
    BOOLEAN         reduce using rule 56 (statement -> print_withoutvalue .)
    CASE            reduce using rule 56 (statement -> print_withoutvalue .)
    RKEY            reduce using rule 56 (statement -> print_withoutvalue .)


state 185

    (57) statement -> def_function .

    FMT_LIBRARY     reduce using rule 57 (statement -> def_function .)
    FUNC            reduce using rule 57 (statement -> def_function .)
    IDENTIFIER      reduce using rule 57 (statement -> def_function .)
    INPUT           reduce using rule 57 (statement -> def_function .)
    VAR             reduce using rule 57 (statement -> def_function .)
    CONST           reduce using rule 57 (statement -> def_function .)
    IF              reduce using rule 57 (statement -> def_function .)
    SWITCH          reduce using rule 57 (statement -> def_function .)
    STRING          reduce using rule 57 (statement -> def_function .)
    INTEGER         reduce using rule 57 (statement -> def_function .)
    FLOAT           reduce using rule 57 (statement -> def_function .)
    BOOLEAN         reduce using rule 57 (statement -> def_function .)
    CASE            reduce using rule 57 (statement -> def_function .)
    RKEY            reduce using rule 57 (statement -> def_function .)


state 186

    (58) statement -> call_function .
    (81) usable_value -> call_function .

    FMT_LIBRARY     reduce using rule 58 (statement -> call_function .)
    FUNC            reduce using rule 58 (statement -> call_function .)
    IDENTIFIER      reduce using rule 58 (statement -> call_function .)
    INPUT           reduce using rule 58 (statement -> call_function .)
    VAR             reduce using rule 58 (statement -> call_function .)
    CONST           reduce using rule 58 (statement -> call_function .)
    IF              reduce using rule 58 (statement -> call_function .)
    SWITCH          reduce using rule 58 (statement -> call_function .)
    STRING          reduce using rule 58 (statement -> call_function .)
    INTEGER         reduce using rule 58 (statement -> call_function .)
    FLOAT           reduce using rule 58 (statement -> call_function .)
    BOOLEAN         reduce using rule 58 (statement -> call_function .)
    CASE            reduce using rule 58 (statement -> call_function .)
    RKEY            reduce using rule 58 (statement -> call_function .)
    PLUS            reduce using rule 81 (usable_value -> call_function .)
    MINUS           reduce using rule 81 (usable_value -> call_function .)
    DIVIDE          reduce using rule 81 (usable_value -> call_function .)
    TIMES           reduce using rule 81 (usable_value -> call_function .)
    ENTERE_DIVIDE   reduce using rule 81 (usable_value -> call_function .)
    MODULE          reduce using rule 81 (usable_value -> call_function .)
    EQUALEQUAL      reduce using rule 81 (usable_value -> call_function .)
    NOT_EQUAL       reduce using rule 81 (usable_value -> call_function .)
    LESS_EQUAL      reduce using rule 81 (usable_value -> call_function .)
    GREATER_EQUAL   reduce using rule 81 (usable_value -> call_function .)
    LESS            reduce using rule 81 (usable_value -> call_function .)
    GREATER         reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_AND     reduce using rule 81 (usable_value -> call_function .)
    LOGICAL_OR      reduce using rule 81 (usable_value -> call_function .)


state 187

    (59) statement -> input .

    FMT_LIBRARY     reduce using rule 59 (statement -> input .)
    FUNC            reduce using rule 59 (statement -> input .)
    IDENTIFIER      reduce using rule 59 (statement -> input .)
    INPUT           reduce using rule 59 (statement -> input .)
    VAR             reduce using rule 59 (statement -> input .)
    CONST           reduce using rule 59 (statement -> input .)
    IF              reduce using rule 59 (statement -> input .)
    SWITCH          reduce using rule 59 (statement -> input .)
    STRING          reduce using rule 59 (statement -> input .)
    INTEGER         reduce using rule 59 (statement -> input .)
    FLOAT           reduce using rule 59 (statement -> input .)
    BOOLEAN         reduce using rule 59 (statement -> input .)
    CASE            reduce using rule 59 (statement -> input .)
    RKEY            reduce using rule 59 (statement -> input .)


state 188

    (60) statement -> assignment .

    FMT_LIBRARY     reduce using rule 60 (statement -> assignment .)
    FUNC            reduce using rule 60 (statement -> assignment .)
    IDENTIFIER      reduce using rule 60 (statement -> assignment .)
    INPUT           reduce using rule 60 (statement -> assignment .)
    VAR             reduce using rule 60 (statement -> assignment .)
    CONST           reduce using rule 60 (statement -> assignment .)
    IF              reduce using rule 60 (statement -> assignment .)
    SWITCH          reduce using rule 60 (statement -> assignment .)
    STRING          reduce using rule 60 (statement -> assignment .)
    INTEGER         reduce using rule 60 (statement -> assignment .)
    FLOAT           reduce using rule 60 (statement -> assignment .)
    BOOLEAN         reduce using rule 60 (statement -> assignment .)
    CASE            reduce using rule 60 (statement -> assignment .)
    RKEY            reduce using rule 60 (statement -> assignment .)


state 189

    (61) statement -> short_assignment .

    FMT_LIBRARY     reduce using rule 61 (statement -> short_assignment .)
    FUNC            reduce using rule 61 (statement -> short_assignment .)
    IDENTIFIER      reduce using rule 61 (statement -> short_assignment .)
    INPUT           reduce using rule 61 (statement -> short_assignment .)
    VAR             reduce using rule 61 (statement -> short_assignment .)
    CONST           reduce using rule 61 (statement -> short_assignment .)
    IF              reduce using rule 61 (statement -> short_assignment .)
    SWITCH          reduce using rule 61 (statement -> short_assignment .)
    STRING          reduce using rule 61 (statement -> short_assignment .)
    INTEGER         reduce using rule 61 (statement -> short_assignment .)
    FLOAT           reduce using rule 61 (statement -> short_assignment .)
    BOOLEAN         reduce using rule 61 (statement -> short_assignment .)
    CASE            reduce using rule 61 (statement -> short_assignment .)
    RKEY            reduce using rule 61 (statement -> short_assignment .)


state 190

    (62) statement -> arithmetic_operation .
    (83) usable_value -> arithmetic_operation .

    FMT_LIBRARY     reduce using rule 62 (statement -> arithmetic_operation .)
    FUNC            reduce using rule 62 (statement -> arithmetic_operation .)
    IDENTIFIER      reduce using rule 62 (statement -> arithmetic_operation .)
    INPUT           reduce using rule 62 (statement -> arithmetic_operation .)
    VAR             reduce using rule 62 (statement -> arithmetic_operation .)
    CONST           reduce using rule 62 (statement -> arithmetic_operation .)
    IF              reduce using rule 62 (statement -> arithmetic_operation .)
    SWITCH          reduce using rule 62 (statement -> arithmetic_operation .)
    STRING          reduce using rule 62 (statement -> arithmetic_operation .)
    INTEGER         reduce using rule 62 (statement -> arithmetic_operation .)
    FLOAT           reduce using rule 62 (statement -> arithmetic_operation .)
    BOOLEAN         reduce using rule 62 (statement -> arithmetic_operation .)
    CASE            reduce using rule 62 (statement -> arithmetic_operation .)
    RKEY            reduce using rule 62 (statement -> arithmetic_operation .)
    PLUS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    MINUS           reduce using rule 83 (usable_value -> arithmetic_operation .)
    DIVIDE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    TIMES           reduce using rule 83 (usable_value -> arithmetic_operation .)
    ENTERE_DIVIDE   reduce using rule 83 (usable_value -> arithmetic_operation .)
    MODULE          reduce using rule 83 (usable_value -> arithmetic_operation .)
    EQUALEQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    NOT_EQUAL       reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS_EQUAL      reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER_EQUAL   reduce using rule 83 (usable_value -> arithmetic_operation .)
    LESS            reduce using rule 83 (usable_value -> arithmetic_operation .)
    GREATER         reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_AND     reduce using rule 83 (usable_value -> arithmetic_operation .)
    LOGICAL_OR      reduce using rule 83 (usable_value -> arithmetic_operation .)


state 191

    (63) statement -> direct_arithmetic_operation .

    FMT_LIBRARY     reduce using rule 63 (statement -> direct_arithmetic_operation .)
    FUNC            reduce using rule 63 (statement -> direct_arithmetic_operation .)
    IDENTIFIER      reduce using rule 63 (statement -> direct_arithmetic_operation .)
    INPUT           reduce using rule 63 (statement -> direct_arithmetic_operation .)
    VAR             reduce using rule 63 (statement -> direct_arithmetic_operation .)
    CONST           reduce using rule 63 (statement -> direct_arithmetic_operation .)
    IF              reduce using rule 63 (statement -> direct_arithmetic_operation .)
    SWITCH          reduce using rule 63 (statement -> direct_arithmetic_operation .)
    STRING          reduce using rule 63 (statement -> direct_arithmetic_operation .)
    INTEGER         reduce using rule 63 (statement -> direct_arithmetic_operation .)
    FLOAT           reduce using rule 63 (statement -> direct_arithmetic_operation .)
    BOOLEAN         reduce using rule 63 (statement -> direct_arithmetic_operation .)
    CASE            reduce using rule 63 (statement -> direct_arithmetic_operation .)
    RKEY            reduce using rule 63 (statement -> direct_arithmetic_operation .)


state 192

    (64) statement -> if_statement .

    FMT_LIBRARY     reduce using rule 64 (statement -> if_statement .)
    FUNC            reduce using rule 64 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 64 (statement -> if_statement .)
    INPUT           reduce using rule 64 (statement -> if_statement .)
    VAR             reduce using rule 64 (statement -> if_statement .)
    CONST           reduce using rule 64 (statement -> if_statement .)
    IF              reduce using rule 64 (statement -> if_statement .)
    SWITCH          reduce using rule 64 (statement -> if_statement .)
    STRING          reduce using rule 64 (statement -> if_statement .)
    INTEGER         reduce using rule 64 (statement -> if_statement .)
    FLOAT           reduce using rule 64 (statement -> if_statement .)
    BOOLEAN         reduce using rule 64 (statement -> if_statement .)
    CASE            reduce using rule 64 (statement -> if_statement .)
    RKEY            reduce using rule 64 (statement -> if_statement .)


state 193

    (65) statement -> function_call .

    FMT_LIBRARY     reduce using rule 65 (statement -> function_call .)
    FUNC            reduce using rule 65 (statement -> function_call .)
    IDENTIFIER      reduce using rule 65 (statement -> function_call .)
    INPUT           reduce using rule 65 (statement -> function_call .)
    VAR             reduce using rule 65 (statement -> function_call .)
    CONST           reduce using rule 65 (statement -> function_call .)
    IF              reduce using rule 65 (statement -> function_call .)
    SWITCH          reduce using rule 65 (statement -> function_call .)
    STRING          reduce using rule 65 (statement -> function_call .)
    INTEGER         reduce using rule 65 (statement -> function_call .)
    FLOAT           reduce using rule 65 (statement -> function_call .)
    BOOLEAN         reduce using rule 65 (statement -> function_call .)
    CASE            reduce using rule 65 (statement -> function_call .)
    RKEY            reduce using rule 65 (statement -> function_call .)


state 194

    (66) statement -> switch_statement .

    FMT_LIBRARY     reduce using rule 66 (statement -> switch_statement .)
    FUNC            reduce using rule 66 (statement -> switch_statement .)
    IDENTIFIER      reduce using rule 66 (statement -> switch_statement .)
    INPUT           reduce using rule 66 (statement -> switch_statement .)
    VAR             reduce using rule 66 (statement -> switch_statement .)
    CONST           reduce using rule 66 (statement -> switch_statement .)
    IF              reduce using rule 66 (statement -> switch_statement .)
    SWITCH          reduce using rule 66 (statement -> switch_statement .)
    STRING          reduce using rule 66 (statement -> switch_statement .)
    INTEGER         reduce using rule 66 (statement -> switch_statement .)
    FLOAT           reduce using rule 66 (statement -> switch_statement .)
    BOOLEAN         reduce using rule 66 (statement -> switch_statement .)
    CASE            reduce using rule 66 (statement -> switch_statement .)
    RKEY            reduce using rule 66 (statement -> switch_statement .)


state 195

    (46) switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .

    FMT_LIBRARY     reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    FUNC            reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    IDENTIFIER      reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    INPUT           reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    VAR             reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    CONST           reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    IF              reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    SWITCH          reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    FOR             reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    STRING          reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    INTEGER         reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    FLOAT           reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    BOOLEAN         reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    BREAK           reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    CONTINUE        reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    PASS            reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    $end            reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    RKEY            reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    CASE            reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)
    RETURN          reduce using rule 46 (switch_statement -> SWITCH switch_expression LKEY switch_cases RKEY .)


state 196

    (32) for -> FOR comparation_operation LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FUNC            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INPUT           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    VAR             reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    CONST           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    IF              reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    SWITCH          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FOR             reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    STRING          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    INTEGER         reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    FLOAT           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    BREAK           reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    PASS            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    $end            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    RKEY            reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)
    RETURN          reduce using rule 32 (for -> FOR comparation_operation LKEY loop_program RKEY .)


state 197

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON . IDENTIFIER operator_for LKEY loop_program RKEY

    IDENTIFIER      shift and go to state 211


state 198

    (67) print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .

    FMT_LIBRARY     reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FUNC            reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    IDENTIFIER      reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INPUT           reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    VAR             reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CONST           reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    IF              reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    SWITCH          reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FOR             reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    STRING          reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    INTEGER         reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    FLOAT           reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BOOLEAN         reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    BREAK           reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CONTINUE        reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    PASS            reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    $end            reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    RKEY            reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    CASE            reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)
    RETURN          reduce using rule 67 (print -> FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN .)


state 199

    (73) data -> data COMMA . value
    (74) data -> data COMMA . IDENTIFIER
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    IDENTIFIER      shift and go to state 213
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    value                          shift and go to state 212

state 200

    (68) print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .

    FMT_LIBRARY     reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FUNC            reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    IDENTIFIER      reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INPUT           reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    VAR             reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CONST           reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    IF              reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    SWITCH          reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FOR             reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    STRING          reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    INTEGER         reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    FLOAT           reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BOOLEAN         reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    BREAK           reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CONTINUE        reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    PASS            reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    $end            reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    RKEY            reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    CASE            reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)
    RETURN          reduce using rule 68 (print -> FMT_LIBRARY DOT PRINTF LPAREN value RPAREN .)


state 201

    (69) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . RPAREN
    (70) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . data RPAREN
    (71) data -> . value
    (72) data -> . IDENTIFIER
    (73) data -> . data COMMA value
    (74) data -> . data COMMA IDENTIFIER
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    RPAREN          shift and go to state 214
    IDENTIFIER      shift and go to state 165
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    value                          shift and go to state 164
    data                           shift and go to state 215

state 202

    (123) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 216
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 203

    (124) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type . LKEY func_program RKEY

    LKEY            shift and go to state 219


state 204

    (143) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 143 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 143 (parameters -> parameters COMMA parameter .)


state 205

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING . COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY

    COMMA           shift and go to state 220


state 206

    (38) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .
    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif . ELSE LKEY program RKEY
    (42) conditions_elseif -> conditions_elseif . else_if
    (43) else_if -> . ELSE IF comparation_operation LKEY program RKEY

    FMT_LIBRARY     reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FUNC            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    IDENTIFIER      reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    INPUT           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    VAR             reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CONST           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    IF              reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    SWITCH          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FOR             reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    STRING          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    INTEGER         reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    FLOAT           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    BOOLEAN         reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    BREAK           reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CONTINUE        reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    PASS            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    $end            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    RKEY            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    CASE            reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    RETURN          reduce using rule 38 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif .)
    ELSE            shift and go to state 221

    else_if                        shift and go to state 222

state 207

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE . LKEY program RKEY
    (43) else_if -> ELSE . IF comparation_operation LKEY program RKEY

    LKEY            shift and go to state 224
    IF              shift and go to state 223


state 208

    (41) conditions_elseif -> else_if .

    ELSE            reduce using rule 41 (conditions_elseif -> else_if .)
    FMT_LIBRARY     reduce using rule 41 (conditions_elseif -> else_if .)
    FUNC            reduce using rule 41 (conditions_elseif -> else_if .)
    IDENTIFIER      reduce using rule 41 (conditions_elseif -> else_if .)
    INPUT           reduce using rule 41 (conditions_elseif -> else_if .)
    VAR             reduce using rule 41 (conditions_elseif -> else_if .)
    CONST           reduce using rule 41 (conditions_elseif -> else_if .)
    IF              reduce using rule 41 (conditions_elseif -> else_if .)
    SWITCH          reduce using rule 41 (conditions_elseif -> else_if .)
    FOR             reduce using rule 41 (conditions_elseif -> else_if .)
    STRING          reduce using rule 41 (conditions_elseif -> else_if .)
    INTEGER         reduce using rule 41 (conditions_elseif -> else_if .)
    FLOAT           reduce using rule 41 (conditions_elseif -> else_if .)
    BOOLEAN         reduce using rule 41 (conditions_elseif -> else_if .)
    BREAK           reduce using rule 41 (conditions_elseif -> else_if .)
    CONTINUE        reduce using rule 41 (conditions_elseif -> else_if .)
    PASS            reduce using rule 41 (conditions_elseif -> else_if .)
    $end            reduce using rule 41 (conditions_elseif -> else_if .)
    RKEY            reduce using rule 41 (conditions_elseif -> else_if .)
    CASE            reduce using rule 41 (conditions_elseif -> else_if .)
    RETURN          reduce using rule 41 (conditions_elseif -> else_if .)


state 209

    (51) switch_case -> CASE value COLON statements .

    CASE            reduce using rule 51 (switch_case -> CASE value COLON statements .)
    RKEY            reduce using rule 51 (switch_case -> CASE value COLON statements .)


state 210

    (53) statements -> statement statements .

    CASE            reduce using rule 53 (statements -> statement statements .)
    RKEY            reduce using rule 53 (statements -> statement statements .)


state 211

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER . operator_for LKEY loop_program RKEY
    (34) operator_for -> . INCREASE
    (35) operator_for -> . DECREASE

    INCREASE        shift and go to state 226
    DECREASE        shift and go to state 227

    operator_for                   shift and go to state 225

state 212

    (73) data -> data COMMA value .

    RPAREN          reduce using rule 73 (data -> data COMMA value .)
    COMMA           reduce using rule 73 (data -> data COMMA value .)


state 213

    (74) data -> data COMMA IDENTIFIER .
    (151) value -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 74 (data -> data COMMA IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (data -> data COMMA IDENTIFIER .)
    RPAREN          reduce using rule 74 (data -> data COMMA IDENTIFIER .)
    COMMA           reduce using rule 74 (data -> data COMMA IDENTIFIER .)

  ! RPAREN          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 214

    (69) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .

    FMT_LIBRARY     reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FUNC            reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IDENTIFIER      reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INPUT           reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    VAR             reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONST           reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    IF              reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    SWITCH          reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FOR             reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    STRING          reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    INTEGER         reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    FLOAT           reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BOOLEAN         reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    BREAK           reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CONTINUE        reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    PASS            reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    $end            reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RKEY            reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    CASE            reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)
    RETURN          reduce using rule 69 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)


state 215

    (70) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data . RPAREN
    (73) data -> data . COMMA value
    (74) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 228
    COMMA           shift and go to state 199


state 216

    (123) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 229
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 217

    (5) func_program -> program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 5 (func_program -> program .)
    RETURN          reduce using rule 5 (func_program -> program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! FMT_LIBRARY     [ reduce using rule 5 (func_program -> program .) ]
  ! FUNC            [ reduce using rule 5 (func_program -> program .) ]
  ! IDENTIFIER      [ reduce using rule 5 (func_program -> program .) ]
  ! INPUT           [ reduce using rule 5 (func_program -> program .) ]
  ! VAR             [ reduce using rule 5 (func_program -> program .) ]
  ! CONST           [ reduce using rule 5 (func_program -> program .) ]
  ! IF              [ reduce using rule 5 (func_program -> program .) ]
  ! SWITCH          [ reduce using rule 5 (func_program -> program .) ]
  ! FOR             [ reduce using rule 5 (func_program -> program .) ]
  ! STRING          [ reduce using rule 5 (func_program -> program .) ]
  ! INTEGER         [ reduce using rule 5 (func_program -> program .) ]
  ! FLOAT           [ reduce using rule 5 (func_program -> program .) ]
  ! BOOLEAN         [ reduce using rule 5 (func_program -> program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 218

    (6) func_program -> RETURN .
    (7) func_program -> RETURN . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 6 (func_program -> RETURN .)
    RETURN          reduce using rule 6 (func_program -> RETURN .)
    FMT_LIBRARY     reduce using rule 6 (func_program -> RETURN .)
    FUNC            reduce using rule 6 (func_program -> RETURN .)
    INPUT           reduce using rule 6 (func_program -> RETURN .)
    VAR             reduce using rule 6 (func_program -> RETURN .)
    CONST           reduce using rule 6 (func_program -> RETURN .)
    IF              reduce using rule 6 (func_program -> RETURN .)
    SWITCH          reduce using rule 6 (func_program -> RETURN .)
    FOR             reduce using rule 6 (func_program -> RETURN .)
    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! IDENTIFIER      [ reduce using rule 6 (func_program -> RETURN .) ]
  ! STRING          [ reduce using rule 6 (func_program -> RETURN .) ]
  ! INTEGER         [ reduce using rule 6 (func_program -> RETURN .) ]
  ! FLOAT           [ reduce using rule 6 (func_program -> RETURN .) ]
  ! BOOLEAN         [ reduce using rule 6 (func_program -> RETURN .) ]

    usable_value                   shift and go to state 232
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 219

    (124) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 233
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 220

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . data RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA . IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (71) data -> . value
    (72) data -> . IDENTIFIER
    (73) data -> . data COMMA value
    (74) data -> . data COMMA IDENTIFIER
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    IDENTIFIER      shift and go to state 235
    FLOAT           shift and go to state 236
    INTEGER         shift and go to state 237
    BOOLEAN         shift and go to state 238
    STRING          shift and go to state 26

    data                           shift and go to state 234
    value                          shift and go to state 164

state 221

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE . LKEY program RKEY
    (43) else_if -> ELSE . IF comparation_operation LKEY program RKEY

    LKEY            shift and go to state 239
    IF              shift and go to state 223


state 222

    (42) conditions_elseif -> conditions_elseif else_if .

    ELSE            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FMT_LIBRARY     reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FUNC            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    IDENTIFIER      reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    INPUT           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    VAR             reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CONST           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    IF              reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    SWITCH          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FOR             reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    STRING          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    INTEGER         reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    FLOAT           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    BOOLEAN         reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    BREAK           reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CONTINUE        reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    PASS            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    $end            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    RKEY            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    CASE            reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)
    RETURN          reduce using rule 42 (conditions_elseif -> conditions_elseif else_if .)


state 223

    (43) else_if -> ELSE IF . comparation_operation LKEY program RKEY
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value

    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 240
    usable_value                   shift and go to state 75
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78

state 224

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    program                        shift and go to state 241
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 225

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for . LKEY loop_program RKEY

    LKEY            shift and go to state 242


state 226

    (34) operator_for -> INCREASE .

    LKEY            reduce using rule 34 (operator_for -> INCREASE .)


state 227

    (35) operator_for -> DECREASE .

    LKEY            reduce using rule 35 (operator_for -> DECREASE .)


state 228

    (70) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .

    FMT_LIBRARY     reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FUNC            reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    IDENTIFIER      reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INPUT           reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    VAR             reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CONST           reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    IF              reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    SWITCH          reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FOR             reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    STRING          reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    INTEGER         reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    FLOAT           reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BOOLEAN         reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    BREAK           reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CONTINUE        reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    PASS            reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    $end            reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    RKEY            reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    CASE            reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)
    RETURN          reduce using rule 70 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN .)


state 229

    (123) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 123 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY .)


state 230

    (8) func_program -> func_program program .
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for FMT_LIBRARY resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 8 (func_program -> func_program program .)
    RETURN          reduce using rule 8 (func_program -> func_program program .)
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! FMT_LIBRARY     [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FUNC            [ reduce using rule 8 (func_program -> func_program program .) ]
  ! IDENTIFIER      [ reduce using rule 8 (func_program -> func_program program .) ]
  ! INPUT           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! VAR             [ reduce using rule 8 (func_program -> func_program program .) ]
  ! CONST           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! IF              [ reduce using rule 8 (func_program -> func_program program .) ]
  ! SWITCH          [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FOR             [ reduce using rule 8 (func_program -> func_program program .) ]
  ! STRING          [ reduce using rule 8 (func_program -> func_program program .) ]
  ! INTEGER         [ reduce using rule 8 (func_program -> func_program program .) ]
  ! FLOAT           [ reduce using rule 8 (func_program -> func_program program .) ]
  ! BOOLEAN         [ reduce using rule 8 (func_program -> func_program program .) ]

    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32
    comparation_operation          shift and go to state 35

state 231

    (9) func_program -> func_program RETURN .
    (10) func_program -> func_program RETURN . usable_value
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RKEY            reduce using rule 9 (func_program -> func_program RETURN .)
    RETURN          reduce using rule 9 (func_program -> func_program RETURN .)
    FMT_LIBRARY     reduce using rule 9 (func_program -> func_program RETURN .)
    FUNC            reduce using rule 9 (func_program -> func_program RETURN .)
    INPUT           reduce using rule 9 (func_program -> func_program RETURN .)
    VAR             reduce using rule 9 (func_program -> func_program RETURN .)
    CONST           reduce using rule 9 (func_program -> func_program RETURN .)
    IF              reduce using rule 9 (func_program -> func_program RETURN .)
    SWITCH          reduce using rule 9 (func_program -> func_program RETURN .)
    FOR             reduce using rule 9 (func_program -> func_program RETURN .)
    IDENTIFIER      shift and go to state 77
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

  ! IDENTIFIER      [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! STRING          [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! INTEGER         [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! FLOAT           [ reduce using rule 9 (func_program -> func_program RETURN .) ]
  ! BOOLEAN         [ reduce using rule 9 (func_program -> func_program RETURN .) ]

    usable_value                   shift and go to state 243
    value                          shift and go to state 23
    call_function                  shift and go to state 76
    arithmetic_operation           shift and go to state 78
    comparation_operation          shift and go to state 35

state 232

    (7) func_program -> RETURN usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    RKEY            reduce using rule 7 (func_program -> RETURN usable_value .)
    RETURN          reduce using rule 7 (func_program -> RETURN usable_value .)
    FMT_LIBRARY     reduce using rule 7 (func_program -> RETURN usable_value .)
    FUNC            reduce using rule 7 (func_program -> RETURN usable_value .)
    IDENTIFIER      reduce using rule 7 (func_program -> RETURN usable_value .)
    INPUT           reduce using rule 7 (func_program -> RETURN usable_value .)
    VAR             reduce using rule 7 (func_program -> RETURN usable_value .)
    CONST           reduce using rule 7 (func_program -> RETURN usable_value .)
    IF              reduce using rule 7 (func_program -> RETURN usable_value .)
    SWITCH          reduce using rule 7 (func_program -> RETURN usable_value .)
    FOR             reduce using rule 7 (func_program -> RETURN usable_value .)
    STRING          reduce using rule 7 (func_program -> RETURN usable_value .)
    INTEGER         reduce using rule 7 (func_program -> RETURN usable_value .)
    FLOAT           reduce using rule 7 (func_program -> RETURN usable_value .)
    BOOLEAN         reduce using rule 7 (func_program -> RETURN usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 233

    (124) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 244
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 234

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data . RPAREN LKEY func_program RKEY
    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data . COMMA RPAREN LKEY func_program RKEY
    (73) data -> data . COMMA value
    (74) data -> data . COMMA IDENTIFIER

    RPAREN          shift and go to state 246
    COMMA           shift and go to state 245


state 235

    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . RPAREN LKEY func_program RKEY
    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER . COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (72) data -> IDENTIFIER .
    (151) value -> IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 248
    COMMA           shift and go to state 247

  ! RPAREN          [ reduce using rule 72 (data -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 72 (data -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 151 (value -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 151 (value -> IDENTIFIER .) ]


state 236

    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT . RPAREN LKEY func_program RKEY
    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT . COMMA RPAREN LKEY func_program RKEY
    (149) value -> FLOAT .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 250
    COMMA           shift and go to state 249

  ! RPAREN          [ reduce using rule 149 (value -> FLOAT .) ]
  ! COMMA           [ reduce using rule 149 (value -> FLOAT .) ]


state 237

    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER . RPAREN LKEY func_program RKEY
    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER . COMMA RPAREN LKEY func_program RKEY
    (148) value -> INTEGER .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 252
    COMMA           shift and go to state 251

  ! RPAREN          [ reduce using rule 148 (value -> INTEGER .) ]
  ! COMMA           [ reduce using rule 148 (value -> INTEGER .) ]


state 238

    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN . RPAREN LKEY func_program RKEY
    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN . COMMA RPAREN LKEY func_program RKEY
    (150) value -> BOOLEAN .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 254
    COMMA           shift and go to state 253

  ! RPAREN          [ reduce using rule 150 (value -> BOOLEAN .) ]
  ! COMMA           [ reduce using rule 150 (value -> BOOLEAN .) ]


state 239

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    program                        shift and go to state 255
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 240

    (43) else_if -> ELSE IF comparation_operation . LKEY program RKEY
    (84) usable_value -> comparation_operation .

    LKEY            shift and go to state 256
    EQUALEQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    NOT_EQUAL       reduce using rule 84 (usable_value -> comparation_operation .)
    LESS_EQUAL      reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER_EQUAL   reduce using rule 84 (usable_value -> comparation_operation .)
    LESS            reduce using rule 84 (usable_value -> comparation_operation .)
    GREATER         reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_AND     reduce using rule 84 (usable_value -> comparation_operation .)
    LOGICAL_OR      reduce using rule 84 (usable_value -> comparation_operation .)
    PLUS            reduce using rule 84 (usable_value -> comparation_operation .)
    MINUS           reduce using rule 84 (usable_value -> comparation_operation .)
    DIVIDE          reduce using rule 84 (usable_value -> comparation_operation .)
    TIMES           reduce using rule 84 (usable_value -> comparation_operation .)
    ENTERE_DIVIDE   reduce using rule 84 (usable_value -> comparation_operation .)
    MODULE          reduce using rule 84 (usable_value -> comparation_operation .)


state 241

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 257
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 242

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY . loop_program RKEY
    (1) loop_program -> . program
    (2) loop_program -> . loop_reserved
    (3) loop_program -> . loop_program program
    (4) loop_program -> . loop_program loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    short_assignment               shift and go to state 15
    comparation_operation          shift and go to state 35
    loop_program                   shift and go to state 258
    program                        shift and go to state 2
    loop_reserved                  shift and go to state 3
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 243

    (10) func_program -> func_program RETURN usable_value .
    (95) arithmetic_operation -> usable_value . PLUS usable_value
    (96) arithmetic_operation -> usable_value . MINUS usable_value
    (97) arithmetic_operation -> usable_value . DIVIDE usable_value
    (98) arithmetic_operation -> usable_value . TIMES usable_value
    (99) arithmetic_operation -> usable_value . ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> usable_value . MODULE usable_value
    (101) comparation_operation -> usable_value . EQUALEQUAL usable_value
    (102) comparation_operation -> usable_value . NOT_EQUAL usable_value
    (103) comparation_operation -> usable_value . LESS_EQUAL usable_value
    (104) comparation_operation -> usable_value . GREATER_EQUAL usable_value
    (105) comparation_operation -> usable_value . LESS usable_value
    (106) comparation_operation -> usable_value . GREATER usable_value
    (107) comparation_operation -> usable_value . LOGICAL_AND usable_value
    (108) comparation_operation -> usable_value . LOGICAL_OR usable_value

    RKEY            reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    RETURN          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FMT_LIBRARY     reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FUNC            reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    IDENTIFIER      reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    INPUT           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    VAR             reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    CONST           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    IF              reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    SWITCH          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FOR             reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    STRING          reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    INTEGER         reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    FLOAT           reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    BOOLEAN         reduce using rule 10 (func_program -> func_program RETURN usable_value .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    DIVIDE          shift and go to state 61
    TIMES           shift and go to state 62
    ENTERE_DIVIDE   shift and go to state 63
    MODULE          shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72


state 244

    (124) def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FUNC            reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    INPUT           reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    VAR             reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CONST           reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    IF              reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    SWITCH          reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FOR             reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    STRING          reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    INTEGER         reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    FLOAT           reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    BREAK           reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CONTINUE        reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    PASS            reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    $end            reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    RKEY            reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    CASE            reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)
    RETURN          reduce using rule 124 (def_function -> FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY .)


state 245

    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA . RPAREN LKEY func_program RKEY
    (73) data -> data COMMA . value
    (74) data -> data COMMA . IDENTIFIER
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER

    RPAREN          shift and go to state 259
    IDENTIFIER      shift and go to state 213
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    value                          shift and go to state 212

state 246

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 260


state 247

    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . RPAREN LKEY func_program RKEY
    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA . BOOLEAN COMMA RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 261
    FLOAT           shift and go to state 262
    INTEGER         shift and go to state 263
    BOOLEAN         shift and go to state 264


state 248

    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 265


state 249

    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 266


state 250

    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 267


state 251

    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 268


state 252

    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 269


state 253

    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 270


state 254

    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 271


state 255

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 272
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 256

    (43) else_if -> ELSE IF comparation_operation LKEY . program RKEY
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    program                        shift and go to state 273
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 257

    (39) if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FUNC            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    IDENTIFIER      reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    INPUT           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    VAR             reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CONST           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    IF              reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    SWITCH          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FOR             reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    STRING          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    INTEGER         reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    FLOAT           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    BOOLEAN         reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    BREAK           reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CONTINUE        reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    PASS            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    $end            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    RKEY            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    CASE            reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)
    RETURN          reduce using rule 39 (if_statement -> IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY .)


state 258

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program . RKEY
    (3) loop_program -> loop_program . program
    (4) loop_program -> loop_program . loop_reserved
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (15) loop_reserved -> . BREAK
    (16) loop_reserved -> . CONTINUE
    (17) loop_reserved -> . PASS
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 274
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    PASS            shift and go to state 8
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    short_assignment               shift and go to state 15
    comparation_operation          shift and go to state 35
    program                        shift and go to state 38
    loop_reserved                  shift and go to state 39
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 259

    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 275


state 260

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 276
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 261

    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 277


state 262

    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT . RPAREN LKEY func_program RKEY
    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT . COMMA RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 279
    COMMA           shift and go to state 278


state 263

    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER . RPAREN LKEY func_program RKEY
    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER . COMMA RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 281
    COMMA           shift and go to state 280


state 264

    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN . RPAREN LKEY func_program RKEY
    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN . COMMA RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 283
    COMMA           shift and go to state 282


state 265

    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 284
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 266

    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 285


state 267

    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 286
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 268

    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 287


state 269

    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 288
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 270

    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 289


state 271

    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 290
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 272

    (40) if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .

    FMT_LIBRARY     reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FUNC            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    IDENTIFIER      reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    INPUT           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    VAR             reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CONST           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    IF              reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    SWITCH          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FOR             reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    STRING          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    INTEGER         reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    FLOAT           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    BOOLEAN         reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    BREAK           reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CONTINUE        reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    PASS            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    $end            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    RKEY            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    CASE            reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)
    RETURN          reduce using rule 40 (if_statement -> IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY .)


state 273

    (43) else_if -> ELSE IF comparation_operation LKEY program . RKEY
    (13) program -> program . sentencia
    (14) program -> program . loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 291
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    comparation_operation          shift and go to state 35
    sentencia                      shift and go to state 40
    loop                           shift and go to state 41
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    usable_value                   shift and go to state 32

state 274

    (33) for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .

    FMT_LIBRARY     reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FUNC            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    IDENTIFIER      reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    INPUT           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    VAR             reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    CONST           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    IF              reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    SWITCH          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FOR             reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    STRING          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    INTEGER         reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    FLOAT           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    BOOLEAN         reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    BREAK           reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    CONTINUE        reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    PASS            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    $end            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    RKEY            reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)
    RETURN          reduce using rule 33 (for -> FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY .)


state 275

    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 292
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 276

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 293
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 277

    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 294
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 278

    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 295


state 279

    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 296


state 280

    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 297


state 281

    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 298


state 282

    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA . RPAREN LKEY func_program RKEY

    RPAREN          shift and go to state 299


state 283

    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 300


state 284

    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 301
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 285

    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 302
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 286

    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 303
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 287

    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 304
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 288

    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 305
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 289

    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 306
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 290

    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 307
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 291

    (43) else_if -> ELSE IF comparation_operation LKEY program RKEY .

    ELSE            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FMT_LIBRARY     reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FUNC            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    IDENTIFIER      reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    INPUT           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    VAR             reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CONST           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    IF              reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    SWITCH          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FOR             reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    STRING          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    INTEGER         reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    FLOAT           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    BOOLEAN         reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    BREAK           reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CONTINUE        reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    PASS            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    $end            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    RKEY            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    CASE            reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)
    RETURN          reduce using rule 43 (else_if -> ELSE IF comparation_operation LKEY program RKEY .)


state 292

    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 308
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 293

    (125) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 125 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY .)


state 294

    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 309
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 295

    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 310


state 296

    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 311
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 297

    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 312


state 298

    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 313
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 299

    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN . LKEY func_program RKEY

    LKEY            shift and go to state 314


state 300

    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 315
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 301

    (127) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 127 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY .)


state 302

    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 316
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 303

    (129) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 129 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY .)


state 304

    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 317
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 305

    (131) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 131 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY .)


state 306

    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 318
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 307

    (133) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 133 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY .)


state 308

    (126) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 126 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY .)


state 309

    (128) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 128 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY .)


state 310

    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 319
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 311

    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 320
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 312

    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 321
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 313

    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 322
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 314

    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY . func_program RKEY
    (5) func_program -> . program
    (6) func_program -> . RETURN
    (7) func_program -> . RETURN usable_value
    (8) func_program -> . func_program program
    (9) func_program -> . func_program RETURN
    (10) func_program -> . func_program RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RETURN          shift and go to state 218
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    func_program                   shift and go to state 323
    program                        shift and go to state 217
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 315

    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 324
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 316

    (130) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 130 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)


state 317

    (132) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 132 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)


state 318

    (134) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 134 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)


state 319

    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 325
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 320

    (135) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 135 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY .)


state 321

    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 326
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 322

    (137) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 137 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY .)


state 323

    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program . RKEY
    (8) func_program -> func_program . program
    (9) func_program -> func_program . RETURN
    (10) func_program -> func_program . RETURN usable_value
    (11) program -> . sentencia
    (12) program -> . loop
    (13) program -> . program sentencia
    (14) program -> . program loop
    (19) sentencia -> . print
    (20) sentencia -> . print_withoutvalue
    (21) sentencia -> . def_function
    (22) sentencia -> . call_function
    (23) sentencia -> . input
    (24) sentencia -> . assignment
    (25) sentencia -> . short_assignment
    (26) sentencia -> . arithmetic_operation
    (27) sentencia -> . direct_arithmetic_operation
    (28) sentencia -> . if_statement
    (29) sentencia -> . function_call
    (30) sentencia -> . switch_statement
    (18) loop -> . for
    (67) print -> . FMT_LIBRARY DOT PRINTLN LPAREN data RPAREN
    (68) print -> . FMT_LIBRARY DOT PRINTF LPAREN value RPAREN
    (69) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (70) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA data RPAREN
    (75) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (76) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (123) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN LKEY func_program RKEY
    (124) def_function -> . FUNC IDENTIFIER LPAREN parameters RPAREN data_type LKEY func_program RKEY
    (125) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data RPAREN LKEY func_program RKEY
    (126) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA data COMMA RPAREN LKEY func_program RKEY
    (127) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN LKEY func_program RKEY
    (128) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA RPAREN LKEY func_program RKEY
    (129) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT RPAREN LKEY func_program RKEY
    (130) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (131) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER RPAREN LKEY func_program RKEY
    (132) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (133) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (134) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (135) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT RPAREN LKEY func_program RKEY
    (136) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY
    (137) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER RPAREN LKEY func_program RKEY
    (138) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY
    (139) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY
    (140) def_function -> . FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY
    (141) call_function -> . IDENTIFIER LPAREN values RPAREN
    (156) input -> . INPUT LPAREN RPAREN
    (157) input -> . INPUT LPAREN value RPAREN
    (158) input -> . INPUT LPAREN identifiers RPAREN
    (77) assignment -> . VAR IDENTIFIER data_type EQUAL usable_value
    (78) assignment -> . CONST IDENTIFIER data_type EQUAL usable_value
    (79) short_assignment -> . IDENTIFIER SHORT_VAR_DECL usable_value
    (95) arithmetic_operation -> . usable_value PLUS usable_value
    (96) arithmetic_operation -> . usable_value MINUS usable_value
    (97) arithmetic_operation -> . usable_value DIVIDE usable_value
    (98) arithmetic_operation -> . usable_value TIMES usable_value
    (99) arithmetic_operation -> . usable_value ENTERE_DIVIDE usable_value
    (100) arithmetic_operation -> . usable_value MODULE usable_value
    (85) direct_arithmetic_operation -> . IDENTIFIER PLUS_EQ value
    (86) direct_arithmetic_operation -> . IDENTIFIER MINUS_EQ value
    (87) direct_arithmetic_operation -> . IDENTIFIER TIMES_EQ value
    (88) direct_arithmetic_operation -> . IDENTIFIER DIVIDE_EQ value
    (89) direct_arithmetic_operation -> . IDENTIFIER MODULO_EQ value
    (90) direct_arithmetic_operation -> . IDENTIFIER BITWISE_AND_EQ value
    (91) direct_arithmetic_operation -> . IDENTIFIER BITWISE_OR_EQ value
    (92) direct_arithmetic_operation -> . IDENTIFIER BITWISE_XOR_EQ value
    (93) direct_arithmetic_operation -> . IDENTIFIER LEFT_SHIFT_EQ value
    (94) direct_arithmetic_operation -> . IDENTIFIER RIGHT_SHIFT_EQ value
    (37) if_statement -> . IF comparation_operation LKEY program RKEY
    (38) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif
    (39) if_statement -> . IF comparation_operation LKEY program RKEY ELSE LKEY program RKEY
    (40) if_statement -> . IF comparation_operation LKEY program RKEY conditions_elseif ELSE LKEY program RKEY
    (36) function_call -> . IDENTIFIER LPAREN values RPAREN
    (44) switch_statement -> . SWITCH value LKEY switch_cases RKEY
    (45) switch_statement -> . SWITCH LKEY switch_cases RKEY
    (46) switch_statement -> . SWITCH switch_expression LKEY switch_cases RKEY
    (31) for -> . FOR LKEY loop_program RKEY
    (32) for -> . FOR comparation_operation LKEY loop_program RKEY
    (33) for -> . FOR short_assignment SEMICOLON comparation_operation SEMICOLON IDENTIFIER operator_for LKEY loop_program RKEY
    (80) usable_value -> . value
    (81) usable_value -> . call_function
    (82) usable_value -> . IDENTIFIER
    (83) usable_value -> . arithmetic_operation
    (84) usable_value -> . comparation_operation
    (147) value -> . STRING
    (148) value -> . INTEGER
    (149) value -> . FLOAT
    (150) value -> . BOOLEAN
    (151) value -> . IDENTIFIER
    (101) comparation_operation -> . usable_value EQUALEQUAL usable_value
    (102) comparation_operation -> . usable_value NOT_EQUAL usable_value
    (103) comparation_operation -> . usable_value LESS_EQUAL usable_value
    (104) comparation_operation -> . usable_value GREATER_EQUAL usable_value
    (105) comparation_operation -> . usable_value LESS usable_value
    (106) comparation_operation -> . usable_value GREATER usable_value
    (107) comparation_operation -> . usable_value LOGICAL_AND usable_value
    (108) comparation_operation -> . usable_value LOGICAL_OR usable_value

    RKEY            shift and go to state 327
    RETURN          shift and go to state 231
    FMT_LIBRARY     shift and go to state 22
    FUNC            shift and go to state 24
    IDENTIFIER      shift and go to state 25
    INPUT           shift and go to state 30
    VAR             shift and go to state 31
    CONST           shift and go to state 33
    IF              shift and go to state 34
    SWITCH          shift and go to state 36
    FOR             shift and go to state 37
    STRING          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 27
    BOOLEAN         shift and go to state 29

    program                        shift and go to state 230
    usable_value                   shift and go to state 32
    sentencia                      shift and go to state 4
    loop                           shift and go to state 5
    print                          shift and go to state 9
    print_withoutvalue             shift and go to state 10
    def_function                   shift and go to state 11
    call_function                  shift and go to state 12
    input                          shift and go to state 13
    assignment                     shift and go to state 14
    short_assignment               shift and go to state 15
    arithmetic_operation           shift and go to state 16
    direct_arithmetic_operation    shift and go to state 17
    if_statement                   shift and go to state 18
    function_call                  shift and go to state 19
    switch_statement               shift and go to state 20
    for                            shift and go to state 21
    value                          shift and go to state 23
    comparation_operation          shift and go to state 35

state 324

    (139) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 139 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN RPAREN LKEY func_program RKEY .)


state 325

    (136) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 136 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA FLOAT COMMA RPAREN LKEY func_program RKEY .)


state 326

    (138) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 138 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA INTEGER COMMA RPAREN LKEY func_program RKEY .)


state 327

    (140) def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .

    FMT_LIBRARY     reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FUNC            reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    IDENTIFIER      reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    INPUT           reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    VAR             reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CONST           reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    IF              reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    SWITCH          reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FOR             reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    STRING          reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    INTEGER         reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    FLOAT           reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    BOOLEAN         reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    BREAK           reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CONTINUE        reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    PASS            reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    $end            reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    RKEY            reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    CASE            reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)
    RETURN          reduce using rule 140 (def_function -> FUNC FMT_LIBRARY DOT PRINTF LPAREN STRING COMMA IDENTIFIER COMMA BOOLEAN COMMA RPAREN LKEY func_program RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FMT_LIBRARY in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 2 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 36 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 38 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 38 resolved as shift
WARNING: shift/reduce conflict for VAR in state 38 resolved as shift
WARNING: shift/reduce conflict for CONST in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 38 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 38 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 118 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 119 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 120 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 121 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 121 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 122 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 123 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 123 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 124 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 124 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 124 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for ENTERE_DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 126 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 126 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 173 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 217 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 217 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 217 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 217 resolved as shift
WARNING: shift/reduce conflict for VAR in state 217 resolved as shift
WARNING: shift/reduce conflict for CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 217 resolved as shift
WARNING: shift/reduce conflict for FOR in state 217 resolved as shift
WARNING: shift/reduce conflict for STRING in state 217 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 217 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 218 resolved as shift
WARNING: shift/reduce conflict for STRING in state 218 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 218 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 218 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 218 resolved as shift
WARNING: shift/reduce conflict for FMT_LIBRARY in state 230 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 230 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 230 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 230 resolved as shift
WARNING: shift/reduce conflict for VAR in state 230 resolved as shift
WARNING: shift/reduce conflict for CONST in state 230 resolved as shift
WARNING: shift/reduce conflict for IF in state 230 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 230 resolved as shift
WARNING: shift/reduce conflict for FOR in state 230 resolved as shift
WARNING: shift/reduce conflict for STRING in state 230 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 230 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 230 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 230 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 231 resolved as shift
WARNING: shift/reduce conflict for STRING in state 231 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 231 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 231 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 231 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 235 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 235 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 236 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 236 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 237 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 238 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 25
WARNING: reduce/reduce conflict in state 77 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 77
WARNING: reduce/reduce conflict in state 86 resolved using rule (usable_value -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 86
WARNING: reduce/reduce conflict in state 107 resolved using rule (identifiers -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 107
WARNING: reduce/reduce conflict in state 144 resolved using rule (function_call -> IDENTIFIER LPAREN values RPAREN)
WARNING: rejected rule (call_function -> IDENTIFIER LPAREN values RPAREN) in state 144
WARNING: reduce/reduce conflict in state 165 resolved using rule (data -> IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 165
WARNING: reduce/reduce conflict in state 213 resolved using rule (data -> data COMMA IDENTIFIER)
WARNING: rejected rule (value -> IDENTIFIER) in state 213
