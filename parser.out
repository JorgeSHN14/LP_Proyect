Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW_FUNCTION_TYPE
    ARROW_SEND_RECEIVE
    AS
    ASSERT
    BITWISE_AND_EQ
    BITWISE_OR_EQ
    BITWISE_XOR
    BITWISE_XOR_ASSIGN
    BITWISE_XOR_EQ
    BREAK
    CLASS
    COLON
    COMMENT
    COMMENT_MULTI
    CONTINUE
    DEF
    DEL
    DIVIDE
    DIVIDE_EQ
    ELIF
    ELLIPSIS
    ELSE
    ENTERE_DIVIDE
    EQUALEQUAL
    EXCEPT
    FALSE
    FAT_ARROW
    FINALLY
    FOR
    FROM
    GLOBAL
    GREATER
    GREATER_EQUAL
    GREATER_THAN
    HEX_NUMBER
    IF
    IMPORT
    IN
    IS
    LAMBDA
    LBRACKET
    LEFT_SHIFT_EQ
    LESS
    LESS_EQUAL
    LESS_THAN
    LKEY
    LOGICAL_AND
    LOGICAL_NOT
    LOGICAL_OR
    MINUS
    MINUS_EQ
    MODULE
    MODULO_EQ
    NONE
    NONLOCAL
    NOT
    NOT_EQUAL
    NULL
    OR
    PASS
    PIPE
    PLUS
    PLUS_EQ
    RAISE
    RBRACKET
    RETURN
    RIGHT_SHIFT_EQ
    RKEY
    SCIENTIFIC_NOTATION
    TIMES
    TIMES_EQ
    TRUE
    TRY
    WHILE
    WITH
    YIELD

Grammar

Rule 0     S' -> sentencia
Rule 1     sentencia -> print
Rule 2     sentencia -> print_withoutvalue
Rule 3     sentencia -> assignment
Rule 4     sentencia -> short_assignment
Rule 5     print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
Rule 6     print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN
Rule 7     print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
Rule 8     print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
Rule 9     print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
Rule 10    identifiers -> IDENTIFIER
Rule 11    identifiers -> identifiers COMMA identifiers
Rule 12    assignment -> VAR IDENTIFIER data_type EQUAL value
Rule 13    assignment -> CONST IDENTIFIER data_type EQUAL value
Rule 14    assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER
Rule 15    assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER
Rule 16    short_assignment -> IDENTIFIER SHORT_VAR_DECL value
Rule 17    short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER
Rule 18    value -> STRING
Rule 19    value -> INTEGER
Rule 20    value -> FLOAT32
Rule 21    value -> FLOAT64
Rule 22    value -> BOOLEAN
Rule 23    data_type -> INTEGER_DATA_TYPE
Rule 24    data_type -> FLOAT32_DATA_TYPE
Rule 25    data_type -> FLOAT64_DATA_TYPE
Rule 26    data_type -> BOOLEAN_DATA_TYPE
Rule 27    data_type -> STRING_DATA_TYPE

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW_FUNCTION_TYPE  : 
ARROW_SEND_RECEIVE   : 
AS                   : 
ASSERT               : 
BITWISE_AND_EQ       : 
BITWISE_OR_EQ        : 
BITWISE_XOR          : 
BITWISE_XOR_ASSIGN   : 
BITWISE_XOR_EQ       : 
BOOLEAN              : 22
BOOLEAN_DATA_TYPE    : 26
BREAK                : 
CLASS                : 
COLON                : 
COMMA                : 8 9 11
COMMENT              : 
COMMENT_MULTI        : 
CONST                : 13 15
CONTINUE             : 
DEF                  : 
DEL                  : 
DIVIDE               : 
DIVIDE_EQ            : 
DOT                  : 5 6 7 8 9
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 
ENTERE_DIVIDE        : 
EQUAL                : 12 13 14 15
EQUALEQUAL           : 
EXCEPT               : 
FALSE                : 
FAT_ARROW            : 
FINALLY              : 
FLOAT32              : 20
FLOAT32_DATA_TYPE    : 24
FLOAT64              : 21
FLOAT64_DATA_TYPE    : 25
FMT_LIBRARY          : 5 6 7 8 9
FOR                  : 
FROM                 : 
GLOBAL               : 
GREATER              : 
GREATER_EQUAL        : 
GREATER_THAN         : 
HEX_NUMBER           : 
IDENTIFIER           : 10 12 13 14 14 15 15 16 17 17
IF                   : 
IMPORT               : 
IN                   : 
INTEGER              : 19
INTEGER_DATA_TYPE    : 23
IS                   : 
LAMBDA               : 
LBRACKET             : 
LEFT_SHIFT_EQ        : 
LESS                 : 
LESS_EQUAL           : 
LESS_THAN            : 
LKEY                 : 
LOGICAL_AND          : 
LOGICAL_NOT          : 
LOGICAL_OR           : 
LPAREN               : 5 6 7 8 9
MINUS                : 
MINUS_EQ             : 
MODULE               : 
MODULO_EQ            : 
NONE                 : 
NONLOCAL             : 
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
PASS                 : 
PIPE                 : 
PLUS                 : 
PLUS_EQ              : 
PRINTF               : 6 8 9
PRINTLN              : 5 7
RAISE                : 
RBRACKET             : 
RETURN               : 
RIGHT_SHIFT_EQ       : 
RKEY                 : 
RPAREN               : 5 6 7 8 9
SCIENTIFIC_NOTATION  : 
SHORT_VAR_DECL       : 16 17
STRING               : 18
STRING_DATA_TYPE     : 27
TIMES                : 
TIMES_EQ             : 
TRUE                 : 
TRY                  : 
VAR                  : 12 14
WHILE                : 
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 3
data_type            : 12 13 14 15
identifiers          : 9 11 11
print                : 1
print_withoutvalue   : 2
sentencia            : 0
short_assignment     : 4
value                : 7 8 9 12 13 16

Parsing method: LALR

state 0

    (0) S' -> . sentencia
    (1) sentencia -> . print
    (2) sentencia -> . print_withoutvalue
    (3) sentencia -> . assignment
    (4) sentencia -> . short_assignment
    (7) print -> . FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN
    (8) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN
    (9) print -> . FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (5) print_withoutvalue -> . FMT_LIBRARY DOT PRINTLN LPAREN RPAREN
    (6) print_withoutvalue -> . FMT_LIBRARY DOT PRINTF LPAREN RPAREN
    (12) assignment -> . VAR IDENTIFIER data_type EQUAL value
    (13) assignment -> . CONST IDENTIFIER data_type EQUAL value
    (14) assignment -> . VAR IDENTIFIER data_type EQUAL IDENTIFIER
    (15) assignment -> . CONST IDENTIFIER data_type EQUAL IDENTIFIER
    (16) short_assignment -> . IDENTIFIER SHORT_VAR_DECL value
    (17) short_assignment -> . IDENTIFIER SHORT_VAR_DECL IDENTIFIER

    FMT_LIBRARY     shift and go to state 6
    VAR             shift and go to state 7
    CONST           shift and go to state 9
    IDENTIFIER      shift and go to state 8

    sentencia                      shift and go to state 1
    print                          shift and go to state 2
    print_withoutvalue             shift and go to state 3
    assignment                     shift and go to state 4
    short_assignment               shift and go to state 5

state 1

    (0) S' -> sentencia .



state 2

    (1) sentencia -> print .

    $end            reduce using rule 1 (sentencia -> print .)


state 3

    (2) sentencia -> print_withoutvalue .

    $end            reduce using rule 2 (sentencia -> print_withoutvalue .)


state 4

    (3) sentencia -> assignment .

    $end            reduce using rule 3 (sentencia -> assignment .)


state 5

    (4) sentencia -> short_assignment .

    $end            reduce using rule 4 (sentencia -> short_assignment .)


state 6

    (7) print -> FMT_LIBRARY . DOT PRINTLN LPAREN value RPAREN
    (8) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA RPAREN
    (9) print -> FMT_LIBRARY . DOT PRINTF LPAREN value COMMA identifiers RPAREN
    (5) print_withoutvalue -> FMT_LIBRARY . DOT PRINTLN LPAREN RPAREN
    (6) print_withoutvalue -> FMT_LIBRARY . DOT PRINTF LPAREN RPAREN

    DOT             shift and go to state 10


state 7

    (12) assignment -> VAR . IDENTIFIER data_type EQUAL value
    (14) assignment -> VAR . IDENTIFIER data_type EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 11


state 8

    (16) short_assignment -> IDENTIFIER . SHORT_VAR_DECL value
    (17) short_assignment -> IDENTIFIER . SHORT_VAR_DECL IDENTIFIER

    SHORT_VAR_DECL  shift and go to state 12


state 9

    (13) assignment -> CONST . IDENTIFIER data_type EQUAL value
    (15) assignment -> CONST . IDENTIFIER data_type EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 13


state 10

    (7) print -> FMT_LIBRARY DOT . PRINTLN LPAREN value RPAREN
    (8) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA RPAREN
    (9) print -> FMT_LIBRARY DOT . PRINTF LPAREN value COMMA identifiers RPAREN
    (5) print_withoutvalue -> FMT_LIBRARY DOT . PRINTLN LPAREN RPAREN
    (6) print_withoutvalue -> FMT_LIBRARY DOT . PRINTF LPAREN RPAREN

    PRINTLN         shift and go to state 14
    PRINTF          shift and go to state 15


state 11

    (12) assignment -> VAR IDENTIFIER . data_type EQUAL value
    (14) assignment -> VAR IDENTIFIER . data_type EQUAL IDENTIFIER
    (23) data_type -> . INTEGER_DATA_TYPE
    (24) data_type -> . FLOAT32_DATA_TYPE
    (25) data_type -> . FLOAT64_DATA_TYPE
    (26) data_type -> . BOOLEAN_DATA_TYPE
    (27) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 17
    FLOAT32_DATA_TYPE shift and go to state 18
    FLOAT64_DATA_TYPE shift and go to state 19
    BOOLEAN_DATA_TYPE shift and go to state 20
    STRING_DATA_TYPE shift and go to state 21

    data_type                      shift and go to state 16

state 12

    (16) short_assignment -> IDENTIFIER SHORT_VAR_DECL . value
    (17) short_assignment -> IDENTIFIER SHORT_VAR_DECL . IDENTIFIER
    (18) value -> . STRING
    (19) value -> . INTEGER
    (20) value -> . FLOAT32
    (21) value -> . FLOAT64
    (22) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 22
    STRING          shift and go to state 24
    INTEGER         shift and go to state 25
    FLOAT32         shift and go to state 26
    FLOAT64         shift and go to state 27
    BOOLEAN         shift and go to state 28

    value                          shift and go to state 23

state 13

    (13) assignment -> CONST IDENTIFIER . data_type EQUAL value
    (15) assignment -> CONST IDENTIFIER . data_type EQUAL IDENTIFIER
    (23) data_type -> . INTEGER_DATA_TYPE
    (24) data_type -> . FLOAT32_DATA_TYPE
    (25) data_type -> . FLOAT64_DATA_TYPE
    (26) data_type -> . BOOLEAN_DATA_TYPE
    (27) data_type -> . STRING_DATA_TYPE

    INTEGER_DATA_TYPE shift and go to state 17
    FLOAT32_DATA_TYPE shift and go to state 18
    FLOAT64_DATA_TYPE shift and go to state 19
    BOOLEAN_DATA_TYPE shift and go to state 20
    STRING_DATA_TYPE shift and go to state 21

    data_type                      shift and go to state 29

state 14

    (7) print -> FMT_LIBRARY DOT PRINTLN . LPAREN value RPAREN
    (5) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 30


state 15

    (8) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA RPAREN
    (9) print -> FMT_LIBRARY DOT PRINTF . LPAREN value COMMA identifiers RPAREN
    (6) print_withoutvalue -> FMT_LIBRARY DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 31


state 16

    (12) assignment -> VAR IDENTIFIER data_type . EQUAL value
    (14) assignment -> VAR IDENTIFIER data_type . EQUAL IDENTIFIER

    EQUAL           shift and go to state 32


state 17

    (23) data_type -> INTEGER_DATA_TYPE .

    EQUAL           reduce using rule 23 (data_type -> INTEGER_DATA_TYPE .)


state 18

    (24) data_type -> FLOAT32_DATA_TYPE .

    EQUAL           reduce using rule 24 (data_type -> FLOAT32_DATA_TYPE .)


state 19

    (25) data_type -> FLOAT64_DATA_TYPE .

    EQUAL           reduce using rule 25 (data_type -> FLOAT64_DATA_TYPE .)


state 20

    (26) data_type -> BOOLEAN_DATA_TYPE .

    EQUAL           reduce using rule 26 (data_type -> BOOLEAN_DATA_TYPE .)


state 21

    (27) data_type -> STRING_DATA_TYPE .

    EQUAL           reduce using rule 27 (data_type -> STRING_DATA_TYPE .)


state 22

    (17) short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .

    $end            reduce using rule 17 (short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER .)


state 23

    (16) short_assignment -> IDENTIFIER SHORT_VAR_DECL value .

    $end            reduce using rule 16 (short_assignment -> IDENTIFIER SHORT_VAR_DECL value .)


state 24

    (18) value -> STRING .

    $end            reduce using rule 18 (value -> STRING .)
    RPAREN          reduce using rule 18 (value -> STRING .)
    COMMA           reduce using rule 18 (value -> STRING .)


state 25

    (19) value -> INTEGER .

    $end            reduce using rule 19 (value -> INTEGER .)
    RPAREN          reduce using rule 19 (value -> INTEGER .)
    COMMA           reduce using rule 19 (value -> INTEGER .)


state 26

    (20) value -> FLOAT32 .

    $end            reduce using rule 20 (value -> FLOAT32 .)
    RPAREN          reduce using rule 20 (value -> FLOAT32 .)
    COMMA           reduce using rule 20 (value -> FLOAT32 .)


state 27

    (21) value -> FLOAT64 .

    $end            reduce using rule 21 (value -> FLOAT64 .)
    RPAREN          reduce using rule 21 (value -> FLOAT64 .)
    COMMA           reduce using rule 21 (value -> FLOAT64 .)


state 28

    (22) value -> BOOLEAN .

    $end            reduce using rule 22 (value -> BOOLEAN .)
    RPAREN          reduce using rule 22 (value -> BOOLEAN .)
    COMMA           reduce using rule 22 (value -> BOOLEAN .)


state 29

    (13) assignment -> CONST IDENTIFIER data_type . EQUAL value
    (15) assignment -> CONST IDENTIFIER data_type . EQUAL IDENTIFIER

    EQUAL           shift and go to state 33


state 30

    (7) print -> FMT_LIBRARY DOT PRINTLN LPAREN . value RPAREN
    (5) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN . RPAREN
    (18) value -> . STRING
    (19) value -> . INTEGER
    (20) value -> . FLOAT32
    (21) value -> . FLOAT64
    (22) value -> . BOOLEAN

    RPAREN          shift and go to state 35
    STRING          shift and go to state 24
    INTEGER         shift and go to state 25
    FLOAT32         shift and go to state 26
    FLOAT64         shift and go to state 27
    BOOLEAN         shift and go to state 28

    value                          shift and go to state 34

state 31

    (8) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA RPAREN
    (9) print -> FMT_LIBRARY DOT PRINTF LPAREN . value COMMA identifiers RPAREN
    (6) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN . RPAREN
    (18) value -> . STRING
    (19) value -> . INTEGER
    (20) value -> . FLOAT32
    (21) value -> . FLOAT64
    (22) value -> . BOOLEAN

    RPAREN          shift and go to state 37
    STRING          shift and go to state 24
    INTEGER         shift and go to state 25
    FLOAT32         shift and go to state 26
    FLOAT64         shift and go to state 27
    BOOLEAN         shift and go to state 28

    value                          shift and go to state 36

state 32

    (12) assignment -> VAR IDENTIFIER data_type EQUAL . value
    (14) assignment -> VAR IDENTIFIER data_type EQUAL . IDENTIFIER
    (18) value -> . STRING
    (19) value -> . INTEGER
    (20) value -> . FLOAT32
    (21) value -> . FLOAT64
    (22) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 24
    INTEGER         shift and go to state 25
    FLOAT32         shift and go to state 26
    FLOAT64         shift and go to state 27
    BOOLEAN         shift and go to state 28

    value                          shift and go to state 39

state 33

    (13) assignment -> CONST IDENTIFIER data_type EQUAL . value
    (15) assignment -> CONST IDENTIFIER data_type EQUAL . IDENTIFIER
    (18) value -> . STRING
    (19) value -> . INTEGER
    (20) value -> . FLOAT32
    (21) value -> . FLOAT64
    (22) value -> . BOOLEAN

    IDENTIFIER      shift and go to state 40
    STRING          shift and go to state 24
    INTEGER         shift and go to state 25
    FLOAT32         shift and go to state 26
    FLOAT64         shift and go to state 27
    BOOLEAN         shift and go to state 28

    value                          shift and go to state 41

state 34

    (7) print -> FMT_LIBRARY DOT PRINTLN LPAREN value . RPAREN

    RPAREN          shift and go to state 42


state 35

    (5) print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .

    $end            reduce using rule 5 (print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN .)


state 36

    (8) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA RPAREN
    (9) print -> FMT_LIBRARY DOT PRINTF LPAREN value . COMMA identifiers RPAREN

    COMMA           shift and go to state 43


state 37

    (6) print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .

    $end            reduce using rule 6 (print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN .)


state 38

    (14) assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .

    $end            reduce using rule 14 (assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER .)


state 39

    (12) assignment -> VAR IDENTIFIER data_type EQUAL value .

    $end            reduce using rule 12 (assignment -> VAR IDENTIFIER data_type EQUAL value .)


state 40

    (15) assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .

    $end            reduce using rule 15 (assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER .)


state 41

    (13) assignment -> CONST IDENTIFIER data_type EQUAL value .

    $end            reduce using rule 13 (assignment -> CONST IDENTIFIER data_type EQUAL value .)


state 42

    (7) print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .

    $end            reduce using rule 7 (print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN .)


state 43

    (8) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . RPAREN
    (9) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA . identifiers RPAREN
    (10) identifiers -> . IDENTIFIER
    (11) identifiers -> . identifiers COMMA identifiers

    RPAREN          shift and go to state 44
    IDENTIFIER      shift and go to state 46

    identifiers                    shift and go to state 45

state 44

    (8) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .

    $end            reduce using rule 8 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN .)


state 45

    (9) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers . RPAREN
    (11) identifiers -> identifiers . COMMA identifiers

    RPAREN          shift and go to state 48
    COMMA           shift and go to state 47


state 46

    (10) identifiers -> IDENTIFIER .

    RPAREN          reduce using rule 10 (identifiers -> IDENTIFIER .)
    COMMA           reduce using rule 10 (identifiers -> IDENTIFIER .)


state 47

    (11) identifiers -> identifiers COMMA . identifiers
    (10) identifiers -> . IDENTIFIER
    (11) identifiers -> . identifiers COMMA identifiers

    IDENTIFIER      shift and go to state 46

    identifiers                    shift and go to state 49

state 48

    (9) print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .

    $end            reduce using rule 9 (print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN .)


state 49

    (11) identifiers -> identifiers COMMA identifiers .
    (11) identifiers -> identifiers . COMMA identifiers

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 11 (identifiers -> identifiers COMMA identifiers .)
    COMMA           shift and go to state 47

  ! COMMA           [ reduce using rule 11 (identifiers -> identifiers COMMA identifiers .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
