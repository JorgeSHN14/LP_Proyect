
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ARROW_FUNCTION_TYPE ARROW_SEND_RECEIVE AS ASSERT BITWISE_AND_EQ BITWISE_OR_EQ BITWISE_XOR BITWISE_XOR_ASSIGN BITWISE_XOR_EQ BOOLEAN BOOLEAN_DATA_TYPE BREAK CLASS COLON COMMA COMMENT COMMENT_MULTI CONST CONTINUE DEF DEL DIVIDE DIVIDE_EQ DOT ELIF ELLIPSIS ELSE ENTERE_DIVIDE EQUAL EQUALEQUAL EXCEPT FALSE FAT_ARROW FINALLY FLOAT32 FLOAT32_DATA_TYPE FLOAT64 FLOAT64_DATA_TYPE FMT_LIBRARY FOR FROM GLOBAL GREATER GREATER_EQUAL GREATER_THAN HEX_NUMBER IDENTIFIER IF IMPORT IN INPUT INTEGER INTEGER_DATA_TYPE IS LAMBDA LBRACKET LEFT_SHIFT_EQ LESS LESS_EQUAL LESS_THAN LKEY LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MINUS MINUS_EQ MODULE MODULO_EQ NONE NONLOCAL NOT NOT_EQUAL NULL OR PASS PIPE PLUS PLUS_EQ PRINTF PRINTLN RAISE RBRACKET RETURN RIGHT_SHIFT_EQ RKEY RPAREN SCIENTIFIC_NOTATION SHORT_VAR_DECL STRING STRING_DATA_TYPE TIMES TIMES_EQ TRUE TRY VAR WITH YIELD program : sentencia\n              | sentencia newline program\n  sentencia : print\n               | print_withoutvalue\n               | for\n               | def_function\n               | call_function\n               | input\n               | assignment\n               | short_assignmentfor : FOR rule_comparation LKEY program RKEYprint : FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPARENprint_withoutvalue : FMT_LIBRARY DOT PRINTLN LPAREN RPAREN\n            | FMT_LIBRARY DOT PRINTF LPAREN RPARENassignment : VAR IDENTIFIER data_type EQUAL value\n                | CONST IDENTIFIER data_type EQUAL value\n                | VAR IDENTIFIER data_type EQUAL IDENTIFIER\n                | CONST IDENTIFIER data_type EQUAL IDENTIFIERshort_assignment : IDENTIFIER SHORT_VAR_DECL value\n                | IDENTIFIER SHORT_VAR_DECL IDENTIFIER\n    arithmetic_operation : IDENTIFIER PLUS_EQ value\n                        | IDENTIFIER MINUS_EQ value\n                        | IDENTIFIER TIMES_EQ value\n                        | IDENTIFIER DIVIDE_EQ value\n                        | IDENTIFIER MODULO_EQ value\n                        | IDENTIFIER BITWISE_AND_EQ value\n                        | IDENTIFIER BITWISE_OR_EQ value\n                        | IDENTIFIER BITWISE_XOR_EQ value\n                        | IDENTIFIER LEFT_SHIFT_EQ value\n                        | IDENTIFIER RIGHT_SHIFT_EQ value\n    rule_comparation : IDENTIFIER EQUALEQUAL value\n                      | IDENTIFIER NOT_EQUAL value\n                      | IDENTIFIER LESS_EQUAL value\n                      | IDENTIFIER GREATER_EQUAL value\n                      | IDENTIFIER LESS value\n                      | IDENTIFIER GREATER value\n                      | IDENTIFIER LOGICAL_AND value\n                      | IDENTIFIER LOGICAL_OR value\n    comparation_operation : value EQUALEQUAL value\n                        | value NOT_EQUAL value\n                        | value LESS_EQUAL value\n                        | value GREATER_EQUAL value\n                        | value LESS value\n                        | value GREATER value\n                        | value LOGICAL_AND value\n                        | value LOGICAL_OR value\n    identifiers : IDENTIFIER\n                 | identifiers COMMA identifiersdef_function : DEF IDENTIFIER LPAREN parameters RPAREN COLON sentenciacall_function : IDENTIFIER LPAREN values RPARENparameters : parameter\n                | parameters COMMA parameter parameter : IDENTIFIER valuevalues : value\n            | values COMMA valuevalue : STRING\n          | INTEGER\n          | FLOAT32\n          | FLOAT64\n          | BOOLEANdata_type : INTEGER_DATA_TYPE\n               | FLOAT32_DATA_TYPE\n               | FLOAT64_DATA_TYPE\n               | BOOLEAN_DATA_TYPE\n               | STRING_DATA_TYPEinput : INPUT LPAREN RPAREN\n             | INPUT LPAREN value RPAREN\n             | INPUT LPAREN identifiers RPAREN\n    \n    newline : \n\n    '
    
_lr_action_items = {'FMT_LIBRARY':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[11,-71,-3,-4,-5,-6,-7,-8,-9,-10,11,11,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,11,-13,-51,-14,]),'FOR':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[12,-71,-3,-4,-5,-6,-7,-8,-9,-10,12,12,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,12,-13,-51,-14,]),'DEF':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[13,-71,-3,-4,-5,-6,-7,-8,-9,-10,13,13,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,13,-13,-51,-14,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,12,13,16,17,18,24,25,31,40,43,44,45,46,47,48,49,50,75,77,78,79,80,81,83,85,86,89,92,93,94,95,96,97,98,100,102,103,],[14,-71,-3,-4,-5,-6,-7,-8,-9,-10,21,22,26,27,14,48,53,14,72,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,53,92,94,-15,-16,-11,72,-19,-17,-20,-18,-12,53,14,-13,-51,-14,]),'INPUT':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[15,-71,-3,-4,-5,-6,-7,-8,-9,-10,15,15,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,15,-13,-51,-14,]),'VAR':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[16,-71,-3,-4,-5,-6,-7,-8,-9,-10,16,16,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,16,-13,-51,-14,]),'CONST':([0,2,3,4,5,6,7,8,9,10,18,31,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,98,100,102,103,],[17,-71,-3,-4,-5,-6,-7,-8,-9,-10,17,17,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,17,-13,-51,-14,]),'$end':([1,2,3,4,5,6,7,8,9,10,28,43,44,45,46,47,48,49,50,75,77,78,83,85,86,92,93,94,95,96,100,102,103,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-58,-59,-60,-61,-62,-22,-21,-68,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,-13,-51,-14,]),'RKEY':([2,3,4,5,6,7,8,9,10,28,43,44,45,46,47,48,49,50,63,75,77,78,83,85,86,92,93,94,95,96,100,102,103,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-58,-59,-60,-61,-62,-22,-21,-68,86,-52,-69,-70,-15,-16,-11,-19,-17,-20,-18,-12,-13,-51,-14,]),'DOT':([11,],[19,]),'LPAREN':([14,15,22,29,30,],[23,25,40,61,62,]),'SHORT_VAR_DECL':([14,],[24,]),'PRINTLN':([19,],[29,]),'PRINTF':([19,],[30,]),'LKEY':([20,43,44,45,46,47,64,65,66,67,68,69,70,71,],[31,-58,-59,-60,-61,-62,-33,-34,-35,-36,-37,-38,-39,-40,]),'EQUALEQUAL':([21,],[32,]),'NOT_EQUAL':([21,],[33,]),'LESS_EQUAL':([21,],[34,]),'GREATER_EQUAL':([21,],[35,]),'LESS':([21,],[36,]),'GREATER':([21,],[37,]),'LOGICAL_AND':([21,],[38,]),'LOGICAL_OR':([21,],[39,]),'STRING':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'INTEGER':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'FLOAT32':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FLOAT64':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'BOOLEAN':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'RPAREN':([25,41,42,43,44,45,46,47,51,52,53,61,62,73,74,82,87,90,91,97,99,101,],[50,75,-56,-58,-59,-60,-61,-62,77,78,-49,83,85,88,-53,96,-55,-57,-50,100,-54,103,]),'INTEGER_DATA_TYPE':([26,27,],[55,55,]),'FLOAT32_DATA_TYPE':([26,27,],[56,56,]),'FLOAT64_DATA_TYPE':([26,27,],[57,57,]),'BOOLEAN_DATA_TYPE':([26,27,],[58,58,]),'STRING_DATA_TYPE':([26,27,],[59,59,]),'COMMA':([41,42,43,44,45,46,47,52,53,73,74,84,87,90,91,99,101,],[76,-56,-58,-59,-60,-61,-62,79,-49,89,-53,97,-55,-57,79,-54,79,]),'EQUAL':([54,55,56,57,58,59,60,],[80,-63,-64,-65,-66,-67,81,]),'COLON':([88,],[98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,18,31,],[1,28,63,]),'sentencia':([0,18,31,98,],[2,2,2,102,]),'print':([0,18,31,98,],[3,3,3,3,]),'print_withoutvalue':([0,18,31,98,],[4,4,4,4,]),'for':([0,18,31,98,],[5,5,5,5,]),'def_function':([0,18,31,98,],[6,6,6,6,]),'call_function':([0,18,31,98,],[7,7,7,7,]),'input':([0,18,31,98,],[8,8,8,8,]),'assignment':([0,18,31,98,],[9,9,9,9,]),'short_assignment':([0,18,31,98,],[10,10,10,10,]),'newline':([2,],[18,]),'rule_comparation':([12,],[20,]),'values':([23,],[41,]),'value':([23,24,25,32,33,34,35,36,37,38,39,61,62,72,76,80,81,],[42,49,51,64,65,66,67,68,69,70,71,82,84,87,90,93,95,]),'identifiers':([25,79,97,],[52,91,101,]),'data_type':([26,27,],[54,60,]),'parameters':([40,],[73,]),'parameter':([40,89,],[74,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentencia','program',1,'p_program','syntax_analyzer.py',6),
  ('program -> sentencia newline program','program',3,'p_program','syntax_analyzer.py',7),
  ('sentencia -> print','sentencia',1,'p_sentencia','syntax_analyzer.py',11),
  ('sentencia -> print_withoutvalue','sentencia',1,'p_sentencia','syntax_analyzer.py',12),
  ('sentencia -> for','sentencia',1,'p_sentencia','syntax_analyzer.py',13),
  ('sentencia -> def_function','sentencia',1,'p_sentencia','syntax_analyzer.py',14),
  ('sentencia -> call_function','sentencia',1,'p_sentencia','syntax_analyzer.py',15),
  ('sentencia -> input','sentencia',1,'p_sentencia','syntax_analyzer.py',16),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',17),
  ('sentencia -> short_assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',18),
  ('for -> FOR rule_comparation LKEY program RKEY','for',5,'p_for','syntax_analyzer.py',22),
  ('print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN','print',6,'p_print','syntax_analyzer.py',28),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN','print',7,'p_print','syntax_analyzer.py',29),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN','print',8,'p_print','syntax_analyzer.py',30),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',33),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',34),
  ('assignment -> VAR IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',37),
  ('assignment -> CONST IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',38),
  ('assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',39),
  ('assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',40),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL value','short_assignment',3,'p_short_assignment','syntax_analyzer.py',43),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER','short_assignment',3,'p_short_assignment','syntax_analyzer.py',44),
  ('arithmetic_operation -> IDENTIFIER PLUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',49),
  ('arithmetic_operation -> IDENTIFIER MINUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',50),
  ('arithmetic_operation -> IDENTIFIER TIMES_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',51),
  ('arithmetic_operation -> IDENTIFIER DIVIDE_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',52),
  ('arithmetic_operation -> IDENTIFIER MODULO_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',53),
  ('arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',54),
  ('arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',55),
  ('arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',56),
  ('arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',57),
  ('arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',58),
  ('rule_comparation -> IDENTIFIER EQUALEQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',63),
  ('rule_comparation -> IDENTIFIER NOT_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',64),
  ('rule_comparation -> IDENTIFIER LESS_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',65),
  ('rule_comparation -> IDENTIFIER GREATER_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',66),
  ('rule_comparation -> IDENTIFIER LESS value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',67),
  ('rule_comparation -> IDENTIFIER GREATER value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',68),
  ('rule_comparation -> IDENTIFIER LOGICAL_AND value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',69),
  ('rule_comparation -> IDENTIFIER LOGICAL_OR value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',70),
  ('comparation_operation -> value EQUALEQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',74),
  ('comparation_operation -> value NOT_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',75),
  ('comparation_operation -> value LESS_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',76),
  ('comparation_operation -> value GREATER_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',77),
  ('comparation_operation -> value LESS value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',78),
  ('comparation_operation -> value GREATER value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',79),
  ('comparation_operation -> value LOGICAL_AND value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',80),
  ('comparation_operation -> value LOGICAL_OR value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',81),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','syntax_analyzer.py',87),
  ('identifiers -> identifiers COMMA identifiers','identifiers',3,'p_identifiers','syntax_analyzer.py',88),
  ('def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia','def_function',7,'p_def_function','syntax_analyzer.py',93),
  ('call_function -> IDENTIFIER LPAREN values RPAREN','call_function',4,'p_call_funcion','syntax_analyzer.py',96),
  ('parameters -> parameter','parameters',1,'p_parameters','syntax_analyzer.py',99),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','syntax_analyzer.py',100),
  ('parameter -> IDENTIFIER value','parameter',2,'p_parameter','syntax_analyzer.py',103),
  ('values -> value','values',1,'p_values','syntax_analyzer.py',106),
  ('values -> values COMMA value','values',3,'p_values','syntax_analyzer.py',107),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',111),
  ('value -> INTEGER','value',1,'p_value','syntax_analyzer.py',112),
  ('value -> FLOAT32','value',1,'p_value','syntax_analyzer.py',113),
  ('value -> FLOAT64','value',1,'p_value','syntax_analyzer.py',114),
  ('value -> BOOLEAN','value',1,'p_value','syntax_analyzer.py',115),
  ('data_type -> INTEGER_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',118),
  ('data_type -> FLOAT32_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',119),
  ('data_type -> FLOAT64_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',120),
  ('data_type -> BOOLEAN_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',121),
  ('data_type -> STRING_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',122),
  ('input -> INPUT LPAREN RPAREN','input',3,'p_input','syntax_analyzer.py',126),
  ('input -> INPUT LPAREN value RPAREN','input',4,'p_input','syntax_analyzer.py',127),
  ('input -> INPUT LPAREN identifiers RPAREN','input',4,'p_input','syntax_analyzer.py',128),
  ('newline -> <empty>','newline',0,'p_newline','syntax_analyzer.py',133),
]
