
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ARROW_FUNCTION_TYPE ARROW_SEND_RECEIVE AS ASSERT BITWISE_AND_EQ BITWISE_OR_EQ BITWISE_XOR BITWISE_XOR_ASSIGN BITWISE_XOR_EQ BOOLEAN BOOLEAN_DATA_TYPE BREAK CLASS COLON COMMA COMMENT COMMENT_MULTI CONST CONTINUE DEF DEL DIVIDE DIVIDE_EQ DOT ELIF ELLIPSIS ELSE ENTERE_DIVIDE EQUAL EQUALEQUAL EXCEPT FALSE FAT_ARROW FINALLY FLOAT32 FLOAT32_DATA_TYPE FLOAT64 FLOAT64_DATA_TYPE FMT_LIBRARY FOR FROM GLOBAL GREATER GREATER_EQUAL GREATER_THAN HEX_NUMBER IDENTIFIER IF IMPORT IN INPUT INTEGER INTEGER_DATA_TYPE IS LAMBDA LBRACKET LEFT_SHIFT_EQ LESS LESS_EQUAL LESS_THAN LKEY LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MINUS MINUS_EQ MODULE MODULO_EQ NONE NONLOCAL NOT NOT_EQUAL NULL OR PASS PIPE PLUS PLUS_EQ PRINTF PRINTLN RAISE RBRACKET RETURN RIGHT_SHIFT_EQ RKEY RPAREN SCIENTIFIC_NOTATION SHORT_VAR_DECL STRING STRING_DATA_TYPE TIMES TIMES_EQ TRUE TRY VAR WHILE WITH YIELDsentencia : print\n              | print_withoutvalue\n              | assignment\n              | short_assignment\n              | arithmetic_operation\n              | while\n              | def_function\n              | call_functionprint_withoutvalue : FMT_LIBRARY DOT PRINTLN LPAREN RPAREN\n            | FMT_LIBRARY DOT PRINTF LPAREN RPARENprint : FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPARENidentifiers : IDENTIFIER\n                 | identifiers COMMA identifiersassignment : VAR IDENTIFIER data_type EQUAL value\n                | CONST IDENTIFIER data_type EQUAL value\n                | VAR IDENTIFIER data_type EQUAL IDENTIFIER\n                | CONST IDENTIFIER data_type EQUAL IDENTIFIERshort_assignment : IDENTIFIER SHORT_VAR_DECL value\n                | IDENTIFIER SHORT_VAR_DECL IDENTIFIERwhile : WHILE LPAREN value RPAREN COLON sentenciadef_function : DEF IDENTIFIER LPAREN parameters RPAREN COLON sentenciacall_function : IDENTIFIER LPAREN values RPARENparameters : parameter\n                | parameters COMMA parameter parameter : IDENTIFIER valuevalues : value\n            | values COMMA valuevalue : STRING\n          | INTEGER\n          | FLOAT32\n          | FLOAT64\n          | BOOLEAN\n    arithmetic_operation : IDENTIFIER PLUS_EQ value\n                        | IDENTIFIER MINUS_EQ value\n                        | IDENTIFIER TIMES_EQ value\n                        | IDENTIFIER DIVIDE_EQ value\n                        | IDENTIFIER MODULO_EQ value\n                        | IDENTIFIER BITWISE_AND_EQ value\n                        | IDENTIFIER BITWISE_OR_EQ value\n                        | IDENTIFIER BITWISE_XOR_EQ value\n                        | IDENTIFIER LEFT_SHIFT_EQ value\n                        | IDENTIFIER RIGHT_SHIFT_EQ value\n    data_type : INTEGER_DATA_TYPE\n               | FLOAT32_DATA_TYPE\n               | FLOAT64_DATA_TYPE\n               | BOOLEAN_DATA_TYPE\n               | STRING_DATA_TYPEinput : INPUT LPAREN RPAREN\n             | INPUT LPAREN value RPAREN\n             | INPUT LPAREN identifiers RPAREN\n    '
    
_lr_action_items = {'FMT_LIBRARY':([0,82,89,],[10,10,10,]),'VAR':([0,82,89,],[11,11,11,]),'CONST':([0,82,89,],[13,13,13,]),'IDENTIFIER':([0,11,13,15,18,62,65,68,82,85,87,89,95,],[12,17,30,32,41,70,77,80,12,70,93,12,93,]),'WHILE':([0,82,89,],[14,14,14,]),'DEF':([0,82,89,],[15,15,15,]),'$end':([1,2,3,4,5,6,7,8,9,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,66,74,76,77,78,80,81,86,88,91,94,96,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-21,-20,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-24,-9,-10,-18,-16,-19,-17,-11,-22,-12,-23,-13,]),'DOT':([10,],[16,]),'SHORT_VAR_DECL':([12,],[18,]),'PLUS_EQ':([12,],[19,]),'MINUS_EQ':([12,],[20,]),'TIMES_EQ':([12,],[21,]),'DIVIDE_EQ':([12,],[22,]),'MODULO_EQ':([12,],[23,]),'BITWISE_AND_EQ':([12,],[24,]),'BITWISE_OR_EQ':([12,],[25,]),'BITWISE_XOR_EQ':([12,],[26,]),'LEFT_SHIFT_EQ':([12,],[27,]),'RIGHT_SHIFT_EQ':([12,],[28,]),'LPAREN':([12,14,32,33,34,],[29,31,62,63,64,]),'PRINTLN':([16,],[33,]),'PRINTF':([16,],[34,]),'INTEGER_DATA_TYPE':([17,30,],[36,36,]),'FLOAT32_DATA_TYPE':([17,30,],[37,37,]),'FLOAT64_DATA_TYPE':([17,30,],[38,38,]),'BOOLEAN_DATA_TYPE':([17,30,],[39,39,]),'STRING_DATA_TYPE':([17,30,],[40,40,]),'STRING':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'INTEGER':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'FLOAT32':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FLOAT64':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'BOOLEAN':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'EQUAL':([35,36,37,38,39,40,60,],[65,-45,-46,-47,-48,-49,68,]),'RPAREN':([43,44,45,46,47,58,59,61,63,64,71,72,73,79,83,87,90,92,93,97,],[-30,-31,-32,-33,-34,66,-28,69,74,76,84,-25,86,-29,-27,91,-26,96,-14,-15,]),'COMMA':([43,44,45,46,47,58,59,71,72,75,79,83,90,92,93,97,],[-30,-31,-32,-33,-34,67,-28,85,-25,87,-29,-27,-26,95,-14,95,]),'COLON':([69,84,],[82,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,82,89,],[1,88,94,]),'print':([0,82,89,],[2,2,2,]),'print_withoutvalue':([0,82,89,],[3,3,3,]),'assignment':([0,82,89,],[4,4,4,]),'short_assignment':([0,82,89,],[5,5,5,]),'arithmetic_operation':([0,82,89,],[6,6,6,]),'while':([0,82,89,],[7,7,7,]),'def_function':([0,82,89,],[8,8,8,]),'call_function':([0,82,89,],[9,9,9,]),'data_type':([17,30,],[35,60,]),'value':([18,19,20,21,22,23,24,25,26,27,28,29,31,63,64,65,67,68,70,],[42,48,49,50,51,52,53,54,55,56,57,59,61,73,75,78,79,81,83,]),'values':([29,],[58,]),'parameters':([62,],[71,]),'parameter':([62,85,],[72,90,]),'identifiers':([87,95,],[92,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> print','sentencia',1,'p_sentencia','syntax_analyzer.py',5),
  ('sentencia -> print_withoutvalue','sentencia',1,'p_sentencia','syntax_analyzer.py',6),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',7),
  ('sentencia -> short_assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',8),
  ('sentencia -> arithmetic_operation','sentencia',1,'p_sentencia','syntax_analyzer.py',9),
  ('sentencia -> while','sentencia',1,'p_sentencia','syntax_analyzer.py',10),
  ('sentencia -> def_function','sentencia',1,'p_sentencia','syntax_analyzer.py',11),
  ('sentencia -> call_function','sentencia',1,'p_sentencia','syntax_analyzer.py',12),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',18),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',19),
  ('print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN','print',6,'p_print','syntax_analyzer.py',22),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN','print',7,'p_print','syntax_analyzer.py',23),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN','print',8,'p_print','syntax_analyzer.py',24),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','syntax_analyzer.py',28),
  ('identifiers -> identifiers COMMA identifiers','identifiers',3,'p_identifiers','syntax_analyzer.py',29),
  ('assignment -> VAR IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',32),
  ('assignment -> CONST IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',33),
  ('assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',34),
  ('assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',35),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL value','short_assignment',3,'p_short_assignment','syntax_analyzer.py',38),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER','short_assignment',3,'p_short_assignment','syntax_analyzer.py',39),
  ('while -> WHILE LPAREN value RPAREN COLON sentencia','while',6,'p_while','syntax_analyzer.py',43),
  ('def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia','def_function',7,'p_def_function','syntax_analyzer.py',46),
  ('call_function -> IDENTIFIER LPAREN values RPAREN','call_function',4,'p_call_funcion','syntax_analyzer.py',49),
  ('parameters -> parameter','parameters',1,'p_parameters','syntax_analyzer.py',52),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','syntax_analyzer.py',53),
  ('parameter -> IDENTIFIER value','parameter',2,'p_parameter','syntax_analyzer.py',56),
  ('values -> value','values',1,'p_values','syntax_analyzer.py',59),
  ('values -> values COMMA value','values',3,'p_values','syntax_analyzer.py',60),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',63),
  ('value -> INTEGER','value',1,'p_value','syntax_analyzer.py',64),
  ('value -> FLOAT32','value',1,'p_value','syntax_analyzer.py',65),
  ('value -> FLOAT64','value',1,'p_value','syntax_analyzer.py',66),
  ('value -> BOOLEAN','value',1,'p_value','syntax_analyzer.py',67),
  ('arithmetic_operation -> IDENTIFIER PLUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',71),
  ('arithmetic_operation -> IDENTIFIER MINUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',72),
  ('arithmetic_operation -> IDENTIFIER TIMES_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',73),
  ('arithmetic_operation -> IDENTIFIER DIVIDE_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',74),
  ('arithmetic_operation -> IDENTIFIER MODULO_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',75),
  ('arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',76),
  ('arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',77),
  ('arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',78),
  ('arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',79),
  ('arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',80),
  ('data_type -> INTEGER_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',84),
  ('data_type -> FLOAT32_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',85),
  ('data_type -> FLOAT64_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',86),
  ('data_type -> BOOLEAN_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',87),
  ('data_type -> STRING_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',88),
  ('input -> INPUT LPAREN RPAREN','input',3,'p_input','syntax_analyzer.py',91),
  ('input -> INPUT LPAREN value RPAREN','input',4,'p_input','syntax_analyzer.py',92),
  ('input -> INPUT LPAREN identifiers RPAREN','input',4,'p_input','syntax_analyzer.py',93),
]
