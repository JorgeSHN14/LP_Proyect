
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ARROW_FUNCTION_TYPE ARROW_SEND_RECEIVE AS ASSERT BITWISE_AND_EQ BITWISE_OR_EQ BITWISE_XOR BITWISE_XOR_ASSIGN BITWISE_XOR_EQ BOOLEAN BOOLEAN_DATA_TYPE BREAK CLASS COLON COMMA COMMENT COMMENT_MULTI CONST CONTINUE DEF DEL DIVIDE DIVIDE_EQ DOT ELIF ELLIPSIS ELSE ENTERE_DIVIDE EQUAL EQUALEQUAL EXCEPT FALSE FAT_ARROW FINALLY FLOAT32 FLOAT32_DATA_TYPE FLOAT64 FLOAT64_DATA_TYPE FMT_LIBRARY FOR FROM GLOBAL GREATER GREATER_EQUAL GREATER_THAN HEX_NUMBER IDENTIFIER IF IMPORT IN INTEGER INTEGER_DATA_TYPE IS LAMBDA LBRACKET LEFT_SHIFT_EQ LESS LESS_EQUAL LESS_THAN LKEY LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MINUS MINUS_EQ MODULE MODULO_EQ NONE NONLOCAL NOT NOT_EQUAL NULL OR PASS PIPE PLUS PLUS_EQ PRINTF PRINTLN RAISE RBRACKET RETURN RIGHT_SHIFT_EQ RKEY RPAREN SCIENTIFIC_NOTATION SHORT_VAR_DECL STRING STRING_DATA_TYPE TIMES TIMES_EQ TRUE TRY VAR WHILE WITH YIELDsentencia : print\n              | print_withoutvalue\n              | assignment\n              | short_assignmentprint_withoutvalue : FMT_LIBRARY DOT PRINTLN LPAREN RPAREN\n            | FMT_LIBRARY DOT PRINTF LPAREN RPARENprint : FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPARENidentifiers : IDENTIFIER\n                 | identifiers COMMA identifiersassignment : VAR IDENTIFIER data_type EQUAL value\n                | CONST IDENTIFIER data_type EQUAL value\n                | VAR IDENTIFIER data_type EQUAL IDENTIFIER\n                | CONST IDENTIFIER data_type EQUAL IDENTIFIERshort_assignment : IDENTIFIER SHORT_VAR_DECL value\n                | IDENTIFIER SHORT_VAR_DECL IDENTIFIERvalue : STRING\n          | INTEGER\n          | FLOAT32\n          | FLOAT64\n          | BOOLEANdata_type : INTEGER_DATA_TYPE\n               | FLOAT32_DATA_TYPE\n               | FLOAT64_DATA_TYPE\n               | BOOLEAN_DATA_TYPE\n               | STRING_DATA_TYPE'
    
_lr_action_items = {'FMT_LIBRARY':([0,],[6,]),'VAR':([0,],[7,]),'CONST':([0,],[9,]),'IDENTIFIER':([0,7,9,12,32,33,43,47,],[8,11,13,22,38,40,46,46,]),'$end':([1,2,3,4,5,22,23,24,25,26,27,28,35,37,38,39,40,41,42,44,48,],[0,-1,-2,-3,-4,-17,-16,-18,-19,-20,-21,-22,-5,-6,-14,-12,-15,-13,-7,-8,-9,]),'DOT':([6,],[10,]),'SHORT_VAR_DECL':([8,],[12,]),'PRINTLN':([10,],[14,]),'PRINTF':([10,],[15,]),'INTEGER_DATA_TYPE':([11,13,],[17,17,]),'FLOAT32_DATA_TYPE':([11,13,],[18,18,]),'FLOAT64_DATA_TYPE':([11,13,],[19,19,]),'BOOLEAN_DATA_TYPE':([11,13,],[20,20,]),'STRING_DATA_TYPE':([11,13,],[21,21,]),'STRING':([12,30,31,32,33,],[24,24,24,24,24,]),'INTEGER':([12,30,31,32,33,],[25,25,25,25,25,]),'FLOAT32':([12,30,31,32,33,],[26,26,26,26,26,]),'FLOAT64':([12,30,31,32,33,],[27,27,27,27,27,]),'BOOLEAN':([12,30,31,32,33,],[28,28,28,28,28,]),'LPAREN':([14,15,],[30,31,]),'EQUAL':([16,17,18,19,20,21,29,],[32,-23,-24,-25,-26,-27,33,]),'RPAREN':([24,25,26,27,28,30,31,34,43,45,46,49,],[-18,-19,-20,-21,-22,35,37,42,44,48,-10,-11,]),'COMMA':([24,25,26,27,28,36,45,46,49,],[-18,-19,-20,-21,-22,43,47,-10,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,],[1,]),'print':([0,],[2,]),'print_withoutvalue':([0,],[3,]),'assignment':([0,],[4,]),'short_assignment':([0,],[5,]),'data_type':([11,13,],[16,29,]),'value':([12,30,31,32,33,],[23,34,36,39,41,]),'identifiers':([43,47,],[45,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> print','sentencia',1,'p_sentencia','syntax_analyzer.py',5),
  ('sentencia -> print_withoutvalue','sentencia',1,'p_sentencia','syntax_analyzer.py',6),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',7),
  ('sentencia -> short_assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',8),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',12),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',13),
  ('print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN','print',6,'p_print','syntax_analyzer.py',16),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN','print',7,'p_print','syntax_analyzer.py',17),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN','print',8,'p_print','syntax_analyzer.py',18),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','syntax_analyzer.py',22),
  ('identifiers -> identifiers COMMA identifiers','identifiers',3,'p_identifiers','syntax_analyzer.py',23),
  ('assignment -> VAR IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',26),
  ('assignment -> CONST IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',27),
  ('assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',28),
  ('assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',29),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL value','short_assignment',3,'p_short_assignment','syntax_analyzer.py',32),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER','short_assignment',3,'p_short_assignment','syntax_analyzer.py',33),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',37),
  ('value -> INTEGER','value',1,'p_value','syntax_analyzer.py',38),
  ('value -> FLOAT32','value',1,'p_value','syntax_analyzer.py',39),
  ('value -> FLOAT64','value',1,'p_value','syntax_analyzer.py',40),
  ('value -> BOOLEAN','value',1,'p_value','syntax_analyzer.py',41),
  ('data_type -> INTEGER_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',44),
  ('data_type -> FLOAT32_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',45),
  ('data_type -> FLOAT64_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',46),
  ('data_type -> BOOLEAN_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',47),
  ('data_type -> STRING_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',48),
]
