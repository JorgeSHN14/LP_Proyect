
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ARROW_FUNCTION_TYPE ARROW_SEND_RECEIVE AS ASSERT BITWISE_AND_EQ BITWISE_OR_EQ BITWISE_XOR BITWISE_XOR_ASSIGN BITWISE_XOR_EQ BOOLEAN BOOLEAN_DATA_TYPE BREAK CLASS COLON COMMA COMMENT COMMENT_MULTI CONST CONTINUE DEF DEL DIVIDE DIVIDE_EQ DOT ELIF ELLIPSIS ELSE ENTERE_DIVIDE EQUAL EQUALEQUAL EXCEPT FALSE FAT_ARROW FINALLY FLOAT32 FLOAT32_DATA_TYPE FLOAT64 FLOAT64_DATA_TYPE FMT_LIBRARY FOR FROM GLOBAL GREATER GREATER_EQUAL GREATER_THAN HEX_NUMBER IDENTIFIER IF IMPORT IN INPUT INTEGER INTEGER_DATA_TYPE IS LAMBDA LBRACKET LEFT_SHIFT_EQ LESS LESS_EQUAL LESS_THAN LKEY LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MINUS MINUS_EQ MODULE MODULO_EQ NEWLINE NONE NONLOCAL NOT NOT_EQUAL NULL OR PASS PIPE PLUS PLUS_EQ PRINTF PRINTLN RAISE RBRACKET RETURN RIGHT_SHIFT_EQ RKEY RPAREN SCIENTIFIC_NOTATION SHORT_VAR_DECL STRING STRING_DATA_TYPE TIMES TIMES_EQ TRUE TRY VAR WITH YIELD program : sentencia\n  sentencia : print\n               | print_withoutvalue\n               | for\n               | def_function\n               | call_function\n               | input\n               | assignment\n               | short_assignmentfor : FOR rule_comparation LKEY program RKEYprint : FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN\n           | FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPARENprint_withoutvalue : FMT_LIBRARY DOT PRINTLN LPAREN RPAREN\n            | FMT_LIBRARY DOT PRINTF LPAREN RPARENassignment : VAR IDENTIFIER data_type EQUAL value\n                | CONST IDENTIFIER data_type EQUAL value\n                | VAR IDENTIFIER data_type EQUAL IDENTIFIER\n                | CONST IDENTIFIER data_type EQUAL IDENTIFIERshort_assignment : IDENTIFIER SHORT_VAR_DECL value\n                | IDENTIFIER SHORT_VAR_DECL IDENTIFIER\n    arithmetic_operation : IDENTIFIER PLUS_EQ value\n                        | IDENTIFIER MINUS_EQ value\n                        | IDENTIFIER TIMES_EQ value\n                        | IDENTIFIER DIVIDE_EQ value\n                        | IDENTIFIER MODULO_EQ value\n                        | IDENTIFIER BITWISE_AND_EQ value\n                        | IDENTIFIER BITWISE_OR_EQ value\n                        | IDENTIFIER BITWISE_XOR_EQ value\n                        | IDENTIFIER LEFT_SHIFT_EQ value\n                        | IDENTIFIER RIGHT_SHIFT_EQ value\n    rule_comparation : IDENTIFIER EQUALEQUAL value\n                      | IDENTIFIER NOT_EQUAL value\n                      | IDENTIFIER LESS_EQUAL value\n                      | IDENTIFIER GREATER_EQUAL value\n                      | IDENTIFIER LESS value\n                      | IDENTIFIER GREATER value\n                      | IDENTIFIER LOGICAL_AND value\n                      | IDENTIFIER LOGICAL_OR value\n    comparation_operation : value EQUALEQUAL value\n                        | value NOT_EQUAL value\n                        | value LESS_EQUAL value\n                        | value GREATER_EQUAL value\n                        | value LESS value\n                        | value GREATER value\n                        | value LOGICAL_AND value\n                        | value LOGICAL_OR value\n    identifiers : IDENTIFIER\n                 | identifiers COMMA identifiersdef_function : DEF IDENTIFIER LPAREN parameters RPAREN COLON sentenciacall_function : IDENTIFIER LPAREN values RPARENparameters : parameter\n                | parameters COMMA parameter parameter : IDENTIFIER valuevalues : value\n            | values COMMA valuevalue : STRING\n          | INTEGER\n          | FLOAT32\n          | FLOAT64\n          | BOOLEANdata_type : INTEGER_DATA_TYPE\n               | FLOAT32_DATA_TYPE\n               | FLOAT64_DATA_TYPE\n               | BOOLEAN_DATA_TYPE\n               | STRING_DATA_TYPEinput : INPUT LPAREN RPAREN\n             | INPUT LPAREN value RPAREN\n             | INPUT LPAREN identifiers RPAREN\n    '
    
_lr_action_items = {'FMT_LIBRARY':([0,29,96,],[11,11,11,]),'FOR':([0,29,96,],[12,12,12,]),'DEF':([0,29,96,],[13,13,13,]),'IDENTIFIER':([0,12,13,16,17,23,24,29,38,77,78,79,87,95,96,],[14,20,21,25,26,46,51,14,70,51,90,92,70,51,14,]),'INPUT':([0,29,96,],[15,15,15,]),'VAR':([0,29,96,],[16,16,16,]),'CONST':([0,29,96,],[17,17,17,]),'$end':([1,2,3,4,5,6,7,8,9,10,41,42,43,44,45,46,47,48,73,75,76,81,83,84,90,91,92,93,94,98,100,101,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-57,-58,-59,-60,-61,-21,-20,-67,-51,-68,-69,-14,-15,-10,-18,-16,-19,-17,-11,-12,-50,-13,]),'RKEY':([2,3,4,5,6,7,8,9,10,41,42,43,44,45,46,47,48,61,73,75,76,81,83,84,90,91,92,93,94,98,100,101,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-57,-58,-59,-60,-61,-21,-20,-67,84,-51,-68,-69,-14,-15,-10,-18,-16,-19,-17,-11,-12,-50,-13,]),'DOT':([11,],[18,]),'LPAREN':([14,15,21,27,28,],[22,24,38,59,60,]),'SHORT_VAR_DECL':([14,],[23,]),'PRINTLN':([18,],[27,]),'PRINTF':([18,],[28,]),'LKEY':([19,41,42,43,44,45,62,63,64,65,66,67,68,69,],[29,-57,-58,-59,-60,-61,-32,-33,-34,-35,-36,-37,-38,-39,]),'EQUALEQUAL':([20,],[30,]),'NOT_EQUAL':([20,],[31,]),'LESS_EQUAL':([20,],[32,]),'GREATER_EQUAL':([20,],[33,]),'LESS':([20,],[34,]),'GREATER':([20,],[35,]),'LOGICAL_AND':([20,],[36,]),'LOGICAL_OR':([20,],[37,]),'STRING':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'INTEGER':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FLOAT32':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FLOAT64':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'BOOLEAN':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'RPAREN':([24,39,40,41,42,43,44,45,49,50,51,59,60,71,72,80,85,88,89,95,97,99,],[48,73,-55,-57,-58,-59,-60,-61,75,76,-48,81,83,86,-52,94,-54,-56,-49,98,-53,101,]),'INTEGER_DATA_TYPE':([25,26,],[53,53,]),'FLOAT32_DATA_TYPE':([25,26,],[54,54,]),'FLOAT64_DATA_TYPE':([25,26,],[55,55,]),'BOOLEAN_DATA_TYPE':([25,26,],[56,56,]),'STRING_DATA_TYPE':([25,26,],[57,57,]),'COMMA':([39,40,41,42,43,44,45,50,51,71,72,82,85,88,89,97,99,],[74,-55,-57,-58,-59,-60,-61,77,-48,87,-52,95,-54,-56,77,-53,77,]),'EQUAL':([52,53,54,55,56,57,58,],[78,-62,-63,-64,-65,-66,79,]),'COLON':([86,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,29,],[1,61,]),'sentencia':([0,29,96,],[2,2,100,]),'print':([0,29,96,],[3,3,3,]),'print_withoutvalue':([0,29,96,],[4,4,4,]),'for':([0,29,96,],[5,5,5,]),'def_function':([0,29,96,],[6,6,6,]),'call_function':([0,29,96,],[7,7,7,]),'input':([0,29,96,],[8,8,8,]),'assignment':([0,29,96,],[9,9,9,]),'short_assignment':([0,29,96,],[10,10,10,]),'rule_comparation':([12,],[19,]),'values':([22,],[39,]),'value':([22,23,24,30,31,32,33,34,35,36,37,59,60,70,74,78,79,],[40,47,49,62,63,64,65,66,67,68,69,80,82,85,88,91,93,]),'identifiers':([24,77,95,],[50,89,99,]),'data_type':([25,26,],[52,58,]),'parameters':([38,],[71,]),'parameter':([38,87,],[72,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentencia','program',1,'p_program','syntax_analyzer.py',6),
  ('sentencia -> print','sentencia',1,'p_sentencia','syntax_analyzer.py',10),
  ('sentencia -> print_withoutvalue','sentencia',1,'p_sentencia','syntax_analyzer.py',11),
  ('sentencia -> for','sentencia',1,'p_sentencia','syntax_analyzer.py',12),
  ('sentencia -> def_function','sentencia',1,'p_sentencia','syntax_analyzer.py',13),
  ('sentencia -> call_function','sentencia',1,'p_sentencia','syntax_analyzer.py',14),
  ('sentencia -> input','sentencia',1,'p_sentencia','syntax_analyzer.py',15),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',16),
  ('sentencia -> short_assignment','sentencia',1,'p_sentencia','syntax_analyzer.py',17),
  ('for -> FOR rule_comparation LKEY program RKEY','for',5,'p_for','syntax_analyzer.py',21),
  ('print -> FMT_LIBRARY DOT PRINTLN LPAREN value RPAREN','print',6,'p_print','syntax_analyzer.py',27),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA RPAREN','print',7,'p_print','syntax_analyzer.py',28),
  ('print -> FMT_LIBRARY DOT PRINTF LPAREN value COMMA identifiers RPAREN','print',8,'p_print','syntax_analyzer.py',29),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTLN LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',32),
  ('print_withoutvalue -> FMT_LIBRARY DOT PRINTF LPAREN RPAREN','print_withoutvalue',5,'p_print_withoutvalue','syntax_analyzer.py',33),
  ('assignment -> VAR IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',36),
  ('assignment -> CONST IDENTIFIER data_type EQUAL value','assignment',5,'p_assignment','syntax_analyzer.py',37),
  ('assignment -> VAR IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',38),
  ('assignment -> CONST IDENTIFIER data_type EQUAL IDENTIFIER','assignment',5,'p_assignment','syntax_analyzer.py',39),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL value','short_assignment',3,'p_short_assignment','syntax_analyzer.py',42),
  ('short_assignment -> IDENTIFIER SHORT_VAR_DECL IDENTIFIER','short_assignment',3,'p_short_assignment','syntax_analyzer.py',43),
  ('arithmetic_operation -> IDENTIFIER PLUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',48),
  ('arithmetic_operation -> IDENTIFIER MINUS_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',49),
  ('arithmetic_operation -> IDENTIFIER TIMES_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',50),
  ('arithmetic_operation -> IDENTIFIER DIVIDE_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',51),
  ('arithmetic_operation -> IDENTIFIER MODULO_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',52),
  ('arithmetic_operation -> IDENTIFIER BITWISE_AND_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',53),
  ('arithmetic_operation -> IDENTIFIER BITWISE_OR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',54),
  ('arithmetic_operation -> IDENTIFIER BITWISE_XOR_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',55),
  ('arithmetic_operation -> IDENTIFIER LEFT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',56),
  ('arithmetic_operation -> IDENTIFIER RIGHT_SHIFT_EQ value','arithmetic_operation',3,'p_arithmetic_operation','syntax_analyzer.py',57),
  ('rule_comparation -> IDENTIFIER EQUALEQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',62),
  ('rule_comparation -> IDENTIFIER NOT_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',63),
  ('rule_comparation -> IDENTIFIER LESS_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',64),
  ('rule_comparation -> IDENTIFIER GREATER_EQUAL value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',65),
  ('rule_comparation -> IDENTIFIER LESS value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',66),
  ('rule_comparation -> IDENTIFIER GREATER value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',67),
  ('rule_comparation -> IDENTIFIER LOGICAL_AND value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',68),
  ('rule_comparation -> IDENTIFIER LOGICAL_OR value','rule_comparation',3,'p_rule_comparation','syntax_analyzer.py',69),
  ('comparation_operation -> value EQUALEQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',73),
  ('comparation_operation -> value NOT_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',74),
  ('comparation_operation -> value LESS_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',75),
  ('comparation_operation -> value GREATER_EQUAL value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',76),
  ('comparation_operation -> value LESS value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',77),
  ('comparation_operation -> value GREATER value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',78),
  ('comparation_operation -> value LOGICAL_AND value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',79),
  ('comparation_operation -> value LOGICAL_OR value','comparation_operation',3,'p_comparation_operation','syntax_analyzer.py',80),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','syntax_analyzer.py',86),
  ('identifiers -> identifiers COMMA identifiers','identifiers',3,'p_identifiers','syntax_analyzer.py',87),
  ('def_function -> DEF IDENTIFIER LPAREN parameters RPAREN COLON sentencia','def_function',7,'p_def_function','syntax_analyzer.py',92),
  ('call_function -> IDENTIFIER LPAREN values RPAREN','call_function',4,'p_call_funcion','syntax_analyzer.py',95),
  ('parameters -> parameter','parameters',1,'p_parameters','syntax_analyzer.py',98),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','syntax_analyzer.py',99),
  ('parameter -> IDENTIFIER value','parameter',2,'p_parameter','syntax_analyzer.py',102),
  ('values -> value','values',1,'p_values','syntax_analyzer.py',105),
  ('values -> values COMMA value','values',3,'p_values','syntax_analyzer.py',106),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',110),
  ('value -> INTEGER','value',1,'p_value','syntax_analyzer.py',111),
  ('value -> FLOAT32','value',1,'p_value','syntax_analyzer.py',112),
  ('value -> FLOAT64','value',1,'p_value','syntax_analyzer.py',113),
  ('value -> BOOLEAN','value',1,'p_value','syntax_analyzer.py',114),
  ('data_type -> INTEGER_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',117),
  ('data_type -> FLOAT32_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',118),
  ('data_type -> FLOAT64_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',119),
  ('data_type -> BOOLEAN_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',120),
  ('data_type -> STRING_DATA_TYPE','data_type',1,'p_data_type','syntax_analyzer.py',121),
  ('input -> INPUT LPAREN RPAREN','input',3,'p_input','syntax_analyzer.py',125),
  ('input -> INPUT LPAREN value RPAREN','input',4,'p_input','syntax_analyzer.py',126),
  ('input -> INPUT LPAREN identifiers RPAREN','input',4,'p_input','syntax_analyzer.py',127),
]
